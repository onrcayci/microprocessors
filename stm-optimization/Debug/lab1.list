
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002008  08002008  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002008  08002008  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002008  08002008  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002008  08002008  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800200c  0800200c  0001200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000074  08002084  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002084  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b83  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000134e  00000000  00000000  00026c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000588  00000000  00000000  00027f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004d8  00000000  00000000  00028500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025270  00000000  00000000  000289d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000565c  00000000  00000000  0004dc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2691  00000000  00000000  000532a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00135935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001548  00000000  00000000  00135a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000005c9  00000000  00000000  00136f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f80 	.word	0x08001f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08001f80 	.word	0x08001f80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 f91e 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 f80d 	bl	8000a34 <HAL_InitTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	e001      	b.n	8000a2a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a26:	f001 f8e7 	bl	8001bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d023      	beq.n	8000a90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_InitTick+0x70>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f91d 	bl	8000c9e <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10f      	bne.n	8000a8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d809      	bhi.n	8000a84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f8f5 	bl	8000c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0x74>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e007      	b.n	8000a94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e004      	b.n	8000a94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e001      	b.n	8000a94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000000 	.word	0x20000000

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20000090 	.word	0x20000090

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000090 	.word	0x20000090

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff47 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff5c 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff8e 	bl	8000ba4 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5d 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffb0 	bl	8000c0c <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce2:	d130      	bne.n	8000d46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf0:	d038      	beq.n	8000d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2232      	movs	r2, #50	; 0x32
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	3301      	adds	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d18:	e002      	b.n	8000d20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d2c:	d102      	bne.n	8000d34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f2      	bne.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d40:	d110      	bne.n	8000d64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e00f      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d52:	d007      	beq.n	8000d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40007000 	.word	0x40007000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	431bde83 	.word	0x431bde83

08000d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e3d4      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d92:	4ba1      	ldr	r3, [pc, #644]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d9c:	4b9e      	ldr	r3, [pc, #632]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80e4 	beq.w	8000f7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d007      	beq.n	8000dca <HAL_RCC_OscConfig+0x4a>
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b0c      	cmp	r3, #12
 8000dbe:	f040 808b 	bne.w	8000ed8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 8087 	bne.w	8000ed8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dca:	4b93      	ldr	r3, [pc, #588]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <HAL_RCC_OscConfig+0x62>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e3ac      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a1a      	ldr	r2, [r3, #32]
 8000de6:	4b8c      	ldr	r3, [pc, #560]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <HAL_RCC_OscConfig+0x7c>
 8000df2:	4b89      	ldr	r3, [pc, #548]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dfa:	e005      	b.n	8000e08 <HAL_RCC_OscConfig+0x88>
 8000dfc:	4b86      	ldr	r3, [pc, #536]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d223      	bcs.n	8000e54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fd07 	bl	8001824 <RCC_SetFlashLatencyFromMSIRange>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e38d      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e20:	4b7d      	ldr	r3, [pc, #500]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a7c      	ldr	r2, [pc, #496]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b7a      	ldr	r3, [pc, #488]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4977      	ldr	r1, [pc, #476]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3e:	4b76      	ldr	r3, [pc, #472]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	4972      	ldr	r1, [pc, #456]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]
 8000e52:	e025      	b.n	8000ea0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e54:	4b70      	ldr	r3, [pc, #448]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a6f      	ldr	r2, [pc, #444]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b6d      	ldr	r3, [pc, #436]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	496a      	ldr	r1, [pc, #424]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e72:	4b69      	ldr	r3, [pc, #420]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	4965      	ldr	r1, [pc, #404]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d109      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fcc7 	bl	8001824 <RCC_SetFlashLatencyFromMSIRange>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e34d      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ea0:	f000 fc36 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	4a5a      	ldr	r2, [pc, #360]	; (800101c <HAL_RCC_OscConfig+0x29c>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ebc:	4a58      	ldr	r2, [pc, #352]	; (8001020 <HAL_RCC_OscConfig+0x2a0>)
 8000ebe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ec0:	4b58      	ldr	r3, [pc, #352]	; (8001024 <HAL_RCC_OscConfig+0x2a4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fdb5 	bl	8000a34 <HAL_InitTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d052      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	e331      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d032      	beq.n	8000f46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ee0:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fdf2 	bl	8000ad4 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fdee 	bl	8000ad4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e31a      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f06:	4b44      	ldr	r3, [pc, #272]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a40      	ldr	r2, [pc, #256]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b3e      	ldr	r3, [pc, #248]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	493b      	ldr	r1, [pc, #236]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f30:	4b39      	ldr	r3, [pc, #228]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	4936      	ldr	r1, [pc, #216]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
 8000f44:	e01a      	b.n	8000f7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a33      	ldr	r2, [pc, #204]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fdbf 	bl	8000ad4 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fdbb 	bl	8000ad4 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e2e7      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_RCC_OscConfig+0x1da>
 8000f78:	e000      	b.n	8000f7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d074      	beq.n	8001072 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d005      	beq.n	8000f9a <HAL_RCC_OscConfig+0x21a>
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b0c      	cmp	r3, #12
 8000f92:	d10e      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d10b      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d064      	beq.n	8001070 <HAL_RCC_OscConfig+0x2f0>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d160      	bne.n	8001070 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e2c4      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x24a>
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a15      	ldr	r2, [pc, #84]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e01d      	b.n	8001006 <HAL_RCC_OscConfig+0x286>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd2:	d10c      	bne.n	8000fee <HAL_RCC_OscConfig+0x26e>
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e00b      	b.n	8001006 <HAL_RCC_OscConfig+0x286>
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_RCC_OscConfig+0x298>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d01c      	beq.n	8001048 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100e:	f7ff fd61 	bl	8000ad4 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001014:	e011      	b.n	800103a <HAL_RCC_OscConfig+0x2ba>
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	08001fc0 	.word	0x08001fc0
 8001020:	20000008 	.word	0x20000008
 8001024:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fd54 	bl	8000ad4 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e280      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103a:	4baf      	ldr	r3, [pc, #700]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0x2a8>
 8001046:	e014      	b.n	8001072 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001048:	f7ff fd44 	bl	8000ad4 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fd40 	bl	8000ad4 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e26c      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001062:	4ba5      	ldr	r3, [pc, #660]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x2d0>
 800106e:	e000      	b.n	8001072 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d060      	beq.n	8001140 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d005      	beq.n	8001090 <HAL_RCC_OscConfig+0x310>
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b0c      	cmp	r3, #12
 8001088:	d119      	bne.n	80010be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d116      	bne.n	80010be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001090:	4b99      	ldr	r3, [pc, #612]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_OscConfig+0x328>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e249      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	061b      	lsls	r3, r3, #24
 80010b6:	4990      	ldr	r1, [pc, #576]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010bc:	e040      	b.n	8001140 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d023      	beq.n	800110e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c6:	4b8c      	ldr	r3, [pc, #560]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a8b      	ldr	r2, [pc, #556]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff fcff 	bl	8000ad4 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fcfb 	bl	8000ad4 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e227      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ec:	4b82      	ldr	r3, [pc, #520]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f8:	4b7f      	ldr	r3, [pc, #508]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	061b      	lsls	r3, r3, #24
 8001106:	497c      	ldr	r1, [pc, #496]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e018      	b.n	8001140 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110e:	4b7a      	ldr	r3, [pc, #488]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a79      	ldr	r2, [pc, #484]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111a:	f7ff fcdb 	bl	8000ad4 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff fcd7 	bl	8000ad4 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e203      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001134:	4b70      	ldr	r3, [pc, #448]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d03c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01c      	beq.n	800118e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001154:	4b68      	ldr	r3, [pc, #416]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115a:	4a67      	ldr	r2, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001164:	f7ff fcb6 	bl	8000ad4 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fcb2 	bl	8000ad4 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1de      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800117e:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0ef      	beq.n	800116c <HAL_RCC_OscConfig+0x3ec>
 800118c:	e01b      	b.n	80011c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118e:	4b5a      	ldr	r3, [pc, #360]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001194:	4a58      	ldr	r2, [pc, #352]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119e:	f7ff fc99 	bl	8000ad4 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a6:	f7ff fc95 	bl	8000ad4 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1c1      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b8:	4b4f      	ldr	r3, [pc, #316]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80011ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ef      	bne.n	80011a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80a6 	beq.w	8001320 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011d8:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10d      	bne.n	8001200 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	4a43      	ldr	r2, [pc, #268]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6593      	str	r3, [r2, #88]	; 0x58
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fc:	2301      	movs	r3, #1
 80011fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001200:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <HAL_RCC_OscConfig+0x57c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d118      	bne.n	800123e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_RCC_OscConfig+0x57c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a3a      	ldr	r2, [pc, #232]	; (80012fc <HAL_RCC_OscConfig+0x57c>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001218:	f7ff fc5c 	bl	8000ad4 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001220:	f7ff fc58 	bl	8000ad4 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e184      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <HAL_RCC_OscConfig+0x57c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d108      	bne.n	8001258 <HAL_RCC_OscConfig+0x4d8>
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124c:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001256:	e024      	b.n	80012a2 <HAL_RCC_OscConfig+0x522>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d110      	bne.n	8001282 <HAL_RCC_OscConfig+0x502>
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001266:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001276:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001280:	e00f      	b.n	80012a2 <HAL_RCC_OscConfig+0x522>
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 8001294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 800129a:	f023 0304 	bic.w	r3, r3, #4
 800129e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d016      	beq.n	80012d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012aa:	f7ff fc13 	bl	8000ad4 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff fc0f 	bl	8000ad4 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e139      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_OscConfig+0x578>)
 80012ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0ed      	beq.n	80012b2 <HAL_RCC_OscConfig+0x532>
 80012d6:	e01a      	b.n	800130e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fbfc 	bl	8000ad4 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012de:	e00f      	b.n	8001300 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fbf8 	bl	8000ad4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d906      	bls.n	8001300 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e122      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001300:	4b90      	ldr	r3, [pc, #576]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1e8      	bne.n	80012e0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001314:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	4a8a      	ldr	r2, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 800131a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8108 	beq.w	800153a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	2b02      	cmp	r3, #2
 8001330:	f040 80d0 	bne.w	80014d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	429a      	cmp	r2, r3
 8001346:	d130      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	3b01      	subs	r3, #1
 8001354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	429a      	cmp	r2, r3
 8001358:	d127      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001364:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d11f      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001374:	2a07      	cmp	r2, #7
 8001376:	bf14      	ite	ne
 8001378:	2201      	movne	r2, #1
 800137a:	2200      	moveq	r2, #0
 800137c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800137e:	4293      	cmp	r3, r2
 8001380:	d113      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d109      	bne.n	80013aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d06e      	beq.n	8001488 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	d069      	beq.n	8001484 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013b0:	4b64      	ldr	r3, [pc, #400]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013bc:	4b61      	ldr	r3, [pc, #388]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0b7      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013cc:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5c      	ldr	r2, [pc, #368]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80013d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d8:	f7ff fb7c 	bl	8000ad4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fb78 	bl	8000ad4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0a4      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f2:	4b54      	ldr	r3, [pc, #336]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fe:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_RCC_OscConfig+0x7c8>)
 8001404:	4013      	ands	r3, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800140e:	3a01      	subs	r2, #1
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001418:	0212      	lsls	r2, r2, #8
 800141a:	4311      	orrs	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001420:	0852      	lsrs	r2, r2, #1
 8001422:	3a01      	subs	r2, #1
 8001424:	0552      	lsls	r2, r2, #21
 8001426:	4311      	orrs	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800142c:	0852      	lsrs	r2, r2, #1
 800142e:	3a01      	subs	r2, #1
 8001430:	0652      	lsls	r2, r2, #25
 8001432:	4311      	orrs	r1, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001438:	0912      	lsrs	r2, r2, #4
 800143a:	0452      	lsls	r2, r2, #17
 800143c:	430a      	orrs	r2, r1
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a3e      	ldr	r2, [pc, #248]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001450:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a3b      	ldr	r2, [pc, #236]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800145c:	f7ff fb3a 	bl	8000ad4 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fb36 	bl	8000ad4 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e062      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001482:	e05a      	b.n	800153a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e059      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d152      	bne.n	800153a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014ac:	f7ff fb12 	bl	8000ad4 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb0e 	bl	8000ad4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e03a      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x734>
 80014d2:	e032      	b.n	800153a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d02d      	beq.n	8001536 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80014e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d105      	bne.n	80014fe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 80014f8:	f023 0303 	bic.w	r3, r3, #3
 80014fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 8001504:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fae1 	bl	8000ad4 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fadd 	bl	8000ad4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e009      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_RCC_OscConfig+0x7c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x796>
 8001534:	e001      	b.n	800153a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	f99d808c 	.word	0xf99d808c

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0c8      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b63      	ldr	r3, [pc, #396]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4961      	ldr	r1, [pc, #388]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b0      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d04c      	beq.n	8001636 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a4:	4b56      	ldr	r3, [pc, #344]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d121      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e09e      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d115      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e092      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d4:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e086      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	4b46      	ldr	r3, [pc, #280]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e07e      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015f4:	4b42      	ldr	r3, [pc, #264]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 0203 	bic.w	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	493f      	ldr	r1, [pc, #252]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001606:	f7ff fa65 	bl	8000ad4 <HAL_GetTick>
 800160a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160c:	e00a      	b.n	8001624 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f7ff fa61 	bl	8000ad4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e066      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 020c 	and.w	r2, r3, #12
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	429a      	cmp	r2, r3
 8001634:	d1eb      	bne.n	800160e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	492c      	ldr	r1, [pc, #176]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d210      	bcs.n	8001684 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 0207 	bic.w	r2, r3, #7
 800166a:	4924      	ldr	r1, [pc, #144]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_ClockConfig+0x1b0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e036      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4918      	ldr	r1, [pc, #96]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4910      	ldr	r1, [pc, #64]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c2:	f000 f825 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 80016c6:	4601      	mov	r1, r0
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	fa21 f303 	lsr.w	r3, r1, r3
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f9a4 	bl	8000a34 <HAL_InitTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80016f0:	7afb      	ldrb	r3, [r7, #11]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000
 8001700:	40021000 	.word	0x40021000
 8001704:	08001fc0 	.word	0x08001fc0
 8001708:	20000008 	.word	0x20000008
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x34>
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d121      	bne.n	8001782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d11e      	bne.n	8001782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001756:	0a1b      	lsrs	r3, r3, #8
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e005      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800176c:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <HAL_RCC_GetSysClockFreq+0x108>)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10d      	bne.n	8001798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d102      	bne.n	800178e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_GetSysClockFreq+0x10c>)
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	e004      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b08      	cmp	r3, #8
 8001792:	d101      	bne.n	8001798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_RCC_GetSysClockFreq+0x110>)
 8001796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d133      	bne.n	8001806 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0xaa>
 80017b2:	e005      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_GetSysClockFreq+0x10c>)
 80017b6:	617b      	str	r3, [r7, #20]
      break;
 80017b8:	e005      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_GetSysClockFreq+0x110>)
 80017bc:	617b      	str	r3, [r7, #20]
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	617b      	str	r3, [r7, #20]
      break;
 80017c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	3301      	adds	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	fb02 f203 	mul.w	r2, r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_GetSysClockFreq+0x104>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0e5b      	lsrs	r3, r3, #25
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	3301      	adds	r3, #1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001806:	69bb      	ldr	r3, [r7, #24]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3724      	adds	r7, #36	; 0x24
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000
 8001818:	08001fd0 	.word	0x08001fd0
 800181c:	00f42400 	.word	0x00f42400
 8001820:	007a1200 	.word	0x007a1200

08001824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800183c:	f7ff fa3c 	bl	8000cb8 <HAL_PWREx_GetVoltageRange>
 8001840:	6178      	str	r0, [r7, #20]
 8001842:	e014      	b.n	800186e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	4a24      	ldr	r2, [pc, #144]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	6593      	str	r3, [r2, #88]	; 0x58
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800185c:	f7ff fa2c 	bl	8000cb8 <HAL_PWREx_GetVoltageRange>
 8001860:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001874:	d10b      	bne.n	800188e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b80      	cmp	r3, #128	; 0x80
 800187a:	d919      	bls.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2ba0      	cmp	r3, #160	; 0xa0
 8001880:	d902      	bls.n	8001888 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001882:	2302      	movs	r3, #2
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	e013      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	e010      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b80      	cmp	r3, #128	; 0x80
 8001892:	d902      	bls.n	800189a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001894:	2303      	movs	r3, #3
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	e00a      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b80      	cmp	r3, #128	; 0x80
 800189e:	d102      	bne.n	80018a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e004      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b70      	cmp	r3, #112	; 0x70
 80018aa:	d101      	bne.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018ac:	2301      	movs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 0207 	bic.w	r2, r3, #7
 80018b8:	4909      	ldr	r1, [pc, #36]	; (80018e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40022000 	.word	0x40022000

080018e4 <asmStd>:
* R1 = size
* R2 = pointer to result
*/

asmStd:
	PUSH			{R3, R4}	// saving R3 and R4 according to calling convention
 80018e4:	b418      	push	{r3, r4}
	MOV				R3, R0		// register R3 points to the start of the array
 80018e6:	4603      	mov	r3, r0
	MOV				R4, R1		// register R4 holds size
 80018e8:	460c      	mov	r4, r1
	VSUB.F32		S0, S0, S0	// clear fp register S0
 80018ea:	ee30 0a40 	vsub.f32	s0, s0, s0

080018ee <total>:

total:
	SUBS			R4, R4, #1	// size = size - 1
 80018ee:	3c01      	subs	r4, #1
	BLT				mean		// loop finishes when R4 < 0
 80018f0:	db06      	blt.n	8001900 <mean>
	VLDR.F32		S1, [R3]	// get the next element from the array
 80018f2:	edd3 0a00 	vldr	s1, [r3]
	VADD.F32		S0, S0, S1	// sum = sum + array[i]
 80018f6:	ee30 0a20 	vadd.f32	s0, s0, s1
	ADD				R3, R3, #4	// get the address of the next element in th array
 80018fa:	f103 0304 	add.w	r3, r3, #4
	B				total		// next iteration
 80018fe:	e7f6      	b.n	80018ee <total>

08001900 <mean>:

mean:
	VMOV			S1, R1		// move integer size to fp register S1
 8001900:	ee00 1a90 	vmov	s1, r1
	VCVT.F32.U32	S1, S1		// convert integer size to fp
 8001904:	eef8 0a60 	vcvt.f32.u32	s1, s1
	VDIV.F32		S0, S0, S1	// mean = sum / size
 8001908:	ee80 0a20 	vdiv.f32	s0, s0, s1
	MOV				R3, R0		// reset register R3 to the start of the array
 800190c:	4603      	mov	r3, r0
	MOV				R4, R1		// reset register R4 to size
 800190e:	460c      	mov	r4, r1
	VSUB.F32		S1, S1, S1	// clear fp register S1
 8001910:	ee70 0ae0 	vsub.f32	s1, s1, s1

08001914 <sum>:

sum:
	SUBS			R4, R4, #1	// size = size - 1
 8001914:	3c01      	subs	r4, #1
	BLT				std			// loop finishes when R4 < 0
 8001916:	db0a      	blt.n	800192e <std>
	VLDR.F32		S2, [R3]	// fp register S2 hodls the next element in the array
 8001918:	ed93 1a00 	vldr	s2, [r3]
	VSUB.F32		S2, S2, S0	// S2 = array[i] - mean
 800191c:	ee31 1a40 	vsub.f32	s2, s2, s0
	VMUL.F32		S2, S2, S2	// S2 = S2 * S2
 8001920:	ee21 1a01 	vmul.f32	s2, s2, s2
	VADD.F32		S1, S1, S2	// sum of differences squared, S1 = S1 + S2
 8001924:	ee70 0a81 	vadd.f32	s1, s1, s2
	ADD				R3, R3, #4	// get the address of the next element in the array
 8001928:	f103 0304 	add.w	r3, r3, #4
	B				sum			// next iteration
 800192c:	e7f2      	b.n	8001914 <sum>

0800192e <std>:

std:
	SUBS			R4, R1, #1	// R4 = size - 1
 800192e:	1e4c      	subs	r4, r1, #1
	VMOV			S2, R4		// fp register S2 holds integer size - 1
 8001930:	ee01 4a10 	vmov	s2, r4
	VCVT.F32.U32	S2, S2		// convert integer size - 1 into fp
 8001934:	eeb8 1a41 	vcvt.f32.u32	s2, s2
	VDIV.F32		S1, S1, S2	// divide sum of differences squared to size - 1
 8001938:	eec0 0a81 	vdiv.f32	s1, s1, s2
	VSQRT.F32		S1, S1		// take the square root to calculate std
 800193c:	eef1 0ae0 	vsqrt.f32	s1, s1

08001940 <done>:

done:
	VSTR.F32		S1, [R2]	// save result into the result pointer
 8001940:	edc2 0a00 	vstr	s1, [r2]
	POP				{R3, R4}	// restore context
 8001944:	bc18      	pop	{r3, r4}
	BX LR						// return
 8001946:	4770      	bx	lr

08001948 <cStd>:
#include <math.h>

#include "main.h"
#include "lab1math.h"

void cStd(float *array, uint32_t size, float *result) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	float sum = 0;
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
	float middleSum = 0;
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
	for (uint32_t i=0; i<size; i++) {
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	e00e      	b.n	8001984 <cStd+0x3c>
		sum += array[i];
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for (uint32_t i=0; i<size; i++) {
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3ec      	bcc.n	8001966 <cStd+0x1e>
	} // for
	float mean = sum / size;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001996:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800199a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800199e:	edc7 7a05 	vstr	s15, [r7, #20]
	for (uint32_t i=0; i<size; i++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	e01e      	b.n	80019e6 <cStd+0x9e>
		middleSum += (array[i] - mean) * (array[i] - mean);
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	edd3 6a00 	vldr	s13, [r3]
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019dc:	edc7 7a08 	vstr	s15, [r7, #32]
	for (uint32_t i=0; i<size; i++) {
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	3301      	adds	r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d3dc      	bcc.n	80019a8 <cStd+0x60>
	}
	(*result) = sqrtf(middleSum/(size-1));
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019fa:	ed97 7a08 	vldr	s14, [r7, #32]
 80019fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a02:	eeb0 0a66 	vmov.f32	s0, s13
 8001a06:	f000 fa65 	bl	8001ed4 <sqrtf>
 8001a0a:	eef0 7a40 	vmov.f32	s15, s0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	edc3 7a00 	vstr	s15, [r3]
} // cStd
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b0b2      	sub	sp, #200	; 0xc8
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a22:	f7fe ffef 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a26:	f000 f869 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2a:	f000 f8b9 	bl	8001ba0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // define our variables and array
  float maxC = 0;
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  float maxAsm = 0;
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  float maxCMSIS = 0;
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t maxIndexC;
  uint32_t maxIndexAsm;
  uint32_t maxIndexCMSIS;
//   the max is 88.49 at index 5
  float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73};
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <main+0xd8>)
 8001a48:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a5a:	e884 0003 	stmia.w	r4, {r0, r1}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ITM_Port32(31) = 1;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <main+0xdc>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a6a:	e00c      	b.n	8001a86 <main+0x6a>
//		  cMax(&array, 10, &maxC, &maxIndexC);
//		  cMultiplication(&array, &array, 10, &cResult);
	  	  cStd(&array, 10, &stdC);
 8001a6c:	f107 020c 	add.w	r2, r7, #12
 8001a70:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a74:	210a      	movs	r1, #10
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff66 	bl	8001948 <cStd>
	  for (uint32_t i=0; i<1000; i++) {
 8001a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a80:	3301      	adds	r3, #1
 8001a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a8e:	d3ed      	bcc.n	8001a6c <main+0x50>
	  }
	  ITM_Port32(31) = 2;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <main+0xdc>)
 8001a92:	2202      	movs	r2, #2
 8001a94:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++) {
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a9c:	e00c      	b.n	8001ab8 <main+0x9c>
//		  asmMax(&array, 10, &maxAsm, &maxIndexAsm);
//		  asmMultiplication(&array, &array, 10, &asmResult);
		  asmStd(&array, 10, &stdAsm);
 8001a9e:	f107 0208 	add.w	r2, r7, #8
 8001aa2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001aa6:	210a      	movs	r1, #10
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff1b 	bl	80018e4 <asmStd>
	  for (uint32_t i=0; i<1000; i++) {
 8001aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac0:	d3ed      	bcc.n	8001a9e <main+0x82>
	  }
	  ITM_Port32(31) = 3;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <main+0xdc>)
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ace:	e00b      	b.n	8001ae8 <main+0xcc>
//		  arm_max_f32(&array, 10, &maxCMSIS, &maxIndexCMSIS);
//		  arm_mult_f32(&array, &array, &CMSISResult, 10);
		  arm_std_f32(&array, 10, &stdCMSIS);
 8001ad0:	1d3a      	adds	r2, r7, #4
 8001ad2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ad6:	210a      	movs	r1, #10
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f93f 	bl	8001d5c <arm_std_f32>
	  for (uint32_t i=0; i<1000; i++) {
 8001ade:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ae8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001af0:	d3ee      	bcc.n	8001ad0 <main+0xb4>
	  ITM_Port32(31) = 1;
 8001af2:	e7b4      	b.n	8001a5e <main+0x42>
 8001af4:	08001f98 	.word	0x08001f98
 8001af8:	e000007c 	.word	0xe000007c

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b096      	sub	sp, #88	; 0x58
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	2244      	movs	r2, #68	; 0x44
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f9da 	bl	8001ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	463b      	mov	r3, r7
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b1e:	2310      	movs	r3, #16
 8001b20:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b22:	2301      	movs	r3, #1
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b2a:	2360      	movs	r3, #96	; 0x60
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b32:	2301      	movs	r3, #1
 8001b34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b3a:	2328      	movs	r3, #40	; 0x28
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f916 	bl	8000d80 <HAL_RCC_OscConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001b5a:	f000 f845 	bl	8001be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5e:	230f      	movs	r3, #15
 8001b60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b62:	2303      	movs	r3, #3
 8001b64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	2104      	movs	r1, #4
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fce8 	bl	800154c <HAL_RCC_ClockConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b82:	f000 f831 	bl	8001be8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b8a:	f7ff f8a3 	bl	8000cd4 <HAL_PWREx_ControlVoltageScaling>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b94:	f000 f828 	bl	8001be8 <Error_Handler>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3758      	adds	r7, #88	; 0x58
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <MX_GPIO_Init+0x44>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <MX_GPIO_Init+0x44>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_GPIO_Init+0x44>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_GPIO_Init+0x44>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <MX_GPIO_Init+0x44>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_GPIO_Init+0x44>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]

}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_MspInit+0x44>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_MspInit+0x44>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_MspInit+0x44>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_MspInit+0x44>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_MspInit+0x44>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_MspInit+0x44>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f7fe ff0a 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <SystemInit+0x64>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <SystemInit+0x64>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <SystemInit+0x68>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <SystemInit+0x68>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <SystemInit+0x68>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <SystemInit+0x68>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <SystemInit+0x68>)
 8001cc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ccc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <SystemInit+0x68>)
 8001cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <SystemInit+0x68>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <SystemInit+0x68>)
 8001ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <SystemInit+0x68>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SystemInit+0x64>)
 8001cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf2:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	40021000 	.word	0x40021000

08001d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d0c:	f7ff ffc6 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d12:	e003      	b.n	8001d1c <LoopCopyDataInit>

08001d14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d1a:	3104      	adds	r1, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d1c:	480a      	ldr	r0, [pc, #40]	; (8001d48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d24:	d3f6      	bcc.n	8001d14 <CopyDataInit>
	ldr	r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d28:	e002      	b.n	8001d30 <LoopFillZerobss>

08001d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d2c:	f842 3b04 	str.w	r3, [r2], #4

08001d30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <LoopForever+0x16>)
	cmp	r2, r3
 8001d32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d34:	d3f9      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d36:	f000 f8a1 	bl	8001e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3a:	f7ff fe6f 	bl	8001a1c <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d44:	08002010 	.word	0x08002010
	ldr	r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d4c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001d50:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001d54:	20000094 	.word	0x20000094

08001d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_2_IRQHandler>
	...

08001d5c <arm_std_f32>:
 8001d5c:	2901      	cmp	r1, #1
 8001d5e:	d97d      	bls.n	8001e5c <arm_std_f32+0x100>
 8001d60:	b530      	push	{r4, r5, lr}
 8001d62:	ed2d 8b02 	vpush	{d8}
 8001d66:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001e6c <arm_std_f32+0x110>
 8001d6a:	088d      	lsrs	r5, r1, #2
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	eef0 4a47 	vmov.f32	s9, s14
 8001d72:	d028      	beq.n	8001dc6 <arm_std_f32+0x6a>
 8001d74:	f100 0310 	add.w	r3, r0, #16
 8001d78:	462c      	mov	r4, r5
 8001d7a:	ed53 7a04 	vldr	s15, [r3, #-16]
 8001d7e:	ed13 5a03 	vldr	s10, [r3, #-12]
 8001d82:	ed53 5a02 	vldr	s11, [r3, #-8]
 8001d86:	ed13 6a01 	vldr	s12, [r3, #-4]
 8001d8a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001d8e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8001d92:	ee36 7a87 	vadd.f32	s14, s13, s14
 8001d96:	ee65 6a05 	vmul.f32	s13, s10, s10
 8001d9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8001d9e:	ee76 6a87 	vadd.f32	s13, s13, s14
 8001da2:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8001da6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001daa:	ee77 6a26 	vadd.f32	s13, s14, s13
 8001dae:	ee26 7a06 	vmul.f32	s14, s12, s12
 8001db2:	3c01      	subs	r4, #1
 8001db4:	ee77 4a86 	vadd.f32	s9, s15, s12
 8001db8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001dbc:	f103 0310 	add.w	r3, r3, #16
 8001dc0:	d1db      	bne.n	8001d7a <arm_std_f32+0x1e>
 8001dc2:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8001dc6:	f011 0303 	ands.w	r3, r1, #3
 8001dca:	d01b      	beq.n	8001e04 <arm_std_f32+0xa8>
 8001dcc:	edd0 7a00 	vldr	s15, [r0]
 8001dd0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001dda:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001dde:	d011      	beq.n	8001e04 <arm_std_f32+0xa8>
 8001de0:	edd0 7a01 	vldr	s15, [r0, #4]
 8001de4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001dee:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001df2:	d007      	beq.n	8001e04 <arm_std_f32+0xa8>
 8001df4:	edd0 7a02 	vldr	s15, [r0, #8]
 8001df8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001dfc:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001e00:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001e04:	ee07 1a90 	vmov	s15, r1
 8001e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e10:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8001e14:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8001e18:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8001e1c:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8001e20:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001e24:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001e28:	ee30 0a66 	vsub.f32	s0, s0, s13
 8001e2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	db0c      	blt.n	8001e50 <arm_std_f32+0xf4>
 8001e36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8001e42:	d40e      	bmi.n	8001e62 <arm_std_f32+0x106>
 8001e44:	ed82 8a00 	vstr	s16, [r2]
 8001e48:	b003      	add	sp, #12
 8001e4a:	ecbd 8b02 	vpop	{d8}
 8001e4e:	bd30      	pop	{r4, r5, pc}
 8001e50:	2300      	movs	r3, #0
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	b003      	add	sp, #12
 8001e56:	ecbd 8b02 	vpop	{d8}
 8001e5a:	bd30      	pop	{r4, r5, pc}
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4770      	bx	lr
 8001e62:	9201      	str	r2, [sp, #4]
 8001e64:	f000 f836 	bl	8001ed4 <sqrtf>
 8001e68:	9a01      	ldr	r2, [sp, #4]
 8001e6a:	e7eb      	b.n	8001e44 <arm_std_f32+0xe8>
 8001e6c:	00000000 	.word	0x00000000

08001e70 <__errno>:
 8001e70:	4b01      	ldr	r3, [pc, #4]	; (8001e78 <__errno+0x8>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <__libc_init_array>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	4e0d      	ldr	r6, [pc, #52]	; (8001eb4 <__libc_init_array+0x38>)
 8001e80:	4c0d      	ldr	r4, [pc, #52]	; (8001eb8 <__libc_init_array+0x3c>)
 8001e82:	1ba4      	subs	r4, r4, r6
 8001e84:	10a4      	asrs	r4, r4, #2
 8001e86:	2500      	movs	r5, #0
 8001e88:	42a5      	cmp	r5, r4
 8001e8a:	d109      	bne.n	8001ea0 <__libc_init_array+0x24>
 8001e8c:	4e0b      	ldr	r6, [pc, #44]	; (8001ebc <__libc_init_array+0x40>)
 8001e8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ec0 <__libc_init_array+0x44>)
 8001e90:	f000 f876 	bl	8001f80 <_init>
 8001e94:	1ba4      	subs	r4, r4, r6
 8001e96:	10a4      	asrs	r4, r4, #2
 8001e98:	2500      	movs	r5, #0
 8001e9a:	42a5      	cmp	r5, r4
 8001e9c:	d105      	bne.n	8001eaa <__libc_init_array+0x2e>
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea4:	4798      	blx	r3
 8001ea6:	3501      	adds	r5, #1
 8001ea8:	e7ee      	b.n	8001e88 <__libc_init_array+0xc>
 8001eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eae:	4798      	blx	r3
 8001eb0:	3501      	adds	r5, #1
 8001eb2:	e7f2      	b.n	8001e9a <__libc_init_array+0x1e>
 8001eb4:	08002008 	.word	0x08002008
 8001eb8:	08002008 	.word	0x08002008
 8001ebc:	08002008 	.word	0x08002008
 8001ec0:	0800200c 	.word	0x0800200c

08001ec4 <memset>:
 8001ec4:	4402      	add	r2, r0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d100      	bne.n	8001ece <memset+0xa>
 8001ecc:	4770      	bx	lr
 8001ece:	f803 1b01 	strb.w	r1, [r3], #1
 8001ed2:	e7f9      	b.n	8001ec8 <memset+0x4>

08001ed4 <sqrtf>:
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	ed2d 8b02 	vpush	{d8}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	eeb0 8a40 	vmov.f32	s16, s0
 8001ee0:	f000 f848 	bl	8001f74 <__ieee754_sqrtf>
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <sqrtf+0x98>)
 8001ee6:	f993 4000 	ldrsb.w	r4, [r3]
 8001eea:	1c63      	adds	r3, r4, #1
 8001eec:	d02c      	beq.n	8001f48 <sqrtf+0x74>
 8001eee:	eeb4 8a48 	vcmp.f32	s16, s16
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	d627      	bvs.n	8001f48 <sqrtf+0x74>
 8001ef8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	d522      	bpl.n	8001f48 <sqrtf+0x74>
 8001f02:	2301      	movs	r3, #1
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <sqrtf+0x9c>)
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	ee18 0a10 	vmov	r0, s16
 8001f0e:	2300      	movs	r3, #0
 8001f10:	9308      	str	r3, [sp, #32]
 8001f12:	f7fe fabd 	bl	8000490 <__aeabi_f2d>
 8001f16:	2200      	movs	r2, #0
 8001f18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f20:	2300      	movs	r3, #0
 8001f22:	b9ac      	cbnz	r4, 8001f50 <sqrtf+0x7c>
 8001f24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001f28:	4668      	mov	r0, sp
 8001f2a:	f000 f826 	bl	8001f7a <matherr>
 8001f2e:	b1b8      	cbz	r0, 8001f60 <sqrtf+0x8c>
 8001f30:	9b08      	ldr	r3, [sp, #32]
 8001f32:	b11b      	cbz	r3, 8001f3c <sqrtf+0x68>
 8001f34:	f7ff ff9c 	bl	8001e70 <__errno>
 8001f38:	9b08      	ldr	r3, [sp, #32]
 8001f3a:	6003      	str	r3, [r0, #0]
 8001f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001f40:	f7fe fd10 	bl	8000964 <__aeabi_d2f>
 8001f44:	ee00 0a10 	vmov	s0, r0
 8001f48:	b00a      	add	sp, #40	; 0x28
 8001f4a:	ecbd 8b02 	vpop	{d8}
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fc1e 	bl	8000794 <__aeabi_ddiv>
 8001f58:	2c02      	cmp	r4, #2
 8001f5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001f5e:	d1e3      	bne.n	8001f28 <sqrtf+0x54>
 8001f60:	f7ff ff86 	bl	8001e70 <__errno>
 8001f64:	2321      	movs	r3, #33	; 0x21
 8001f66:	6003      	str	r3, [r0, #0]
 8001f68:	e7e2      	b.n	8001f30 <sqrtf+0x5c>
 8001f6a:	bf00      	nop
 8001f6c:	20000070 	.word	0x20000070
 8001f70:	08002000 	.word	0x08002000

08001f74 <__ieee754_sqrtf>:
 8001f74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8001f78:	4770      	bx	lr

08001f7a <matherr>:
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	4770      	bx	lr
	...

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
