
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005540  08005540  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005540  08005540  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005540  08005540  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f70  20000010  08005558  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f80  08005558  00024f80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013520  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002529  00000000  00000000  00033560  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  00035a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  000369f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026ee7  00000000  00000000  00037830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d084  00000000  00000000  0005e717  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f26f2  00000000  00000000  0006b79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0015de8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  0015df80  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  00162044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ce4 	.word	0x08004ce4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004ce4 	.word	0x08004ce4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 f95e 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 f80d 	bl	8000a34 <HAL_InitTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	e001      	b.n	8000a2a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a26:	f003 ff33 	bl	8004890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d023      	beq.n	8000a90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_InitTick+0x70>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f96b 	bl	8000d3a <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10f      	bne.n	8000a8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d809      	bhi.n	8000a84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f935 	bl	8000ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0x74>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e007      	b.n	8000a94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e004      	b.n	8000a94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e001      	b.n	8000a94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	2000000c 	.word	0x2000000c
 8000aa8:	20000000 	.word	0x20000000

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	2000002c 	.word	0x2000002c

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	2000002c 	.word	0x2000002c

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_Delay+0x40>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffde 	bl	8000ad4 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000004 	.word	0x20000004

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff29 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff3e 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff31 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa2 	bl	8000c8c <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e014      	b.n	8000d8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d105      	bne.n	8000d7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f003 fdaf 	bl	80048d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	795b      	ldrb	r3, [r3, #5]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d101      	bne.n	8000db6 <HAL_DAC_Start_DMA+0x1e>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e09e      	b.n	8000ef4 <HAL_DAC_Start_DMA+0x15c>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2201      	movs	r2, #1
 8000dba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d12a      	bne.n	8000e1e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	4a4b      	ldr	r2, [pc, #300]	; (8000efc <HAL_DAC_Start_DMA+0x164>)
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4a4a      	ldr	r2, [pc, #296]	; (8000f00 <HAL_DAC_Start_DMA+0x168>)
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4a49      	ldr	r2, [pc, #292]	; (8000f04 <HAL_DAC_Start_DMA+0x16c>)
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d009      	beq.n	8000e0a <HAL_DAC_Start_DMA+0x72>
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d00c      	beq.n	8000e14 <HAL_DAC_Start_DMA+0x7c>
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d000      	beq.n	8000e00 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000dfe:	e039      	b.n	8000e74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3308      	adds	r3, #8
 8000e06:	613b      	str	r3, [r7, #16]
        break;
 8000e08:	e034      	b.n	8000e74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	330c      	adds	r3, #12
 8000e10:	613b      	str	r3, [r7, #16]
        break;
 8000e12:	e02f      	b.n	8000e74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3310      	adds	r3, #16
 8000e1a:	613b      	str	r3, [r7, #16]
        break;
 8000e1c:	e02a      	b.n	8000e74 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	4a39      	ldr	r2, [pc, #228]	; (8000f08 <HAL_DAC_Start_DMA+0x170>)
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	4a38      	ldr	r2, [pc, #224]	; (8000f0c <HAL_DAC_Start_DMA+0x174>)
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	4a37      	ldr	r2, [pc, #220]	; (8000f10 <HAL_DAC_Start_DMA+0x178>)
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e44:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d009      	beq.n	8000e60 <HAL_DAC_Start_DMA+0xc8>
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d00c      	beq.n	8000e6a <HAL_DAC_Start_DMA+0xd2>
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d000      	beq.n	8000e56 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000e54:	e00e      	b.n	8000e74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3314      	adds	r3, #20
 8000e5c:	613b      	str	r3, [r7, #16]
        break;
 8000e5e:	e009      	b.n	8000e74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3318      	adds	r3, #24
 8000e66:	613b      	str	r3, [r7, #16]
        break;
 8000e68:	e004      	b.n	8000e74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	331c      	adds	r3, #28
 8000e70:	613b      	str	r3, [r7, #16]
        break;
 8000e72:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d111      	bne.n	8000e9e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e88:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6898      	ldr	r0, [r3, #8]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	f000 faf4 	bl	8001480 <HAL_DMA_Start_IT>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	75fb      	strb	r3, [r7, #23]
 8000e9c:	e010      	b.n	8000ec0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000eac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	68d8      	ldr	r0, [r3, #12]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	f000 fae2 	bl	8001480 <HAL_DMA_Start_IT>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10c      	bne.n	8000ee6 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6819      	ldr	r1, [r3, #0]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2201      	movs	r2, #1
 8000eda:	409a      	lsls	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e005      	b.n	8000ef2 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	f043 0204 	orr.w	r2, r3, #4
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	080011fb 	.word	0x080011fb
 8000f00:	0800121d 	.word	0x0800121d
 8000f04:	08001239 	.word	0x08001239
 8000f08:	080012a3 	.word	0x080012a3
 8000f0c:	080012c5 	.word	0x080012c5
 8000f10:	080012e1 	.word	0x080012e1

08000f14 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6819      	ldr	r1, [r3, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	400a      	ands	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	2201      	movs	r2, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	400a      	ands	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10d      	bne.n	8000f7a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 faec 	bl	8001540 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e00c      	b.n	8000f94 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fade 	bl	8001540 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000f92:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b088      	sub	sp, #32
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_DAC_ConfigChannel+0x1c>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e107      	b.n	80011f2 <HAL_DAC_ConfigChannel+0x22c>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2202      	movs	r2, #2
 8000fec:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d174      	bne.n	80010e0 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000ff6:	f7ff fd6d 	bl	8000ad4 <HAL_GetTick>
 8000ffa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d134      	bne.n	800106c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001002:	e011      	b.n	8001028 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001004:	f7ff fd66 	bl	8000ad4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d90a      	bls.n	8001028 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	f043 0208 	orr.w	r2, r3, #8
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2203      	movs	r2, #3
 8001022:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0e4      	b.n	80011f2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1e6      	bne.n	8001004 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fd58 	bl	8000aec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	6992      	ldr	r2, [r2, #24]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
 8001046:	e01e      	b.n	8001086 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001048:	f7ff fd44 	bl	8000ad4 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d90a      	bls.n	800106c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	f043 0208 	orr.w	r2, r3, #8
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2203      	movs	r2, #3
 8001066:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e0c2      	b.n	80011f2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	2b00      	cmp	r3, #0
 8001074:	dbe8      	blt.n	8001048 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff fd38 	bl	8000aec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	6992      	ldr	r2, [r2, #24]
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	ea02 0103 	and.w	r1, r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	69da      	ldr	r2, [r3, #28]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	409a      	lsls	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	21ff      	movs	r1, #255	; 0xff
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	ea02 0103 	and.w	r1, r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	6a1a      	ldr	r2, [r3, #32]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	409a      	lsls	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d11d      	bne.n	8001124 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	221f      	movs	r2, #31
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	2207      	movs	r2, #7
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	431a      	orrs	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43da      	mvns	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	400a      	ands	r2, r1
 8001188:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	f640 72fc 	movw	r2, #4092	; 0xffc
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6819      	ldr	r1, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	22c0      	movs	r2, #192	; 0xc0
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	400a      	ands	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2201      	movs	r2, #1
 80011e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f002 ff09 	bl	8004020 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	711a      	strb	r2, [r3, #4]
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff feb7 	bl	8000f9e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f043 0204 	orr.w	r2, r3, #4
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff fead 	bl	8000fb2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2201      	movs	r2, #1
 800125c:	711a      	strb	r2, [r3, #4]
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff ffd8 	bl	8001266 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2201      	movs	r2, #1
 80012ba:	711a      	strb	r2, [r3, #4]
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f7ff ffd1 	bl	800127a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	f043 0204 	orr.w	r2, r3, #4
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff ffc7 	bl	800128e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	711a      	strb	r2, [r3, #4]
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e098      	b.n	8001454 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <HAL_DMA_Init+0x150>)
 800132a:	429a      	cmp	r2, r3
 800132c:	d80f      	bhi.n	800134e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <HAL_DMA_Init+0x154>)
 8001336:	4413      	add	r3, r2
 8001338:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_DMA_Init+0x158>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	009a      	lsls	r2, r3, #2
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_DMA_Init+0x15c>)
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
 800134c:	e00e      	b.n	800136c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <HAL_DMA_Init+0x160>)
 8001356:	4413      	add	r3, r2
 8001358:	4a43      	ldr	r2, [pc, #268]	; (8001468 <HAL_DMA_Init+0x158>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	009a      	lsls	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a42      	ldr	r2, [pc, #264]	; (8001474 <HAL_DMA_Init+0x164>)
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013c6:	d039      	beq.n	800143c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_DMA_Init+0x15c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d11a      	bne.n	8001408 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_DMA_Init+0x168>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f003 031c 	and.w	r3, r3, #28
 80013de:	210f      	movs	r1, #15
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4924      	ldr	r1, [pc, #144]	; (8001478 <HAL_DMA_Init+0x168>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_DMA_Init+0x168>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f003 031c 	and.w	r3, r3, #28
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	491d      	ldr	r1, [pc, #116]	; (8001478 <HAL_DMA_Init+0x168>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
 8001406:	e019      	b.n	800143c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_DMA_Init+0x16c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f003 031c 	and.w	r3, r3, #28
 8001414:	210f      	movs	r1, #15
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	4917      	ldr	r1, [pc, #92]	; (800147c <HAL_DMA_Init+0x16c>)
 800141e:	4013      	ands	r3, r2
 8001420:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_DMA_Init+0x16c>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 031c 	and.w	r3, r3, #28
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	4911      	ldr	r1, [pc, #68]	; (800147c <HAL_DMA_Init+0x16c>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40020407 	.word	0x40020407
 8001464:	bffdfff8 	.word	0xbffdfff8
 8001468:	cccccccd 	.word	0xcccccccd
 800146c:	40020000 	.word	0x40020000
 8001470:	bffdfbf8 	.word	0xbffdfbf8
 8001474:	40020400 	.word	0x40020400
 8001478:	400200a8 	.word	0x400200a8
 800147c:	400204a8 	.word	0x400204a8

08001480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_DMA_Start_IT+0x20>
 800149c:	2302      	movs	r3, #2
 800149e:	e04b      	b.n	8001538 <HAL_DMA_Start_IT+0xb8>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d13a      	bne.n	800152a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0201 	bic.w	r2, r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f91e 	bl	800171a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 020e 	orr.w	r2, r2, #14
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e00f      	b.n	8001518 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0204 	bic.w	r2, r2, #4
 8001506:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 020a 	orr.w	r2, r2, #10
 8001516:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e005      	b.n	8001536 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001532:	2302      	movs	r3, #2
 8001534:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d008      	beq.n	800156a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e022      	b.n	80015b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 020e 	bic.w	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 021c 	and.w	r2, r3, #28
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	f003 031c 	and.w	r3, r3, #28
 80015dc:	2204      	movs	r2, #4
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d026      	beq.n	8001636 <HAL_DMA_IRQHandler+0x7a>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d021      	beq.n	8001636 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d107      	bne.n	8001610 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	f003 021c 	and.w	r2, r3, #28
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	2104      	movs	r1, #4
 800161e:	fa01 f202 	lsl.w	r2, r1, r2
 8001622:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	2b00      	cmp	r3, #0
 800162a:	d071      	beq.n	8001710 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001634:	e06c      	b.n	8001710 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f003 031c 	and.w	r3, r3, #28
 800163e:	2202      	movs	r2, #2
 8001640:	409a      	lsls	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d02e      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xec>
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d029      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10b      	bne.n	800167a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 020a 	bic.w	r2, r2, #10
 8001670:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f003 021c 	and.w	r2, r3, #28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2102      	movs	r1, #2
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d038      	beq.n	8001710 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016a6:	e033      	b.n	8001710 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	f003 031c 	and.w	r3, r3, #28
 80016b0:	2208      	movs	r2, #8
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d02a      	beq.n	8001712 <HAL_DMA_IRQHandler+0x156>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d025      	beq.n	8001712 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 020e 	bic.w	r2, r2, #14
 80016d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 021c 	and.w	r2, r3, #28
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	2b00      	cmp	r3, #0
 8001706:	d004      	beq.n	8001712 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001710:	bf00      	nop
 8001712:	bf00      	nop
}
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	f003 021c 	and.w	r2, r3, #28
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d108      	bne.n	800175e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800175c:	e007      	b.n	800176e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	60da      	str	r2, [r3, #12]
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e17f      	b.n	8001a8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8171 	beq.w	8001a86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d00b      	beq.n	80017c4 <HAL_GPIO_Init+0x48>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d007      	beq.n	80017c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b8:	2b11      	cmp	r3, #17
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b12      	cmp	r3, #18
 80017c2:	d130      	bne.n	8001826 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017fa:	2201      	movs	r2, #1
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 0201 	and.w	r2, r3, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b03      	cmp	r3, #3
 8001830:	d118      	bne.n	8001864 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x128>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	6939      	ldr	r1, [r7, #16]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80ac 	beq.w	8001a86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_GPIO_Init+0x32c>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	4a5d      	ldr	r2, [pc, #372]	; (8001aa8 <HAL_GPIO_Init+0x32c>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6613      	str	r3, [r2, #96]	; 0x60
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_GPIO_Init+0x32c>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001946:	4a59      	ldr	r2, [pc, #356]	; (8001aac <HAL_GPIO_Init+0x330>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001970:	d025      	beq.n	80019be <HAL_GPIO_Init+0x242>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4e      	ldr	r2, [pc, #312]	; (8001ab0 <HAL_GPIO_Init+0x334>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01f      	beq.n	80019ba <HAL_GPIO_Init+0x23e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4d      	ldr	r2, [pc, #308]	; (8001ab4 <HAL_GPIO_Init+0x338>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d019      	beq.n	80019b6 <HAL_GPIO_Init+0x23a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_GPIO_Init+0x33c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0x236>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4b      	ldr	r2, [pc, #300]	; (8001abc <HAL_GPIO_Init+0x340>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00d      	beq.n	80019ae <HAL_GPIO_Init+0x232>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_GPIO_Init+0x344>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d007      	beq.n	80019aa <HAL_GPIO_Init+0x22e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_GPIO_Init+0x348>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_GPIO_Init+0x22a>
 80019a2:	2306      	movs	r3, #6
 80019a4:	e00c      	b.n	80019c0 <HAL_GPIO_Init+0x244>
 80019a6:	2307      	movs	r3, #7
 80019a8:	e00a      	b.n	80019c0 <HAL_GPIO_Init+0x244>
 80019aa:	2305      	movs	r3, #5
 80019ac:	e008      	b.n	80019c0 <HAL_GPIO_Init+0x244>
 80019ae:	2304      	movs	r3, #4
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x244>
 80019b2:	2303      	movs	r3, #3
 80019b4:	e004      	b.n	80019c0 <HAL_GPIO_Init+0x244>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_Init+0x244>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_GPIO_Init+0x244>
 80019be:	2300      	movs	r3, #0
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	f002 0203 	and.w	r2, r2, #3
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4093      	lsls	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019d0:	4936      	ldr	r1, [pc, #216]	; (8001aac <HAL_GPIO_Init+0x330>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a02:	4a31      	ldr	r2, [pc, #196]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a08:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a80:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f47f ae78 	bne.w	800178c <HAL_GPIO_Init+0x10>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	48000c00 	.word	0x48000c00
 8001abc:	48001000 	.word	0x48001000
 8001ac0:	48001400 	.word	0x48001400
 8001ac4:	48001800 	.word	0x48001800
 8001ac8:	40010400 	.word	0x40010400

08001acc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001ada:	e0cd      	b.n	8001c78 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001adc:	2201      	movs	r2, #1
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80c0 	beq.w	8001c72 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001af2:	4a68      	ldr	r2, [pc, #416]	; (8001c94 <HAL_GPIO_DeInit+0x1c8>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b1a:	d025      	beq.n	8001b68 <HAL_GPIO_DeInit+0x9c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a5e      	ldr	r2, [pc, #376]	; (8001c98 <HAL_GPIO_DeInit+0x1cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d01f      	beq.n	8001b64 <HAL_GPIO_DeInit+0x98>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a5d      	ldr	r2, [pc, #372]	; (8001c9c <HAL_GPIO_DeInit+0x1d0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d019      	beq.n	8001b60 <HAL_GPIO_DeInit+0x94>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <HAL_GPIO_DeInit+0x1d4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_GPIO_DeInit+0x90>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a5b      	ldr	r2, [pc, #364]	; (8001ca4 <HAL_GPIO_DeInit+0x1d8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_GPIO_DeInit+0x8c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ca8 <HAL_GPIO_DeInit+0x1dc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_DeInit+0x88>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a59      	ldr	r2, [pc, #356]	; (8001cac <HAL_GPIO_DeInit+0x1e0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_GPIO_DeInit+0x84>
 8001b4c:	2306      	movs	r3, #6
 8001b4e:	e00c      	b.n	8001b6a <HAL_GPIO_DeInit+0x9e>
 8001b50:	2307      	movs	r3, #7
 8001b52:	e00a      	b.n	8001b6a <HAL_GPIO_DeInit+0x9e>
 8001b54:	2305      	movs	r3, #5
 8001b56:	e008      	b.n	8001b6a <HAL_GPIO_DeInit+0x9e>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e006      	b.n	8001b6a <HAL_GPIO_DeInit+0x9e>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e004      	b.n	8001b6a <HAL_GPIO_DeInit+0x9e>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_DeInit+0x9e>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_GPIO_DeInit+0x9e>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	f002 0203 	and.w	r2, r2, #3
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4093      	lsls	r3, r2
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d132      	bne.n	8001be0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_GPIO_DeInit+0x1e4>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	494b      	ldr	r1, [pc, #300]	; (8001cb0 <HAL_GPIO_DeInit+0x1e4>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_GPIO_DeInit+0x1e4>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	4947      	ldr	r1, [pc, #284]	; (8001cb0 <HAL_GPIO_DeInit+0x1e4>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_GPIO_DeInit+0x1e4>)
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4944      	ldr	r1, [pc, #272]	; (8001cb0 <HAL_GPIO_DeInit+0x1e4>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_GPIO_DeInit+0x1e4>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4940      	ldr	r1, [pc, #256]	; (8001cb0 <HAL_GPIO_DeInit+0x1e4>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001bc2:	4a34      	ldr	r2, [pc, #208]	; (8001c94 <HAL_GPIO_DeInit+0x1c8>)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	4830      	ldr	r0, [pc, #192]	; (8001c94 <HAL_GPIO_DeInit+0x1c8>)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	400a      	ands	r2, r1
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2103      	movs	r1, #3
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	08da      	lsrs	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3208      	adds	r2, #8
 8001bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	08d2      	lsrs	r2, r2, #3
 8001c14:	4019      	ands	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2103      	movs	r1, #3
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2103      	movs	r1, #3
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	401a      	ands	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c62:	2101      	movs	r1, #1
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f47f af2b 	bne.w	8001adc <HAL_GPIO_DeInit+0x10>
  }
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40010000 	.word	0x40010000
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	48000c00 	.word	0x48000c00
 8001ca4:	48001000 	.word	0x48001000
 8001ca8:	48001400 	.word	0x48001400
 8001cac:	48001800 	.word	0x48001800
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_PWREx_GetVoltageRange+0x18>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40007000 	.word	0x40007000

08001d00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0e:	d130      	bne.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1c:	d038      	beq.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2232      	movs	r2, #50	; 0x32
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	3301      	adds	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d44:	e002      	b.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d58:	d102      	bne.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f2      	bne.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6c:	d110      	bne.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e00f      	b.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7e:	d007      	beq.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d88:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40007000 	.word	0x40007000
 8001da4:	2000000c 	.word	0x2000000c
 8001da8:	431bde83 	.word	0x431bde83

08001dac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7fe fe8e 	bl	8000ad4 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e063      	b.n	8001e8c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10b      	bne.n	8001de8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f002 fde9 	bl	80049b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001dde:	f241 3188 	movw	r1, #5000	; 0x1388
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 faf7 	bl	80023d6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	021a      	lsls	r2, r3, #8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 faef 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d131      	bne.n	8001e82 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e28:	f023 0310 	bic.w	r3, r3, #16
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6852      	ldr	r2, [r2, #4]
 8001e30:	0611      	lsls	r1, r2, #24
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68d2      	ldr	r2, [r2, #12]
 8001e36:	4311      	orrs	r1, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_QSPI_Init+0xe8>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6912      	ldr	r2, [r2, #16]
 8001e4e:	0411      	lsls	r1, r2, #16
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6952      	ldr	r2, [r2, #20]
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6992      	ldr	r2, [r2, #24]
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	ffe0f8fe 	.word	0xffe0f8fe

08001e98 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e016      	b.n	8001ed8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f002 fdbc 	bl	8004a38 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7fe fdf2 	bl	8000ad4 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_QSPI_Command+0x22>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e048      	b.n	8001f94 <HAL_QSPI_Command+0xb4>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d137      	bne.n	8001f86 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2120      	movs	r1, #32
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fa5f 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d125      	bne.n	8001f8a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fa8c 	bl	8002460 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d115      	bne.n	8001f7c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2201      	movs	r2, #1
 8001f58:	2102      	movs	r1, #2
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fa49 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001f7a:	e006      	b.n	8001f8a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001f84:	e001      	b.n	8001f8a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7fe fd92 	bl	8000ad4 <HAL_GetTick>
 8001fb0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3320      	adds	r3, #32
 8001fb8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_QSPI_Transmit+0x2e>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e07b      	b.n	80020c2 <HAL_QSPI_Transmit+0x126>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d16a      	bne.n	80020b4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d05b      	beq.n	80020a2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2212      	movs	r2, #18
 8001fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800201e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002020:	e01b      	b.n	800205a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2201      	movs	r2, #1
 800202a:	2104      	movs	r1, #4
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f9e0 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d113      	bne.n	8002064 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1e5a      	subs	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1df      	bne.n	8002022 <HAL_QSPI_Transmit+0x86>
 8002062:	e000      	b.n	8002066 <HAL_QSPI_Transmit+0xca>
          break;
 8002064:	bf00      	nop
      }

      if (status == HAL_OK)
 8002066:	7ffb      	ldrb	r3, [r7, #31]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d115      	bne.n	8002098 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2201      	movs	r2, #1
 8002074:	2102      	movs	r1, #2
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f9bb 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002080:	7ffb      	ldrb	r3, [r7, #31]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2202      	movs	r2, #2
 800208c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f934 	bl	80022fc <HAL_QSPI_Abort>
 8002094:	4603      	mov	r3, r0
 8002096:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80020a0:	e00a      	b.n	80020b8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	f043 0208 	orr.w	r2, r3, #8
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	77fb      	strb	r3, [r7, #31]
 80020b2:	e001      	b.n	80020b8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
 80020b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b08a      	sub	sp, #40	; 0x28
 80020ce:	af02      	add	r7, sp, #8
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80020da:	f7fe fcfb 	bl	8000ad4 <HAL_GetTick>
 80020de:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3320      	adds	r3, #32
 80020ee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_QSPI_Receive+0x36>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e082      	b.n	8002206 <HAL_QSPI_Receive+0x13c>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d171      	bne.n	80021f8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d062      	beq.n	80021e6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2222      	movs	r2, #34	; 0x22
 8002124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002158:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002162:	e01c      	b.n	800219e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2201      	movs	r2, #1
 800216c:	2106      	movs	r1, #6
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f93f 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8002178:	7ffb      	ldrb	r3, [r7, #31]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d114      	bne.n	80021a8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1de      	bne.n	8002164 <HAL_QSPI_Receive+0x9a>
 80021a6:	e000      	b.n	80021aa <HAL_QSPI_Receive+0xe0>
          break;
 80021a8:	bf00      	nop
      }

      if (status == HAL_OK)
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d115      	bne.n	80021dc <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2201      	movs	r2, #1
 80021b8:	2102      	movs	r1, #2
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f919 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d108      	bne.n	80021dc <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2202      	movs	r2, #2
 80021d0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f892 	bl	80022fc <HAL_QSPI_Abort>
 80021d8:	4603      	mov	r3, r0
 80021da:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80021e4:	e00a      	b.n	80021fc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	f043 0208 	orr.w	r2, r3, #8
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	77fb      	strb	r3, [r7, #31]
 80021f6:	e001      	b.n	80021fc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80021f8:	2302      	movs	r3, #2
 80021fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002204:	7ffb      	ldrb	r3, [r7, #31]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b088      	sub	sp, #32
 8002212:	af02      	add	r7, sp, #8
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7fe fc5a 	bl	8000ad4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_QSPI_AutoPolling+0x24>
 800222e:	2302      	movs	r3, #2
 8002230:	e060      	b.n	80022f4 <HAL_QSPI_AutoPolling+0xe6>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d14f      	bne.n	80022e6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2242      	movs	r2, #66	; 0x42
 8002250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2200      	movs	r2, #0
 800225c:	2120      	movs	r1, #32
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f8c7 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d13d      	bne.n	80022ea <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6852      	ldr	r2, [r2, #4]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6892      	ldr	r2, [r2, #8]
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	431a      	orrs	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80022a4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80022ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f8d3 	bl	8002460 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2201      	movs	r2, #1
 80022c2:	2108      	movs	r1, #8
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f894 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2208      	movs	r2, #8
 80022da:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80022e4:	e001      	b.n	80022ea <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af02      	add	r7, sp, #8
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7fe fbe4 	bl	8000ad4 <HAL_GetTick>
 800230c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d056      	beq.n	80023cc <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0204 	bic.w	r2, r2, #4
 8002342:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f8f9 	bl	8001540 <HAL_DMA_Abort>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	f043 0204 	orr.w	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0202 	orr.w	r2, r2, #2
 8002372:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2201      	movs	r2, #1
 800237e:	2102      	movs	r1, #2
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f836 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10e      	bne.n	80023ae <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2202      	movs	r2, #2
 8002396:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2120      	movs	r1, #32
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f824 	bl	80023f2 <QSPI_WaitFlagStateUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80023c2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002402:	e01a      	b.n	800243a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d016      	beq.n	800243a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240c:	f7fe fb62 	bl	8000ad4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	429a      	cmp	r2, r3
 800241a:	d302      	bcc.n	8002422 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2204      	movs	r2, #4
 8002426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e00e      	b.n	8002458 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	429a      	cmp	r2, r3
 8002454:	d1d6      	bne.n	8002404 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <QSPI_Config+0x28>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800247a:	d005      	beq.n	8002488 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3a01      	subs	r2, #1
 8002486:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80b9 	beq.w	8002604 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d05f      	beq.n	800255a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	6892      	ldr	r2, [r2, #8]
 80024a2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d031      	beq.n	8002510 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	049b      	lsls	r3, r3, #18
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	431a      	orrs	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	ea42 0103 	orr.w	r1, r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002500:	f000 812e 	beq.w	8002760 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	6852      	ldr	r2, [r2, #4]
 800250c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800250e:	e127      	b.n	8002760 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	431a      	orrs	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	431a      	orrs	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	431a      	orrs	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	049b      	lsls	r3, r3, #18
 800252c:	431a      	orrs	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	431a      	orrs	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	431a      	orrs	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	431a      	orrs	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	ea42 0103 	orr.w	r1, r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	430a      	orrs	r2, r1
 8002556:	615a      	str	r2, [r3, #20]
}
 8002558:	e102      	b.n	8002760 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d02e      	beq.n	80025c0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	431a      	orrs	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	431a      	orrs	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	431a      	orrs	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	049b      	lsls	r3, r3, #18
 800257e:	431a      	orrs	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	431a      	orrs	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	431a      	orrs	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	431a      	orrs	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	431a      	orrs	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	ea42 0103 	orr.w	r1, r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80025b0:	f000 80d6 	beq.w	8002760 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	6852      	ldr	r2, [r2, #4]
 80025bc:	619a      	str	r2, [r3, #24]
}
 80025be:	e0cf      	b.n	8002760 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	431a      	orrs	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	431a      	orrs	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	049b      	lsls	r3, r3, #18
 80025dc:	431a      	orrs	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	ea42 0103 	orr.w	r1, r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	430a      	orrs	r2, r1
 8002600:	615a      	str	r2, [r3, #20]
}
 8002602:	e0ad      	b.n	8002760 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d058      	beq.n	80026be <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	6892      	ldr	r2, [r2, #8]
 8002614:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02d      	beq.n	800267a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	431a      	orrs	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	431a      	orrs	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	431a      	orrs	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	049b      	lsls	r3, r3, #18
 800263a:	431a      	orrs	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	431a      	orrs	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	431a      	orrs	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	431a      	orrs	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	ea42 0103 	orr.w	r1, r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	430a      	orrs	r2, r1
 8002664:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800266c:	d078      	beq.n	8002760 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	6852      	ldr	r2, [r2, #4]
 8002676:	619a      	str	r2, [r3, #24]
}
 8002678:	e072      	b.n	8002760 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	431a      	orrs	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	431a      	orrs	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	431a      	orrs	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	049b      	lsls	r3, r3, #18
 8002696:	431a      	orrs	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	ea42 0103 	orr.w	r1, r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	615a      	str	r2, [r3, #20]
}
 80026bc:	e050      	b.n	8002760 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02a      	beq.n	800271c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	431a      	orrs	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	049b      	lsls	r3, r3, #18
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	ea42 0103 	orr.w	r1, r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	430a      	orrs	r2, r1
 8002706:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800270e:	d027      	beq.n	8002760 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	6852      	ldr	r2, [r2, #4]
 8002718:	619a      	str	r2, [r3, #24]
}
 800271a:	e021      	b.n	8002760 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01d      	beq.n	8002760 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	431a      	orrs	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	431a      	orrs	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	431a      	orrs	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	049b      	lsls	r3, r3, #18
 8002740:	431a      	orrs	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	431a      	orrs	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	431a      	orrs	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	ea42 0103 	orr.w	r1, r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	430a      	orrs	r2, r1
 800275e:	615a      	str	r2, [r3, #20]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e3d4      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4ba1      	ldr	r3, [pc, #644]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002788:	4b9e      	ldr	r3, [pc, #632]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80e4 	beq.w	8002968 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4a>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	f040 808b 	bne.w	80028c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 8087 	bne.w	80028c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b6:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e3ac      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_RCC_OscConfig+0x7c>
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e6:	e005      	b.n	80027f4 <HAL_RCC_OscConfig+0x88>
 80027e8:	4b86      	ldr	r3, [pc, #536]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d223      	bcs.n	8002840 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fd07 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e38d      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280c:	4b7d      	ldr	r3, [pc, #500]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a7c      	ldr	r2, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002812:	f043 0308 	orr.w	r3, r3, #8
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4977      	ldr	r1, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282a:	4b76      	ldr	r3, [pc, #472]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	4972      	ldr	r1, [pc, #456]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e025      	b.n	800288c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002840:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6f      	ldr	r2, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b6d      	ldr	r3, [pc, #436]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	496a      	ldr	r1, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285e:	4b69      	ldr	r3, [pc, #420]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	4965      	ldr	r1, [pc, #404]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fcc7 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e34d      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800288c:	f000 fc36 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8002890:	4601      	mov	r1, r0
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <HAL_RCC_OscConfig+0x29c>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa21 f303 	lsr.w	r3, r1, r3
 80028a8:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x2a0>)
 80028aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028ac:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <HAL_RCC_OscConfig+0x2a4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe f8bf 	bl	8000a34 <HAL_InitTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d052      	beq.n	8002966 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	e331      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028cc:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a4c      	ldr	r2, [pc, #304]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d8:	f7fe f8fc 	bl	8000ad4 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e0:	f7fe f8f8 	bl	8000ad4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e31a      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f2:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a40      	ldr	r2, [pc, #256]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b3e      	ldr	r3, [pc, #248]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	493b      	ldr	r1, [pc, #236]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800291c:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	4936      	ldr	r1, [pc, #216]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	e01a      	b.n	8002968 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800293e:	f7fe f8c9 	bl	8000ad4 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002946:	f7fe f8c5 	bl	8000ad4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e2e7      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x1da>
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002966:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d074      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x21a>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	d10e      	bne.n	800299e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d10b      	bne.n	800299e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d064      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d160      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e2c4      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x24a>
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	e01d      	b.n	80029f2 <HAL_RCC_OscConfig+0x286>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029be:	d10c      	bne.n	80029da <HAL_RCC_OscConfig+0x26e>
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e00b      	b.n	80029f2 <HAL_RCC_OscConfig+0x286>
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_RCC_OscConfig+0x298>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe f86b 	bl	8000ad4 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a00:	e011      	b.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08004cfc 	.word	0x08004cfc
 8002a0c:	2000000c 	.word	0x2000000c
 8002a10:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe f85e 	bl	8000ad4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e280      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	4baf      	ldr	r3, [pc, #700]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2a8>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe f84e 	bl	8000ad4 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe f84a 	bl	8000ad4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e26c      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	4ba5      	ldr	r3, [pc, #660]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2d0>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d060      	beq.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x310>
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d116      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7c:	4b99      	ldr	r3, [pc, #612]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x328>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e249      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b93      	ldr	r3, [pc, #588]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	4990      	ldr	r1, [pc, #576]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa8:	e040      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab2:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a8b      	ldr	r2, [pc, #556]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe f809 	bl	8000ad4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe f805 	bl	8000ad4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e227      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	4b82      	ldr	r3, [pc, #520]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b7f      	ldr	r3, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	497c      	ldr	r1, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e018      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a79      	ldr	r2, [pc, #484]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fd ffe5 	bl	8000ad4 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fd ffe1 	bl	8000ad4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e203      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b20:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d03c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b46:	4a67      	ldr	r2, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fd ffc0 	bl	8000ad4 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fd ffbc 	bl	8000ad4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1de      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <HAL_RCC_OscConfig+0x3ec>
 8002b78:	e01b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b80:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fd ffa3 	bl	8000ad4 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fd ff9f 	bl	8000ad4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1c1      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ef      	bne.n	8002b92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc4:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b44      	ldr	r3, [pc, #272]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	4a43      	ldr	r2, [pc, #268]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	; 0x58
 8002bdc:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_OscConfig+0x57c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d118      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_OscConfig+0x57c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3a      	ldr	r2, [pc, #232]	; (8002ce8 <HAL_RCC_OscConfig+0x57c>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c04:	f7fd ff66 	bl	8000ad4 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fd ff62 	bl	8000ad4 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e184      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <HAL_RCC_OscConfig+0x57c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	4a2a      	ldr	r2, [pc, #168]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c42:	e024      	b.n	8002c8e <HAL_RCC_OscConfig+0x522>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d110      	bne.n	8002c6e <HAL_RCC_OscConfig+0x502>
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c5c:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c6c:	e00f      	b.n	8002c8e <HAL_RCC_OscConfig+0x522>
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002c86:	f023 0304 	bic.w	r3, r3, #4
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fd ff1d 	bl	8000ad4 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fd ff19 	bl	8000ad4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e139      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ed      	beq.n	8002c9e <HAL_RCC_OscConfig+0x532>
 8002cc2:	e01a      	b.n	8002cfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fd ff06 	bl	8000ad4 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cca:	e00f      	b.n	8002cec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fd ff02 	bl	8000ad4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d906      	bls.n	8002cec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e122      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	4b90      	ldr	r3, [pc, #576]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e8      	bne.n	8002ccc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b8b      	ldr	r3, [pc, #556]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a8a      	ldr	r2, [pc, #552]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8108 	beq.w	8002f26 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	f040 80d0 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d20:	4b83      	ldr	r3, [pc, #524]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d130      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d127      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11f      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d60:	2a07      	cmp	r2, #7
 8002d62:	bf14      	ite	ne
 8002d64:	2201      	movne	r2, #1
 8002d66:	2200      	moveq	r2, #0
 8002d68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d113      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d06e      	beq.n	8002e74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d069      	beq.n	8002e70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d9c:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b7      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db8:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a5c      	ldr	r2, [pc, #368]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc4:	f7fd fe86 	bl	8000ad4 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fd fe82 	bl	8000ad4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0a4      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b51      	ldr	r3, [pc, #324]	; (8002f34 <HAL_RCC_OscConfig+0x7c8>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e04:	0212      	lsls	r2, r2, #8
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e0c:	0852      	lsrs	r2, r2, #1
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0552      	lsls	r2, r2, #21
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e18:	0852      	lsrs	r2, r2, #1
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	0652      	lsls	r2, r2, #25
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e24:	0912      	lsrs	r2, r2, #4
 8002e26:	0452      	lsls	r2, r2, #17
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	4941      	ldr	r1, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e30:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a3e      	ldr	r2, [pc, #248]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e48:	f7fd fe44 	bl	8000ad4 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fd fe40 	bl	8000ad4 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e062      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6e:	e05a      	b.n	8002f26 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e059      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e74:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d152      	bne.n	8002f26 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e98:	f7fd fe1c 	bl	8000ad4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fd fe18 	bl	8000ad4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e03a      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x734>
 8002ebe:	e032      	b.n	8002f26 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d02d      	beq.n	8002f22 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002ecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002ee4:	f023 0303 	bic.w	r3, r3, #3
 8002ee8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4a10      	ldr	r2, [pc, #64]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002ef0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fd fdeb 	bl	8000ad4 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fd fde7 	bl	8000ad4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e009      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x7c4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x796>
 8002f20:	e001      	b.n	8002f26 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	f99d808c 	.word	0xf99d808c

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0c8      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b66      	ldr	r3, [pc, #408]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d910      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4961      	ldr	r1, [pc, #388]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b5f      	ldr	r3, [pc, #380]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b0      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d04c      	beq.n	8003022 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f90:	4b56      	ldr	r3, [pc, #344]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d121      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e09e      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d115      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e092      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e086      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd0:	4b46      	ldr	r3, [pc, #280]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e07e      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe0:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 0203 	bic.w	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	493f      	ldr	r1, [pc, #252]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff2:	f7fd fd6f 	bl	8000ad4 <HAL_GetTick>
 8002ff6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	f7fd fd6b 	bl	8000ad4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e066      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 020c 	and.w	r2, r3, #12
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	429a      	cmp	r2, r3
 8003020:	d1eb      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	492c      	ldr	r1, [pc, #176]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003040:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d210      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	4924      	ldr	r1, [pc, #144]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e036      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4918      	ldr	r1, [pc, #96]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4910      	ldr	r1, [pc, #64]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ae:	f000 f825 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030b2:	4601      	mov	r1, r0
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fcae 	bl	8000a34 <HAL_InitTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	72fb      	strb	r3, [r7, #11]

  return status;
 80030dc:	7afb      	ldrb	r3, [r7, #11]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08004cfc 	.word	0x08004cfc
 80030f4:	2000000c 	.word	0x2000000c
 80030f8:	20000000 	.word	0x20000000

080030fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003114:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x34>
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d121      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d11e      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003130:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d107      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800313c:	4b30      	ldr	r3, [pc, #192]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 800313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e005      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800314c:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d102      	bne.n	800317a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003174:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e004      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d101      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_GetSysClockFreq+0x110>)
 8003182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d133      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800319a:	2b03      	cmp	r3, #3
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800319e:	e005      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031a2:	617b      	str	r3, [r7, #20]
      break;
 80031a4:	e005      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCC_GetSysClockFreq+0x110>)
 80031a8:	617b      	str	r3, [r7, #20]
      break;
 80031aa:	e002      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	617b      	str	r3, [r7, #20]
      break;
 80031b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b2:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	3301      	adds	r3, #1
 80031be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	fb02 f203 	mul.w	r2, r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_GetSysClockFreq+0x104>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0e5b      	lsrs	r3, r3, #25
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	3301      	adds	r3, #1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031f2:	69bb      	ldr	r3, [r7, #24]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3724      	adds	r7, #36	; 0x24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40021000 	.word	0x40021000
 8003204:	08004d0c 	.word	0x08004d0c
 8003208:	00f42400 	.word	0x00f42400
 800320c:	007a1200 	.word	0x007a1200

08003210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800321c:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003228:	f7fe fd5c 	bl	8001ce4 <HAL_PWREx_GetVoltageRange>
 800322c:	6178      	str	r0, [r7, #20]
 800322e:	e014      	b.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	; 0x58
 800323c:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003248:	f7fe fd4c 	bl	8001ce4 <HAL_PWREx_GetVoltageRange>
 800324c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003258:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003260:	d10b      	bne.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d919      	bls.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2ba0      	cmp	r3, #160	; 0xa0
 800326c:	d902      	bls.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800326e:	2302      	movs	r3, #2
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e013      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003274:	2301      	movs	r3, #1
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e010      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d902      	bls.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003280:	2303      	movs	r3, #3
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e00a      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d102      	bne.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800328c:	2302      	movs	r3, #2
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e004      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b70      	cmp	r3, #112	; 0x70
 8003296:	d101      	bne.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003298:	2301      	movs	r3, #1
 800329a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 0207 	bic.w	r2, r3, #7
 80032a4:	4909      	ldr	r1, [pc, #36]	; (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40022000 	.word	0x40022000

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e049      	b.n	8003376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f001 fbbc 	bl	8004a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 faa8 	bl	8003864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d001      	beq.n	8003398 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e047      	b.n	8003428 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a23      	ldr	r2, [pc, #140]	; (8003434 <HAL_TIM_Base_Start+0xb4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <HAL_TIM_Base_Start+0x66>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d018      	beq.n	80033e6 <HAL_TIM_Base_Start+0x66>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_TIM_Base_Start+0xb8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_TIM_Base_Start+0x66>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <HAL_TIM_Base_Start+0xbc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_TIM_Base_Start+0x66>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_TIM_Base_Start+0xc0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_TIM_Base_Start+0x66>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_TIM_Base_Start+0xc4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_TIM_Base_Start+0x66>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_TIM_Base_Start+0xc8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d115      	bne.n	8003412 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_TIM_Base_Start+0xcc>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d015      	beq.n	8003424 <HAL_TIM_Base_Start+0xa4>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d011      	beq.n	8003424 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003410:	e008      	b.n	8003424 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e000      	b.n	8003426 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003424:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00
 8003444:	40013400 	.word	0x40013400
 8003448:	40014000 	.word	0x40014000
 800344c:	00010007 	.word	0x00010007

08003450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	d122      	bne.n	80034ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b02      	cmp	r3, #2
 8003472:	d11b      	bne.n	80034ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0202 	mvn.w	r2, #2
 800347c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9c8 	bl	8003828 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f9ba 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f9cb 	bl	800383c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0204 	mvn.w	r2, #4
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f99e 	bl	8003828 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f990 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9a1 	bl	800383c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b08      	cmp	r3, #8
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b08      	cmp	r3, #8
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0208 	mvn.w	r2, #8
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2204      	movs	r2, #4
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f974 	bl	8003828 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f966 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f977 	bl	800383c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b10      	cmp	r3, #16
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b10      	cmp	r3, #16
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0210 	mvn.w	r2, #16
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2208      	movs	r2, #8
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f94a 	bl	8003828 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f93c 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f94d 	bl	800383c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0201 	mvn.w	r2, #1
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f916 	bl	8003800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 faf8 	bl	8003bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d10e      	bne.n	800362e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d107      	bne.n	800362e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 faeb 	bl	8003c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d10e      	bne.n	800365a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d107      	bne.n	800365a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8fb 	bl	8003850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b20      	cmp	r3, #32
 8003666:	d10e      	bne.n	8003686 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b20      	cmp	r3, #32
 8003674:	d107      	bne.n	8003686 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0220 	mvn.w	r2, #32
 800367e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 faab 	bl	8003bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_ConfigClockSource+0x18>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e0a8      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x16a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d067      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x124>
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d80b      	bhi.n	80036fe <HAL_TIM_ConfigClockSource+0x70>
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d073      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x144>
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d802      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x66>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d06f      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036f2:	e078      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d06c      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x144>
 80036f8:	2b30      	cmp	r3, #48	; 0x30
 80036fa:	d06a      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80036fc:	e073      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80036fe:	2b70      	cmp	r3, #112	; 0x70
 8003700:	d00d      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x90>
 8003702:	2b70      	cmp	r3, #112	; 0x70
 8003704:	d804      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x82>
 8003706:	2b50      	cmp	r3, #80	; 0x50
 8003708:	d033      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xe4>
 800370a:	2b60      	cmp	r3, #96	; 0x60
 800370c:	d041      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800370e:	e06a      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003714:	d066      	beq.n	80037e4 <HAL_TIM_ConfigClockSource+0x156>
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	d017      	beq.n	800374c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800371c:	e063      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f000 f9ad 	bl	8003a8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003740:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	609a      	str	r2, [r3, #8]
      break;
 800374a:	e04c      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6899      	ldr	r1, [r3, #8]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f000 f996 	bl	8003a8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376e:	609a      	str	r2, [r3, #8]
      break;
 8003770:	e039      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	461a      	mov	r2, r3
 8003780:	f000 f90a 	bl	8003998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2150      	movs	r1, #80	; 0x50
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f963 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 8003790:	e029      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	461a      	mov	r2, r3
 80037a0:	f000 f929 	bl	80039f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2160      	movs	r1, #96	; 0x60
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f953 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 80037b0:	e019      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	461a      	mov	r2, r3
 80037c0:	f000 f8ea 	bl	8003998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2140      	movs	r1, #64	; 0x40
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f943 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 80037d0:	e009      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f000 f93a 	bl	8003a56 <TIM_ITRx_SetConfig>
        break;
 80037e2:	e000      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80037e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a40      	ldr	r2, [pc, #256]	; (8003978 <TIM_Base_SetConfig+0x114>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003882:	d00f      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3d      	ldr	r2, [pc, #244]	; (800397c <TIM_Base_SetConfig+0x118>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00b      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3c      	ldr	r2, [pc, #240]	; (8003980 <TIM_Base_SetConfig+0x11c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3b      	ldr	r2, [pc, #236]	; (8003984 <TIM_Base_SetConfig+0x120>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3a      	ldr	r2, [pc, #232]	; (8003988 <TIM_Base_SetConfig+0x124>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <TIM_Base_SetConfig+0x114>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01f      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d01b      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2c      	ldr	r2, [pc, #176]	; (800397c <TIM_Base_SetConfig+0x118>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d017      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2b      	ldr	r2, [pc, #172]	; (8003980 <TIM_Base_SetConfig+0x11c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <TIM_Base_SetConfig+0x120>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00f      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a29      	ldr	r2, [pc, #164]	; (8003988 <TIM_Base_SetConfig+0x124>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00b      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a28      	ldr	r2, [pc, #160]	; (800398c <TIM_Base_SetConfig+0x128>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a27      	ldr	r2, [pc, #156]	; (8003990 <TIM_Base_SetConfig+0x12c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a26      	ldr	r2, [pc, #152]	; (8003994 <TIM_Base_SetConfig+0x130>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <TIM_Base_SetConfig+0x114>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00f      	beq.n	800395c <TIM_Base_SetConfig+0xf8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <TIM_Base_SetConfig+0x124>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0xf8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a11      	ldr	r2, [pc, #68]	; (800398c <TIM_Base_SetConfig+0x128>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0xf8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <TIM_Base_SetConfig+0x12c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0xf8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <TIM_Base_SetConfig+0x130>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d103      	bne.n	8003964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	615a      	str	r2, [r3, #20]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40013400 	.word	0x40013400
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800

08003998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f023 030a 	bic.w	r3, r3, #10
 80039d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0210 	bic.w	r2, r3, #16
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	031b      	lsls	r3, r3, #12
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f043 0307 	orr.w	r3, r3, #7
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	021a      	lsls	r2, r3, #8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e068      	b.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2e      	ldr	r2, [pc, #184]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2d      	ldr	r2, [pc, #180]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d108      	bne.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01d      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d018      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d009      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10c      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40014000 	.word	0x40014000

08003bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c18:	b5b0      	push	{r4, r5, r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c1e:	f7fc fef1 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c22:	f000 f89b 	bl	8003d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c26:	f000 f9af 	bl	8003f88 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c2a:	f000 f98f 	bl	8003f4c <MX_DMA_Init>
  MX_DAC1_Init();
 8003c2e:	f000 f8e7 	bl	8003e00 <MX_DAC1_Init>
  MX_TIM2_Init();
 8003c32:	f000 f93d 	bl	8003eb0 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 8003c36:	f000 f915 	bl	8003e64 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 8003c3a:	f000 fa39 	bl	80040b0 <BSP_QSPI_Init>
  // Erase the memory block
  if (BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK) {
 8003c3e:	2050      	movs	r0, #80	; 0x50
 8003c40:	f000 fb66 	bl	8004310 <BSP_QSPI_Erase_Block>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <main+0x36>
	  Error_Handler();
 8003c4a:	f000 fa23 	bl	8004094 <Error_Handler>
  }
  // create the sine waves one by one and save them
  for (int i = 0; i < 6; i++) {
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e05a      	b.n	8003d0a <main+0xf2>
	  float radian = 0;
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
	  for (int j = 0; j < QSPI_BUFFER_SIZE; j++) {
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e03b      	b.n	8003cd8 <main+0xc0>
		  audioWrite[j] = (100 * arm_sin_f32(radian)) + 100;
 8003c60:	ed97 0a04 	vldr	s0, [r7, #16]
 8003c64:	f000 ffcc 	bl	8004c00 <arm_sin_f32>
 8003c68:	eeb0 7a40 	vmov.f32	s14, s0
 8003c6c:	eddf 7a36 	vldr	s15, [pc, #216]	; 8003d48 <main+0x130>
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003d48 <main+0x130>
 8003c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c80:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c84:	793b      	ldrb	r3, [r7, #4]
 8003c86:	b2d9      	uxtb	r1, r3
 8003c88:	4a30      	ldr	r2, [pc, #192]	; (8003d4c <main+0x134>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	460a      	mov	r2, r1
 8003c90:	701a      	strb	r2, [r3, #0]
		  radian += M_PI_4 / ((i+1)*2);
 8003c92:	6938      	ldr	r0, [r7, #16]
 8003c94:	f7fc fbfc 	bl	8000490 <__aeabi_f2d>
 8003c98:	4604      	mov	r4, r0
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fbe2 	bl	800046c <__aeabi_i2d>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	a124      	add	r1, pc, #144	; (adr r1, 8003d40 <main+0x128>)
 8003cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cb2:	f7fc fd6f 	bl	8000794 <__aeabi_ddiv>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4620      	mov	r0, r4
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	f7fc fa89 	bl	80001d4 <__adddf3>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4621      	mov	r1, r4
 8003cca:	f7fc fe4b 	bl	8000964 <__aeabi_d2f>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	613b      	str	r3, [r7, #16]
	  for (int j = 0; j < QSPI_BUFFER_SIZE; j++) {
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	ddbe      	ble.n	8003c60 <main+0x48>
	  }
	  if (BSP_QSPI_Write(audioWrite, WRITE_READ_ADDR + (i * QSPI_BUFFER_SIZE), QSPI_BUFFER_SIZE) != QSPI_OK) {
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	3350      	adds	r3, #80	; 0x50
 8003cee:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4815      	ldr	r0, [pc, #84]	; (8003d4c <main+0x134>)
 8003cf6:	f000 fa8d 	bl	8004214 <BSP_QSPI_Write>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <main+0xec>
		  Error_Handler();
 8003d00:	f000 f9c8 	bl	8004094 <Error_Handler>
  for (int i = 0; i < 6; i++) {
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3301      	adds	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	dda1      	ble.n	8003c54 <main+0x3c>
	  }
  }
  // read the first audio from the memory
  if (BSP_QSPI_Read(audioRead, WRITE_READ_ADDR, QSPI_BUFFER_SIZE) != QSPI_OK) {
 8003d10:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d14:	2150      	movs	r1, #80	; 0x50
 8003d16:	480e      	ldr	r0, [pc, #56]	; (8003d50 <main+0x138>)
 8003d18:	f000 fa36 	bl	8004188 <BSP_QSPI_Read>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <main+0x10e>
	  Error_Handler();
 8003d22:	f000 f9b7 	bl	8004094 <Error_Handler>
  }
  // load and play the first memory
  HAL_TIM_Base_Start(&htim2);
 8003d26:	480b      	ldr	r0, [pc, #44]	; (8003d54 <main+0x13c>)
 8003d28:	f7ff fb2a 	bl	8003380 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,(uint32_t*) audioRead, QSPI_BUFFER_SIZE, DAC_ALIGN_8B_R);
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d34:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <main+0x138>)
 8003d36:	2100      	movs	r1, #0
 8003d38:	4807      	ldr	r0, [pc, #28]	; (8003d58 <main+0x140>)
 8003d3a:	f7fd f82d 	bl	8000d98 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d3e:	e7fe      	b.n	8003d3e <main+0x126>
 8003d40:	54442d18 	.word	0x54442d18
 8003d44:	3fe921fb 	.word	0x3fe921fb
 8003d48:	42c80000 	.word	0x42c80000
 8003d4c:	20000030 	.word	0x20000030
 8003d50:	20002740 	.word	0x20002740
 8003d54:	20004eac 	.word	0x20004eac
 8003d58:	20004e50 	.word	0x20004e50

08003d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b096      	sub	sp, #88	; 0x58
 8003d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d62:	f107 0314 	add.w	r3, r7, #20
 8003d66:	2244      	movs	r2, #68	; 0x44
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 ffb2 	bl	8004cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d70:	463b      	mov	r3, r7
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003d7e:	2310      	movs	r3, #16
 8003d80:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003d82:	2301      	movs	r3, #1
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003d8a:	2360      	movs	r3, #96	; 0x60
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003d92:	2301      	movs	r3, #1
 8003d94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003d9a:	2328      	movs	r3, #40	; 0x28
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003d9e:	2307      	movs	r3, #7
 8003da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003da2:	2302      	movs	r3, #2
 8003da4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003da6:	2302      	movs	r3, #2
 8003da8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003daa:	f107 0314 	add.w	r3, r7, #20
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fcdc 	bl	800276c <HAL_RCC_OscConfig>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003dba:	f000 f96b 	bl	8004094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dbe:	230f      	movs	r3, #15
 8003dc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff f8ae 	bl	8002f38 <HAL_RCC_ClockConfig>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003de2:	f000 f957 	bl	8004094 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003de6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003dea:	f7fd ff89 	bl	8001d00 <HAL_PWREx_ControlVoltageScaling>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003df4:	f000 f94e 	bl	8004094 <Error_Handler>
  }
}
 8003df8:	bf00      	nop
 8003dfa:	3758      	adds	r7, #88	; 0x58
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	2224      	movs	r2, #36	; 0x24
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 ff61 	bl	8004cd4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <MX_DAC1_Init+0x5c>)
 8003e14:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <MX_DAC1_Init+0x60>)
 8003e16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003e18:	4810      	ldr	r0, [pc, #64]	; (8003e5c <MX_DAC1_Init+0x5c>)
 8003e1a:	f7fc ff9a 	bl	8000d52 <HAL_DAC_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003e24:	f000 f936 	bl	8004094 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003e2c:	2324      	movs	r3, #36	; 0x24
 8003e2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003e3c:	1d3b      	adds	r3, r7, #4
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4619      	mov	r1, r3
 8003e42:	4806      	ldr	r0, [pc, #24]	; (8003e5c <MX_DAC1_Init+0x5c>)
 8003e44:	f7fd f8bf 	bl	8000fc6 <HAL_DAC_ConfigChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8003e4e:	f000 f921 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003e52:	bf00      	nop
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20004e50 	.word	0x20004e50
 8003e60:	40007400 	.word	0x40007400

08003e64 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <MX_QUADSPI_Init+0x44>)
 8003e6a:	4a10      	ldr	r2, [pc, #64]	; (8003eac <MX_QUADSPI_Init+0x48>)
 8003e6c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <MX_QUADSPI_Init+0x44>)
 8003e70:	22ff      	movs	r2, #255	; 0xff
 8003e72:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <MX_QUADSPI_Init+0x44>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <MX_QUADSPI_Init+0x44>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <MX_QUADSPI_Init+0x44>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <MX_QUADSPI_Init+0x44>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <MX_QUADSPI_Init+0x44>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003e92:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <MX_QUADSPI_Init+0x44>)
 8003e94:	f7fd ff8a 	bl	8001dac <HAL_QSPI_Init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8003e9e:	f000 f8f9 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20004ef8 	.word	0x20004ef8
 8003eac:	a0001000 	.word	0xa0001000

08003eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eb6:	f107 0310 	add.w	r3, r7, #16
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec4:	1d3b      	adds	r3, r7, #4
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ed4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8003ee2:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003ee4:	f240 7216 	movw	r2, #1814	; 0x716
 8003ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ef6:	4814      	ldr	r0, [pc, #80]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003ef8:	f7ff f9ea 	bl	80032d0 <HAL_TIM_Base_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003f02:	f000 f8c7 	bl	8004094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f0c:	f107 0310 	add.w	r3, r7, #16
 8003f10:	4619      	mov	r1, r3
 8003f12:	480d      	ldr	r0, [pc, #52]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003f14:	f7ff fbbb 	bl	800368e <HAL_TIM_ConfigClockSource>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003f1e:	f000 f8b9 	bl	8004094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003f22:	2320      	movs	r3, #32
 8003f24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4806      	ldr	r0, [pc, #24]	; (8003f48 <MX_TIM2_Init+0x98>)
 8003f30:	f7ff fdcc 	bl	8003acc <HAL_TIMEx_MasterConfigSynchronization>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003f3a:	f000 f8ab 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f3e:	bf00      	nop
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20004eac 	.word	0x20004eac

08003f4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f52:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <MX_DMA_Init+0x38>)
 8003f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f56:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <MX_DMA_Init+0x38>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6493      	str	r3, [r2, #72]	; 0x48
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <MX_DMA_Init+0x38>)
 8003f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	200d      	movs	r0, #13
 8003f70:	f7fc feb9 	bl	8000ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003f74:	200d      	movs	r0, #13
 8003f76:	f7fc fed2 	bl	8000d1e <HAL_NVIC_EnableIRQ>

}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000

08003f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8e:	f107 030c 	add.w	r3, r7, #12
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	609a      	str	r2, [r3, #8]
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fb6:	4b18      	ldr	r3, [pc, #96]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fbc:	f043 0310 	orr.w	r3, r3, #16
 8003fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	4a11      	ldr	r2, [pc, #68]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fd4:	f043 0302 	orr.w	r3, r3, #2
 8003fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <MX_GPIO_Init+0x90>)
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fec:	480b      	ldr	r0, [pc, #44]	; (800401c <MX_GPIO_Init+0x94>)
 8003fee:	f7fd fe61 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	4619      	mov	r1, r3
 800400a:	4804      	ldr	r0, [pc, #16]	; (800401c <MX_GPIO_Init+0x94>)
 800400c:	f7fd fbb6 	bl	800177c <HAL_GPIO_Init>

}
 8004010:	bf00      	nop
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	48000400 	.word	0x48000400

08004020 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef * hdac) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af02      	add	r7, sp, #8
 8004026:	6078      	str	r0, [r7, #4]
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8004028:	2100      	movs	r1, #0
 800402a:	4817      	ldr	r0, [pc, #92]	; (8004088 <HAL_DAC_ConvCpltCallbackCh1+0x68>)
 800402c:	f7fc ff72 	bl	8000f14 <HAL_DAC_Stop_DMA>
  audio_number += 1;
 8004030:	4b16      	ldr	r3, [pc, #88]	; (800408c <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	4a15      	ldr	r2, [pc, #84]	; (800408c <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8004038:	6013      	str	r3, [r2, #0]
  if (audio_number > 6) {
 800403a:	4b14      	ldr	r3, [pc, #80]	; (800408c <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b06      	cmp	r3, #6
 8004040:	dd02      	ble.n	8004048 <HAL_DAC_ConvCpltCallbackCh1+0x28>
	  audio_number = 1;
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
  }
  if(BSP_QSPI_Read(audioRead, WRITE_READ_ADDR + ((audio_number - 1)*QSPI_BUFFER_SIZE), QSPI_BUFFER_SIZE) != QSPI_OK) {
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	3350      	adds	r3, #80	; 0x50
 8004058:	f242 7210 	movw	r2, #10000	; 0x2710
 800405c:	4619      	mov	r1, r3
 800405e:	480c      	ldr	r0, [pc, #48]	; (8004090 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8004060:	f000 f892 	bl	8004188 <BSP_QSPI_Read>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_DAC_ConvCpltCallbackCh1+0x4e>
	Error_Handler();
 800406a:	f000 f813 	bl	8004094 <Error_Handler>
  }
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) audioRead, QSPI_BUFFER_SIZE, DAC_ALIGN_8B_R);
 800406e:	2308      	movs	r3, #8
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	f242 7310 	movw	r3, #10000	; 0x2710
 8004076:	4a06      	ldr	r2, [pc, #24]	; (8004090 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8004078:	2100      	movs	r1, #0
 800407a:	4803      	ldr	r0, [pc, #12]	; (8004088 <HAL_DAC_ConvCpltCallbackCh1+0x68>)
 800407c:	f7fc fe8c 	bl	8000d98 <HAL_DAC_Start_DMA>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20004e50 	.word	0x20004e50
 800408c:	20000008 	.word	0x20000008
 8004090:	20002740 	.word	0x20002740

08004094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004098:	2201      	movs	r2, #1
 800409a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800409e:	4803      	ldr	r0, [pc, #12]	; (80040ac <Error_Handler+0x18>)
 80040a0:	f7fd fe08 	bl	8001cb4 <HAL_GPIO_WritePin>
  __BKPT();
 80040a4:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	48000400 	.word	0x48000400

080040b0 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <BSP_QSPI_Init+0xd0>)
 80040b8:	4a32      	ldr	r2, [pc, #200]	; (8004184 <BSP_QSPI_Init+0xd4>)
 80040ba:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80040bc:	4830      	ldr	r0, [pc, #192]	; (8004180 <BSP_QSPI_Init+0xd0>)
 80040be:	f7fd feeb 	bl	8001e98 <HAL_QSPI_DeInit>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e054      	b.n	8004176 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80040cc:	f000 f964 	bl	8004398 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <BSP_QSPI_Init+0xd0>)
 80040d2:	2202      	movs	r2, #2
 80040d4:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80040d6:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <BSP_QSPI_Init+0xd0>)
 80040d8:	2204      	movs	r2, #4
 80040da:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_NONE;
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <BSP_QSPI_Init+0xd0>)
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80040e6:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80040fa:	2320      	movs	r3, #32
 80040fc:	e003      	b.n	8004106 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8004106:	3b01      	subs	r3, #1
 8004108:	461a      	mov	r2, r3
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <BSP_QSPI_Init+0xd0>)
 800410c:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <BSP_QSPI_Init+0xd0>)
 8004110:	2200      	movs	r2, #0
 8004112:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <BSP_QSPI_Init+0xd0>)
 8004116:	2200      	movs	r2, #0
 8004118:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800411a:	4819      	ldr	r0, [pc, #100]	; (8004180 <BSP_QSPI_Init+0xd0>)
 800411c:	f7fd fe46 	bl	8001dac <HAL_QSPI_Init>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e025      	b.n	8004176 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800412a:	4815      	ldr	r0, [pc, #84]	; (8004180 <BSP_QSPI_Init+0xd0>)
 800412c:	f000 f974 	bl	8004418 <QSPI_ResetMemory>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8004136:	2304      	movs	r3, #4
 8004138:	e01d      	b.n	8004176 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800413a:	2101      	movs	r1, #1
 800413c:	4810      	ldr	r0, [pc, #64]	; (8004180 <BSP_QSPI_Init+0xd0>)
 800413e:	f000 fa35 	bl	80045ac <QSPI_QuadMode>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e014      	b.n	8004176 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800414c:	2101      	movs	r1, #1
 800414e:	480c      	ldr	r0, [pc, #48]	; (8004180 <BSP_QSPI_Init+0xd0>)
 8004150:	f000 fad4 	bl	80046fc <QSPI_HighPerfMode>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e00b      	b.n	8004176 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <BSP_QSPI_Init+0xd0>)
 8004160:	2201      	movs	r2, #1
 8004162:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004164:	4806      	ldr	r0, [pc, #24]	; (8004180 <BSP_QSPI_Init+0xd0>)
 8004166:	f7fd fe21 	bl	8001dac <HAL_QSPI_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20004f3c 	.word	0x20004f3c
 8004184:	a0001000 	.word	0xa0001000

08004188 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b092      	sub	sp, #72	; 0x48
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8004194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 800419a:	23eb      	movs	r3, #235	; 0xeb
 800419c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 800419e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 80041a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041a8:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 80041ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80041b4:	2300      	movs	r3, #0
 80041b6:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80041b8:	23aa      	movs	r3, #170	; 0xaa
 80041ba:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 80041bc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80041c2:	2304      	movs	r3, #4
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80041ce:	2300      	movs	r3, #0
 80041d0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80041d2:	2300      	movs	r3, #0
 80041d4:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041d6:	f107 0310 	add.w	r3, r7, #16
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4619      	mov	r1, r3
 80041e0:	480b      	ldr	r0, [pc, #44]	; (8004210 <BSP_QSPI_Read+0x88>)
 80041e2:	f7fd fe7d 	bl	8001ee0 <HAL_QSPI_Command>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e00b      	b.n	8004208 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	68f9      	ldr	r1, [r7, #12]
 80041f6:	4806      	ldr	r0, [pc, #24]	; (8004210 <BSP_QSPI_Read+0x88>)
 80041f8:	f7fd ff67 	bl	80020ca <HAL_QSPI_Receive>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3748      	adds	r7, #72	; 0x48
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20004f3c 	.word	0x20004f3c

08004214 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b096      	sub	sp, #88	; 0x58
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004228:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800422a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	429a      	cmp	r2, r3
 8004230:	d901      	bls.n	8004236 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8004248:	2338      	movs	r3, #56	; 0x38
 800424a:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800424c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004256:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004258:	2300      	movs	r3, #0
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 800425c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800426a:	2300      	movs	r3, #0
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800426e:	2300      	movs	r3, #0
 8004270:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8004272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004274:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8004276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004278:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800427a:	4824      	ldr	r0, [pc, #144]	; (800430c <BSP_QSPI_Write+0xf8>)
 800427c:	f000 f910 	bl	80044a0 <QSPI_WriteEnable>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e03b      	b.n	8004302 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800428a:	f107 0314 	add.w	r3, r7, #20
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4619      	mov	r1, r3
 8004294:	481d      	ldr	r0, [pc, #116]	; (800430c <BSP_QSPI_Write+0xf8>)
 8004296:	f7fd fe23 	bl	8001ee0 <HAL_QSPI_Command>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e02e      	b.n	8004302 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	4818      	ldr	r0, [pc, #96]	; (800430c <BSP_QSPI_Write+0xf8>)
 80042ac:	f7fd fe76 	bl	8001f9c <HAL_QSPI_Transmit>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e023      	b.n	8004302 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80042ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80042be:	4813      	ldr	r0, [pc, #76]	; (800430c <BSP_QSPI_Write+0xf8>)
 80042c0:	f000 f93a 	bl	8004538 <QSPI_AutoPollingMemReady>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e019      	b.n	8004302 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80042ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d2:	4413      	add	r3, r2
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042da:	4413      	add	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80042de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d203      	bcs.n	80042f2 <BSP_QSPI_Write+0xde>
 80042ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	e001      	b.n	80042f6 <BSP_QSPI_Write+0xe2>
 80042f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042f6:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80042f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d3b8      	bcc.n	8004272 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3758      	adds	r7, #88	; 0x58
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20004f3c 	.word	0x20004f3c

08004310 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b090      	sub	sp, #64	; 0x40
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800431c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 800431e:	23d8      	movs	r3, #216	; 0xd8
 8004320:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800432c:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004332:	2300      	movs	r3, #0
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8004336:	2300      	movs	r3, #0
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004342:	2300      	movs	r3, #0
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004346:	2300      	movs	r3, #0
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800434a:	4812      	ldr	r0, [pc, #72]	; (8004394 <BSP_QSPI_Erase_Block+0x84>)
 800434c:	f000 f8a8 	bl	80044a0 <QSPI_WriteEnable>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e017      	b.n	800438a <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4619      	mov	r1, r3
 8004364:	480b      	ldr	r0, [pc, #44]	; (8004394 <BSP_QSPI_Erase_Block+0x84>)
 8004366:	f7fd fdbb 	bl	8001ee0 <HAL_QSPI_Command>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e00a      	b.n	800438a <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8004374:	f640 51ac 	movw	r1, #3500	; 0xdac
 8004378:	4806      	ldr	r0, [pc, #24]	; (8004394 <BSP_QSPI_Erase_Block+0x84>)
 800437a:	f000 f8dd 	bl	8004538 <QSPI_AutoPollingMemReady>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3740      	adds	r7, #64	; 0x40
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20004f3c 	.word	0x20004f3c

08004398 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 800439e:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a8:	6513      	str	r3, [r2, #80]	; 0x50
 80043aa:	4b19      	ldr	r3, [pc, #100]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	4a15      	ldr	r2, [pc, #84]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043cc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	4a0f      	ldr	r2, [pc, #60]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043d4:	f043 0310 	orr.w	r3, r3, #16
 80043d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <BSP_QSPI_MspInit+0x78>)
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80043e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80043ea:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f4:	2303      	movs	r3, #3
 80043f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80043f8:	230a      	movs	r3, #10
 80043fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043fc:	f107 030c 	add.w	r3, r7, #12
 8004400:	4619      	mov	r1, r3
 8004402:	4804      	ldr	r0, [pc, #16]	; (8004414 <BSP_QSPI_MspInit+0x7c>)
 8004404:	f7fd f9ba 	bl	800177c <HAL_GPIO_Init>
}
 8004408:	bf00      	nop
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	48001000 	.word	0x48001000

08004418 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b090      	sub	sp, #64	; 0x40
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004424:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8004426:	2366      	movs	r3, #102	; 0x66
 8004428:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800442e:	2300      	movs	r3, #0
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8004432:	2300      	movs	r3, #0
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800443a:	2300      	movs	r3, #0
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800443e:	2300      	movs	r3, #0
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004442:	2300      	movs	r3, #0
 8004444:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4619      	mov	r1, r3
 8004450:	4812      	ldr	r0, [pc, #72]	; (800449c <QSPI_ResetMemory+0x84>)
 8004452:	f7fd fd45 	bl	8001ee0 <HAL_QSPI_Command>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e019      	b.n	8004494 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8004460:	2399      	movs	r3, #153	; 0x99
 8004462:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4619      	mov	r1, r3
 800446e:	480b      	ldr	r0, [pc, #44]	; (800449c <QSPI_ResetMemory+0x84>)
 8004470:	f7fd fd36 	bl	8001ee0 <HAL_QSPI_Command>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e00a      	b.n	8004494 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800447e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004482:	4806      	ldr	r0, [pc, #24]	; (800449c <QSPI_ResetMemory+0x84>)
 8004484:	f000 f858 	bl	8004538 <QSPI_AutoPollingMemReady>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3740      	adds	r7, #64	; 0x40
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20004f3c 	.word	0x20004f3c

080044a0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b096      	sub	sp, #88	; 0x58
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80044ae:	2306      	movs	r3, #6
 80044b0:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80044c6:	2300      	movs	r3, #0
 80044c8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80044ca:	2300      	movs	r3, #0
 80044cc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044ce:	f107 0320 	add.w	r3, r7, #32
 80044d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d6:	4619      	mov	r1, r3
 80044d8:	4816      	ldr	r0, [pc, #88]	; (8004534 <QSPI_WriteEnable+0x94>)
 80044da:	f7fd fd01 	bl	8001ee0 <HAL_QSPI_Command>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e020      	b.n	800452a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 80044e8:	2302      	movs	r3, #2
 80044ea:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 80044ec:	2302      	movs	r3, #2
 80044ee:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80044f8:	2310      	movs	r3, #16
 80044fa:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80044fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004500:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8004502:	2305      	movs	r3, #5
 8004504:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8004506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800450a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800450c:	f107 0208 	add.w	r2, r7, #8
 8004510:	f107 0120 	add.w	r1, r7, #32
 8004514:	f241 3388 	movw	r3, #5000	; 0x1388
 8004518:	4806      	ldr	r0, [pc, #24]	; (8004534 <QSPI_WriteEnable+0x94>)
 800451a:	f7fd fe78 	bl	800220e <HAL_QSPI_AutoPolling>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3758      	adds	r7, #88	; 0x58
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20004f3c 	.word	0x20004f3c

08004538 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b096      	sub	sp, #88	; 0x58
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8004548:	2305      	movs	r3, #5
 800454a:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800454c:	2300      	movs	r3, #0
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004550:	2300      	movs	r3, #0
 8004552:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8004554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004558:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800455e:	2300      	movs	r3, #0
 8004560:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004562:	2300      	movs	r3, #0
 8004564:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004566:	2300      	movs	r3, #0
 8004568:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 800456e:	2301      	movs	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800457a:	2310      	movs	r3, #16
 800457c:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800457e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004582:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8004584:	f107 0208 	add.w	r2, r7, #8
 8004588:	f107 0120 	add.w	r1, r7, #32
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4806      	ldr	r0, [pc, #24]	; (80045a8 <QSPI_AutoPollingMemReady+0x70>)
 8004590:	f7fd fe3d 	bl	800220e <HAL_QSPI_AutoPolling>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3758      	adds	r7, #88	; 0x58
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20004f3c 	.word	0x20004f3c

080045ac <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b092      	sub	sp, #72	; 0x48
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80045b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80045be:	2305      	movs	r3, #5
 80045c0:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80045ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 80045d4:	2301      	movs	r3, #1
 80045d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80045d8:	2300      	movs	r3, #0
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80045dc:	2300      	movs	r3, #0
 80045de:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045e0:	2300      	movs	r3, #0
 80045e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045e4:	f107 0310 	add.w	r3, r7, #16
 80045e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ec:	4619      	mov	r1, r3
 80045ee:	4842      	ldr	r0, [pc, #264]	; (80046f8 <QSPI_QuadMode+0x14c>)
 80045f0:	f7fd fc76 	bl	8001ee0 <HAL_QSPI_Command>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e077      	b.n	80046ee <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045fe:	f107 030f 	add.w	r3, r7, #15
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4619      	mov	r1, r3
 8004608:	483b      	ldr	r0, [pc, #236]	; (80046f8 <QSPI_QuadMode+0x14c>)
 800460a:	f7fd fd5e 	bl	80020ca <HAL_QSPI_Receive>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e06a      	b.n	80046ee <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8004618:	4837      	ldr	r0, [pc, #220]	; (80046f8 <QSPI_QuadMode+0x14c>)
 800461a:	f7ff ff41 	bl	80044a0 <QSPI_WriteEnable>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e062      	b.n	80046ee <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004634:	b2db      	uxtb	r3, r3
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e004      	b.n	8004644 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	b2db      	uxtb	r3, r3
 8004642:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8004644:	2301      	movs	r3, #1
 8004646:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4619      	mov	r1, r3
 8004652:	4829      	ldr	r0, [pc, #164]	; (80046f8 <QSPI_QuadMode+0x14c>)
 8004654:	f7fd fc44 	bl	8001ee0 <HAL_QSPI_Command>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e045      	b.n	80046ee <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004662:	f107 030f 	add.w	r3, r7, #15
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4619      	mov	r1, r3
 800466c:	4822      	ldr	r0, [pc, #136]	; (80046f8 <QSPI_QuadMode+0x14c>)
 800466e:	f7fd fc95 	bl	8001f9c <HAL_QSPI_Transmit>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e038      	b.n	80046ee <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800467c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004680:	481d      	ldr	r0, [pc, #116]	; (80046f8 <QSPI_QuadMode+0x14c>)
 8004682:	f7ff ff59 	bl	8004538 <QSPI_AutoPollingMemReady>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e02e      	b.n	80046ee <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8004690:	2305      	movs	r3, #5
 8004692:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004694:	f107 0310 	add.w	r3, r7, #16
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4619      	mov	r1, r3
 800469e:	4816      	ldr	r0, [pc, #88]	; (80046f8 <QSPI_QuadMode+0x14c>)
 80046a0:	f7fd fc1e 	bl	8001ee0 <HAL_QSPI_Command>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e01f      	b.n	80046ee <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046ae:	f107 030f 	add.w	r3, r7, #15
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4619      	mov	r1, r3
 80046b8:	480f      	ldr	r0, [pc, #60]	; (80046f8 <QSPI_QuadMode+0x14c>)
 80046ba:	f7fd fd06 	bl	80020ca <HAL_QSPI_Receive>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e012      	b.n	80046ee <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <QSPI_QuadMode+0x12c>
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d007      	beq.n	80046e8 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d004      	beq.n	80046ec <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3748      	adds	r7, #72	; 0x48
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20004f3c 	.word	0x20004f3c

080046fc <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b092      	sub	sp, #72	; 0x48
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800470e:	2305      	movs	r3, #5
 8004710:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8004712:	2300      	movs	r3, #0
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004716:	2300      	movs	r3, #0
 8004718:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800471a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8004724:	2301      	movs	r3, #1
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800472c:	2300      	movs	r3, #0
 800472e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004730:	2300      	movs	r3, #0
 8004732:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004734:	f107 0310 	add.w	r3, r7, #16
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	4619      	mov	r1, r3
 800473e:	4853      	ldr	r0, [pc, #332]	; (800488c <QSPI_HighPerfMode+0x190>)
 8004740:	f7fd fbce 	bl	8001ee0 <HAL_QSPI_Command>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e09a      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800474e:	f107 030c 	add.w	r3, r7, #12
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
 8004756:	4619      	mov	r1, r3
 8004758:	484c      	ldr	r0, [pc, #304]	; (800488c <QSPI_HighPerfMode+0x190>)
 800475a:	f7fd fcb6 	bl	80020ca <HAL_QSPI_Receive>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e08d      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8004768:	2315      	movs	r3, #21
 800476a:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 800476c:	2302      	movs	r3, #2
 800476e:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004770:	f107 0310 	add.w	r3, r7, #16
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4619      	mov	r1, r3
 800477a:	4844      	ldr	r0, [pc, #272]	; (800488c <QSPI_HighPerfMode+0x190>)
 800477c:	f7fd fbb0 	bl	8001ee0 <HAL_QSPI_Command>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07c      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	3301      	adds	r3, #1
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4619      	mov	r1, r3
 8004796:	483d      	ldr	r0, [pc, #244]	; (800488c <QSPI_HighPerfMode+0x190>)
 8004798:	f7fd fc97 	bl	80020ca <HAL_QSPI_Receive>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e06e      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80047a6:	4839      	ldr	r0, [pc, #228]	; (800488c <QSPI_HighPerfMode+0x190>)
 80047a8:	f7ff fe7a 	bl	80044a0 <QSPI_WriteEnable>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e066      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80047bc:	7bbb      	ldrb	r3, [r7, #14]
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	73bb      	strb	r3, [r7, #14]
 80047c6:	e004      	b.n	80047d2 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80047c8:	7bbb      	ldrb	r3, [r7, #14]
 80047ca:	f023 0302 	bic.w	r3, r3, #2
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80047d2:	2301      	movs	r3, #1
 80047d4:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 80047d6:	2303      	movs	r3, #3
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047da:	f107 0310 	add.w	r3, r7, #16
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4619      	mov	r1, r3
 80047e4:	4829      	ldr	r0, [pc, #164]	; (800488c <QSPI_HighPerfMode+0x190>)
 80047e6:	f7fd fb7b 	bl	8001ee0 <HAL_QSPI_Command>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e047      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047f4:	f107 030c 	add.w	r3, r7, #12
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4619      	mov	r1, r3
 80047fe:	4823      	ldr	r0, [pc, #140]	; (800488c <QSPI_HighPerfMode+0x190>)
 8004800:	f7fd fbcc 	bl	8001f9c <HAL_QSPI_Transmit>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e03a      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800480e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004812:	481e      	ldr	r0, [pc, #120]	; (800488c <QSPI_HighPerfMode+0x190>)
 8004814:	f7ff fe90 	bl	8004538 <QSPI_AutoPollingMemReady>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e030      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8004822:	2315      	movs	r3, #21
 8004824:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8004826:	2302      	movs	r3, #2
 8004828:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800482a:	f107 0310 	add.w	r3, r7, #16
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4619      	mov	r1, r3
 8004834:	4815      	ldr	r0, [pc, #84]	; (800488c <QSPI_HighPerfMode+0x190>)
 8004836:	f7fd fb53 	bl	8001ee0 <HAL_QSPI_Command>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e01f      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4619      	mov	r1, r3
 800484e:	480f      	ldr	r0, [pc, #60]	; (800488c <QSPI_HighPerfMode+0x190>)
 8004850:	f7fd fc3b 	bl	80020ca <HAL_QSPI_Receive>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e012      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800485e:	7b7b      	ldrb	r3, [r7, #13]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <QSPI_HighPerfMode+0x172>
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d007      	beq.n	800487e <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800486e:	7b7b      	ldrb	r3, [r7, #13]
 8004870:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3748      	adds	r7, #72	; 0x48
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20004f3c 	.word	0x20004f3c

08004890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <HAL_MspInit+0x44>)
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <HAL_MspInit+0x44>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6613      	str	r3, [r2, #96]	; 0x60
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_MspInit+0x44>)
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_MspInit+0x44>)
 80048b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_MspInit+0x44>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_MspInit+0x44>)
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000

080048d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <HAL_DAC_MspInit+0xc8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d14d      	bne.n	8004996 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80048fa:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_DAC_MspInit+0xcc>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <HAL_DAC_MspInit+0xcc>)
 8004900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
 8004906:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <HAL_DAC_MspInit+0xcc>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_DAC_MspInit+0xcc>)
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <HAL_DAC_MspInit+0xcc>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_DAC_MspInit+0xcc>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800492a:	2310      	movs	r3, #16
 800492c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800492e:	2303      	movs	r3, #3
 8004930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004936:	f107 0314 	add.w	r3, r7, #20
 800493a:	4619      	mov	r1, r3
 800493c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004940:	f7fc ff1c 	bl	800177c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8004944:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 8004946:	4a19      	ldr	r2, [pc, #100]	; (80049ac <HAL_DAC_MspInit+0xd4>)
 8004948:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 800494c:	2206      	movs	r2, #6
 800494e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004950:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 8004952:	2210      	movs	r2, #16
 8004954:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 8004958:	2200      	movs	r2, #0
 800495a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800495c:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 800495e:	2280      	movs	r2, #128	; 0x80
 8004960:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 8004964:	2200      	movs	r2, #0
 8004966:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 800496a:	2200      	movs	r2, #0
 800496c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800496e:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 8004970:	2200      	movs	r2, #0
 8004972:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 8004976:	2200      	movs	r2, #0
 8004978:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800497a:	480b      	ldr	r0, [pc, #44]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 800497c:	f7fc fcc8 	bl	8001310 <HAL_DMA_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8004986:	f7ff fb85 	bl	8004094 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a06      	ldr	r2, [pc, #24]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	4a05      	ldr	r2, [pc, #20]	; (80049a8 <HAL_DAC_MspInit+0xd0>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004996:	bf00      	nop
 8004998:	3728      	adds	r7, #40	; 0x28
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40007400 	.word	0x40007400
 80049a4:	40021000 	.word	0x40021000
 80049a8:	20004e64 	.word	0x20004e64
 80049ac:	40020030 	.word	0x40020030

080049b0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <HAL_QSPI_MspInit+0x7c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d128      	bne.n	8004a24 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80049d2:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <HAL_QSPI_MspInit+0x80>)
 80049d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d6:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <HAL_QSPI_MspInit+0x80>)
 80049d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049dc:	6513      	str	r3, [r2, #80]	; 0x50
 80049de:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <HAL_QSPI_MspInit+0x80>)
 80049e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_QSPI_MspInit+0x80>)
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	4a10      	ldr	r2, [pc, #64]	; (8004a30 <HAL_QSPI_MspInit+0x80>)
 80049f0:	f043 0310 	orr.w	r3, r3, #16
 80049f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049f6:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <HAL_QSPI_MspInit+0x80>)
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004a02:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004a06:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a10:	2303      	movs	r3, #3
 8004a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004a14:	230a      	movs	r3, #10
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4805      	ldr	r0, [pc, #20]	; (8004a34 <HAL_QSPI_MspInit+0x84>)
 8004a20:	f7fc feac 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004a24:	bf00      	nop
 8004a26:	3728      	adds	r7, #40	; 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	a0001000 	.word	0xa0001000
 8004a30:	40021000 	.word	0x40021000
 8004a34:	48001000 	.word	0x48001000

08004a38 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <HAL_QSPI_MspDeInit+0x30>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10a      	bne.n	8004a60 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8004a4a:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_QSPI_MspDeInit+0x34>)
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_QSPI_MspDeInit+0x34>)
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004a56:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8004a5a:	4805      	ldr	r0, [pc, #20]	; (8004a70 <HAL_QSPI_MspDeInit+0x38>)
 8004a5c:	f7fd f836 	bl	8001acc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	a0001000 	.word	0xa0001000
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	48001000 	.word	0x48001000

08004a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a84:	d113      	bne.n	8004aae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <HAL_TIM_Base_MspInit+0x44>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <HAL_TIM_Base_MspInit+0x44>)
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	6593      	str	r3, [r2, #88]	; 0x58
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_TIM_Base_MspInit+0x44>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	201c      	movs	r0, #28
 8004aa4:	f7fc f91f 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004aa8:	201c      	movs	r0, #28
 8004aaa:	f7fc f938 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000

08004abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aca:	b480      	push	{r7}
 8004acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ace:	e7fe      	b.n	8004ace <HardFault_Handler+0x4>

08004ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ad4:	e7fe      	b.n	8004ad4 <MemManage_Handler+0x4>

08004ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ada:	e7fe      	b.n	8004ada <BusFault_Handler+0x4>

08004adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ae0:	e7fe      	b.n	8004ae0 <UsageFault_Handler+0x4>

08004ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b10:	f7fb ffcc 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8004b1c:	4802      	ldr	r0, [pc, #8]	; (8004b28 <DMA1_Channel3_IRQHandler+0x10>)
 8004b1e:	f7fc fd4d 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20004e64 	.word	0x20004e64

08004b2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b30:	4802      	ldr	r0, [pc, #8]	; (8004b3c <TIM2_IRQHandler+0x10>)
 8004b32:	f7fe fc8d 	bl	8003450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20004eac 	.word	0x20004eac

08004b40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b44:	4b17      	ldr	r3, [pc, #92]	; (8004ba4 <SystemInit+0x64>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <SystemInit+0x64>)
 8004b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <SystemInit+0x68>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <SystemInit+0x68>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <SystemInit+0x68>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004b66:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <SystemInit+0x68>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ba8 <SystemInit+0x68>)
 8004b6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004b70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004b74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <SystemInit+0x68>)
 8004b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <SystemInit+0x68>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a09      	ldr	r2, [pc, #36]	; (8004ba8 <SystemInit+0x68>)
 8004b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b8a:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <SystemInit+0x68>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <SystemInit+0x64>)
 8004b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b96:	609a      	str	r2, [r3, #8]
#endif
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	e000ed00 	.word	0xe000ed00
 8004ba8:	40021000 	.word	0x40021000

08004bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004be4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004bb0:	f7ff ffc6 	bl	8004b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004bb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004bb6:	e003      	b.n	8004bc0 <LoopCopyDataInit>

08004bb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004bba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004bbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004bbe:	3104      	adds	r1, #4

08004bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004bc0:	480a      	ldr	r0, [pc, #40]	; (8004bec <LoopForever+0xa>)
	ldr	r3, =_edata
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004bc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004bc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004bc8:	d3f6      	bcc.n	8004bb8 <CopyDataInit>
	ldr	r2, =_sbss
 8004bca:	4a0a      	ldr	r2, [pc, #40]	; (8004bf4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004bcc:	e002      	b.n	8004bd4 <LoopFillZerobss>

08004bce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004bce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004bd0:	f842 3b04 	str.w	r3, [r2], #4

08004bd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <LoopForever+0x16>)
	cmp	r2, r3
 8004bd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004bd8:	d3f9      	bcc.n	8004bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bda:	f000 f857 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bde:	f7ff f81b 	bl	8003c18 <main>

08004be2 <LoopForever>:

LoopForever:
    b LoopForever
 8004be2:	e7fe      	b.n	8004be2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004be4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004be8:	08005548 	.word	0x08005548
	ldr	r0, =_sdata
 8004bec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004bf0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8004bf4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8004bf8:	20004f80 	.word	0x20004f80

08004bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bfc:	e7fe      	b.n	8004bfc <ADC1_2_IRQHandler>
	...

08004c00 <arm_sin_f32>:
 8004c00:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004c80 <arm_sin_f32+0x80>
 8004c04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004c08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c10:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004c14:	d504      	bpl.n	8004c20 <arm_sin_f32+0x20>
 8004c16:	ee17 3a90 	vmov	r3, s15
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c24:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004c84 <arm_sin_f32+0x84>
 8004c28:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004c2c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004c30:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004c34:	ee17 3a90 	vmov	r3, s15
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3e:	d21a      	bcs.n	8004c76 <arm_sin_f32+0x76>
 8004c40:	ee07 3a90 	vmov	s15, r3
 8004c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c48:	1c59      	adds	r1, r3, #1
 8004c4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <arm_sin_f32+0x88>)
 8004c50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004c54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c58:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004c5c:	ed93 7a00 	vldr	s14, [r3]
 8004c60:	edd2 6a00 	vldr	s13, [r2]
 8004c64:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004c68:	ee20 0a26 	vmul.f32	s0, s0, s13
 8004c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c70:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004c74:	4770      	bx	lr
 8004c76:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e7e6      	b.n	8004c4e <arm_sin_f32+0x4e>
 8004c80:	3e22f983 	.word	0x3e22f983
 8004c84:	44000000 	.word	0x44000000
 8004c88:	08004d3c 	.word	0x08004d3c

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4e0d      	ldr	r6, [pc, #52]	; (8004cc4 <__libc_init_array+0x38>)
 8004c90:	4c0d      	ldr	r4, [pc, #52]	; (8004cc8 <__libc_init_array+0x3c>)
 8004c92:	1ba4      	subs	r4, r4, r6
 8004c94:	10a4      	asrs	r4, r4, #2
 8004c96:	2500      	movs	r5, #0
 8004c98:	42a5      	cmp	r5, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	4e0b      	ldr	r6, [pc, #44]	; (8004ccc <__libc_init_array+0x40>)
 8004c9e:	4c0c      	ldr	r4, [pc, #48]	; (8004cd0 <__libc_init_array+0x44>)
 8004ca0:	f000 f820 	bl	8004ce4 <_init>
 8004ca4:	1ba4      	subs	r4, r4, r6
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	2500      	movs	r5, #0
 8004caa:	42a5      	cmp	r5, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cb4:	4798      	blx	r3
 8004cb6:	3501      	adds	r5, #1
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cbe:	4798      	blx	r3
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	08005540 	.word	0x08005540
 8004cc8:	08005540 	.word	0x08005540
 8004ccc:	08005540 	.word	0x08005540
 8004cd0:	08005544 	.word	0x08005544

08004cd4 <memset>:
 8004cd4:	4402      	add	r2, r0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d100      	bne.n	8004cde <memset+0xa>
 8004cdc:	4770      	bx	lr
 8004cde:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce2:	e7f9      	b.n	8004cd8 <memset+0x4>

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
