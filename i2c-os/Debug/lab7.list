
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b8  080073b8  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073c0  080073c0  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080073c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001334  200000f8  080074c0  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  080074c0  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdb8  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c54  00000000  00000000  0003cee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f8  00000000  00000000  00040b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016f0  00000000  00000000  00042430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a136  00000000  00000000  00043b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001652b  00000000  00000000  0006dc56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fff8c  00000000  00000000  00084181  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018410d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006978  00000000  00000000  00184188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007218 	.word	0x08007218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08007218 	.word	0x08007218

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f8ff 	bl	800077e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	2000      	movs	r0, #0
 8000582:	f006 f8f7 	bl	8006774 <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f006 f81f 	bl	80065d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	2000108c 	.word	0x2000108c

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	2000108c 	.word	0x2000108c

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8f7      	bhi.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	db0b      	blt.n	80006b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 021f 	and.w	r2, r3, #31
 80006a0:	4907      	ldr	r1, [pc, #28]	; (80006c0 <__NVIC_EnableIRQ+0x38>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	2001      	movs	r0, #1
 80006aa:	fa00 f202 	lsl.w	r2, r0, r2
 80006ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db0a      	blt.n	80006ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <__NVIC_SetPriority+0x4c>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ec:	e00a      	b.n	8000704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <__NVIC_SetPriority+0x50>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	3b04      	subs	r3, #4
 80006fc:	0112      	lsls	r2, r2, #4
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	440b      	add	r3, r1
 8000702:	761a      	strb	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2b04      	cmp	r3, #4
 8000734:	bf28      	it	cs
 8000736:	2304      	movcs	r3, #4
 8000738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3304      	adds	r3, #4
 800073e:	2b06      	cmp	r3, #6
 8000740:	d902      	bls.n	8000748 <NVIC_EncodePriority+0x30>
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b03      	subs	r3, #3
 8000746:	e000      	b.n	800074a <NVIC_EncodePriority+0x32>
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	f04f 32ff 	mov.w	r2, #4294967295
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	401a      	ands	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43d9      	mvns	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff4c 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a6:	f7ff ff61 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	68b9      	ldr	r1, [r7, #8]
 80007b0:	6978      	ldr	r0, [r7, #20]
 80007b2:	f7ff ffb1 	bl	8000718 <NVIC_EncodePriority>
 80007b6:	4602      	mov	r2, r0
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff80 	bl	80006c4 <__NVIC_SetPriority>
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff54 	bl	8000688 <__NVIC_EnableIRQ>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f6:	e17f      	b.n	8000af8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 8171 	beq.w	8000af2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d00b      	beq.n	8000830 <HAL_GPIO_Init+0x48>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d007      	beq.n	8000830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000824:	2b11      	cmp	r3, #17
 8000826:	d003      	beq.n	8000830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b12      	cmp	r3, #18
 800082e:	d130      	bne.n	8000892 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2203      	movs	r2, #3
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	68da      	ldr	r2, [r3, #12]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4313      	orrs	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000866:	2201      	movs	r2, #1
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4013      	ands	r3, r2
 8000874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	091b      	lsrs	r3, r3, #4
 800087c:	f003 0201 	and.w	r2, r3, #1
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4313      	orrs	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	2b03      	cmp	r3, #3
 800089c:	d118      	bne.n	80008d0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008a4:	2201      	movs	r2, #1
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	f003 0201 	and.w	r2, r3, #1
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0x128>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d123      	bne.n	8000958 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3208      	adds	r2, #8
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	691a      	ldr	r2, [r3, #16]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4313      	orrs	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	08da      	lsrs	r2, r3, #3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3208      	adds	r2, #8
 8000952:	6939      	ldr	r1, [r7, #16]
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0203 	and.w	r2, r3, #3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80ac 	beq.w	8000af2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b5e      	ldr	r3, [pc, #376]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a5d      	ldr	r2, [pc, #372]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b2:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <HAL_GPIO_Init+0x330>)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x242>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4e      	ldr	r2, [pc, #312]	; (8000b1c <HAL_GPIO_Init+0x334>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x23e>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4d      	ldr	r2, [pc, #308]	; (8000b20 <HAL_GPIO_Init+0x338>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x23a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4c      	ldr	r2, [pc, #304]	; (8000b24 <HAL_GPIO_Init+0x33c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x236>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4b      	ldr	r2, [pc, #300]	; (8000b28 <HAL_GPIO_Init+0x340>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x232>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4a      	ldr	r2, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x344>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x22e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a49      	ldr	r2, [pc, #292]	; (8000b30 <HAL_GPIO_Init+0x348>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x22a>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3c:	4936      	ldr	r1, [pc, #216]	; (8000b18 <HAL_GPIO_Init+0x330>)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a98:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aec:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f47f ae78 	bne.w	80007f8 <HAL_GPIO_Init+0x10>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000c00 	.word	0x48000c00
 8000b28:	48001000 	.word	0x48001000
 8000b2c:	48001400 	.word	0x48001400
 8000b30:	48001800 	.word	0x48001800
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000b46:	e0cd      	b.n	8000ce4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	683a      	ldr	r2, [r7, #0]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 80c0 	beq.w	8000cde <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000b5e:	4a68      	ldr	r2, [pc, #416]	; (8000d00 <HAL_GPIO_DeInit+0x1c8>)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b86:	d025      	beq.n	8000bd4 <HAL_GPIO_DeInit+0x9c>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a5e      	ldr	r2, [pc, #376]	; (8000d04 <HAL_GPIO_DeInit+0x1cc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d01f      	beq.n	8000bd0 <HAL_GPIO_DeInit+0x98>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a5d      	ldr	r2, [pc, #372]	; (8000d08 <HAL_GPIO_DeInit+0x1d0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d019      	beq.n	8000bcc <HAL_GPIO_DeInit+0x94>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a5c      	ldr	r2, [pc, #368]	; (8000d0c <HAL_GPIO_DeInit+0x1d4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d013      	beq.n	8000bc8 <HAL_GPIO_DeInit+0x90>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a5b      	ldr	r2, [pc, #364]	; (8000d10 <HAL_GPIO_DeInit+0x1d8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d00d      	beq.n	8000bc4 <HAL_GPIO_DeInit+0x8c>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a5a      	ldr	r2, [pc, #360]	; (8000d14 <HAL_GPIO_DeInit+0x1dc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d007      	beq.n	8000bc0 <HAL_GPIO_DeInit+0x88>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a59      	ldr	r2, [pc, #356]	; (8000d18 <HAL_GPIO_DeInit+0x1e0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d101      	bne.n	8000bbc <HAL_GPIO_DeInit+0x84>
 8000bb8:	2306      	movs	r3, #6
 8000bba:	e00c      	b.n	8000bd6 <HAL_GPIO_DeInit+0x9e>
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	e00a      	b.n	8000bd6 <HAL_GPIO_DeInit+0x9e>
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	e008      	b.n	8000bd6 <HAL_GPIO_DeInit+0x9e>
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	e006      	b.n	8000bd6 <HAL_GPIO_DeInit+0x9e>
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e004      	b.n	8000bd6 <HAL_GPIO_DeInit+0x9e>
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e002      	b.n	8000bd6 <HAL_GPIO_DeInit+0x9e>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <HAL_GPIO_DeInit+0x9e>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	f002 0203 	and.w	r2, r2, #3
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	4093      	lsls	r3, r2
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d132      	bne.n	8000c4c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000be6:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <HAL_GPIO_DeInit+0x1e4>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	494b      	ldr	r1, [pc, #300]	; (8000d1c <HAL_GPIO_DeInit+0x1e4>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000bf4:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <HAL_GPIO_DeInit+0x1e4>)
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	4947      	ldr	r1, [pc, #284]	; (8000d1c <HAL_GPIO_DeInit+0x1e4>)
 8000bfe:	4013      	ands	r3, r2
 8000c00:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000c02:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <HAL_GPIO_DeInit+0x1e4>)
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4944      	ldr	r1, [pc, #272]	; (8000d1c <HAL_GPIO_DeInit+0x1e4>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000c10:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <HAL_GPIO_DeInit+0x1e4>)
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	4940      	ldr	r1, [pc, #256]	; (8000d1c <HAL_GPIO_DeInit+0x1e4>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	220f      	movs	r2, #15
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000c2e:	4a34      	ldr	r2, [pc, #208]	; (8000d00 <HAL_GPIO_DeInit+0x1c8>)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3302      	adds	r3, #2
 8000c36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	4830      	ldr	r0, [pc, #192]	; (8000d00 <HAL_GPIO_DeInit+0x1c8>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	400a      	ands	r2, r1
 8000c46:	3302      	adds	r3, #2
 8000c48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2103      	movs	r1, #3
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	08da      	lsrs	r2, r3, #3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3208      	adds	r2, #8
 8000c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	08d2      	lsrs	r2, r2, #3
 8000c80:	4019      	ands	r1, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2103      	movs	r1, #3
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cce:	2101      	movs	r1, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	401a      	ands	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f47f af2b 	bne.w	8000b48 <HAL_GPIO_DeInit+0x10>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40010000 	.word	0x40010000
 8000d04:	48000400 	.word	0x48000400
 8000d08:	48000800 	.word	0x48000800
 8000d0c:	48000c00 	.word	0x48000c00
 8000d10:	48001000 	.word	0x48001000
 8000d14:	48001400 	.word	0x48001400
 8000d18:	48001800 	.word	0x48001800
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e001      	b.n	8000d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d60:	787b      	ldrb	r3, [r7, #1]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d6c:	e002      	b.n	8000d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f806 	bl	8000db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e081      	b.n	8000edc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f005 fc15 	bl	800661c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2224      	movs	r2, #36	; 0x24
 8000df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0201 	bic.w	r2, r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d107      	bne.n	8000e40 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	e006      	b.n	8000e4e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d104      	bne.n	8000e60 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e72:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e82:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	ea42 0103 	orr.w	r1, r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	021a      	lsls	r2, r3, #8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69d9      	ldr	r1, [r3, #28]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1a      	ldr	r2, [r3, #32]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 0201 	orr.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e021      	b.n	8000f3a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2224      	movs	r2, #36	; 0x24
 8000efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f005 fbc8 	bl	80066a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	817b      	strh	r3, [r7, #10]
 8000f56:	460b      	mov	r3, r1
 8000f58:	813b      	strh	r3, [r7, #8]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b20      	cmp	r3, #32
 8000f68:	f040 80f9 	bne.w	800115e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <HAL_I2C_Mem_Write+0x34>
 8000f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d105      	bne.n	8000f84 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e0ed      	b.n	8001160 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_I2C_Mem_Write+0x4e>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e0e6      	b.n	8001160 <HAL_I2C_Mem_Write+0x21c>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f9a:	f7ff fb15 	bl	80005c8 <HAL_GetTick>
 8000f9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2319      	movs	r3, #25
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f000 fac3 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e0d1      	b.n	8001160 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2221      	movs	r2, #33	; 0x21
 8000fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6a3a      	ldr	r2, [r7, #32]
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fe4:	88f8      	ldrh	r0, [r7, #6]
 8000fe6:	893a      	ldrh	r2, [r7, #8]
 8000fe8:	8979      	ldrh	r1, [r7, #10]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f9d3 	bl	80013a0 <I2C_RequestMemoryWrite>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e0a9      	b.n	8001160 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001010:	b29b      	uxth	r3, r3
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d90e      	bls.n	8001034 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001020:	b2da      	uxtb	r2, r3
 8001022:	8979      	ldrh	r1, [r7, #10]
 8001024:	2300      	movs	r3, #0
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 fba5 	bl	800177c <I2C_TransferConfig>
 8001032:	e00f      	b.n	8001054 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001038:	b29a      	uxth	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001042:	b2da      	uxtb	r2, r3
 8001044:	8979      	ldrh	r1, [r7, #10]
 8001046:	2300      	movs	r3, #0
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 fb94 	bl	800177c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 faad 	bl	80015b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e07b      	b.n	8001160 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b01      	subs	r3, #1
 8001086:	b29a      	uxth	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001090:	3b01      	subs	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800109c:	b29b      	uxth	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d034      	beq.n	800110c <HAL_I2C_Mem_Write+0x1c8>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d130      	bne.n	800110c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b0:	2200      	movs	r2, #0
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f000 fa3f 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e04d      	b.n	8001160 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	2bff      	cmp	r3, #255	; 0xff
 80010cc:	d90e      	bls.n	80010ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	22ff      	movs	r2, #255	; 0xff
 80010d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	8979      	ldrh	r1, [r7, #10]
 80010dc:	2300      	movs	r3, #0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 fb49 	bl	800177c <I2C_TransferConfig>
 80010ea:	e00f      	b.n	800110c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	8979      	ldrh	r1, [r7, #10]
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 fb38 	bl	800177c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001110:	b29b      	uxth	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d19e      	bne.n	8001054 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 fa8c 	bl	8001638 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e01a      	b.n	8001160 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2220      	movs	r2, #32
 8001130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6859      	ldr	r1, [r3, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_I2C_Mem_Write+0x224>)
 800113e:	400b      	ands	r3, r1
 8001140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2220      	movs	r2, #32
 8001146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800115e:	2302      	movs	r3, #2
  }
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	fe00e800 	.word	0xfe00e800

0800116c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	4603      	mov	r3, r0
 800117c:	817b      	strh	r3, [r7, #10]
 800117e:	460b      	mov	r3, r1
 8001180:	813b      	strh	r3, [r7, #8]
 8001182:	4613      	mov	r3, r2
 8001184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b20      	cmp	r3, #32
 8001190:	f040 80fd 	bne.w	800138e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_I2C_Mem_Read+0x34>
 800119a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0f1      	b.n	8001390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_I2C_Mem_Read+0x4e>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e0ea      	b.n	8001390 <HAL_I2C_Mem_Read+0x224>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011c2:	f7ff fa01 	bl	80005c8 <HAL_GetTick>
 80011c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2319      	movs	r3, #25
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f9af 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0d5      	b.n	8001390 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2222      	movs	r2, #34	; 0x22
 80011e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2240      	movs	r2, #64	; 0x40
 80011f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a3a      	ldr	r2, [r7, #32]
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001204:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800120c:	88f8      	ldrh	r0, [r7, #6]
 800120e:	893a      	ldrh	r2, [r7, #8]
 8001210:	8979      	ldrh	r1, [r7, #10]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	4603      	mov	r3, r0
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f913 	bl	8001448 <I2C_RequestMemoryRead>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0ad      	b.n	8001390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001238:	b29b      	uxth	r3, r3
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	d90e      	bls.n	800125c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	22ff      	movs	r2, #255	; 0xff
 8001242:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001248:	b2da      	uxtb	r2, r3
 800124a:	8979      	ldrh	r1, [r7, #10]
 800124c:	4b52      	ldr	r3, [pc, #328]	; (8001398 <HAL_I2C_Mem_Read+0x22c>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 fa91 	bl	800177c <I2C_TransferConfig>
 800125a:	e00f      	b.n	800127c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001260:	b29a      	uxth	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126a:	b2da      	uxtb	r2, r3
 800126c:	8979      	ldrh	r1, [r7, #10]
 800126e:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_I2C_Mem_Read+0x22c>)
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 fa80 	bl	800177c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	2104      	movs	r1, #4
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f956 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e07c      	b.n	8001390 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d034      	beq.n	800133c <HAL_I2C_Mem_Read+0x1d0>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d130      	bne.n	800133c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 f927 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e04d      	b.n	8001390 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	2bff      	cmp	r3, #255	; 0xff
 80012fc:	d90e      	bls.n	800131c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	22ff      	movs	r2, #255	; 0xff
 8001302:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001308:	b2da      	uxtb	r2, r3
 800130a:	8979      	ldrh	r1, [r7, #10]
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 fa31 	bl	800177c <I2C_TransferConfig>
 800131a:	e00f      	b.n	800133c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001320:	b29a      	uxth	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132a:	b2da      	uxtb	r2, r3
 800132c:	8979      	ldrh	r1, [r7, #10]
 800132e:	2300      	movs	r3, #0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 fa20 	bl	800177c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001340:	b29b      	uxth	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d19a      	bne.n	800127c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 f974 	bl	8001638 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e01a      	b.n	8001390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2220      	movs	r2, #32
 8001360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_I2C_Mem_Read+0x230>)
 800136e:	400b      	ands	r3, r1
 8001370:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2220      	movs	r2, #32
 8001376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800138e:	2302      	movs	r3, #2
  }
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	80002400 	.word	0x80002400
 800139c:	fe00e800 	.word	0xfe00e800

080013a0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	817b      	strh	r3, [r7, #10]
 80013b2:	460b      	mov	r3, r1
 80013b4:	813b      	strh	r3, [r7, #8]
 80013b6:	4613      	mov	r3, r2
 80013b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	8979      	ldrh	r1, [r7, #10]
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <I2C_RequestMemoryWrite+0xa4>)
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 f9d7 	bl	800177c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	69b9      	ldr	r1, [r7, #24]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f8f0 	bl	80015b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e02c      	b.n	800143c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013e8:	893b      	ldrh	r3, [r7, #8]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
 80013f2:	e015      	b.n	8001420 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013f4:	893b      	ldrh	r3, [r7, #8]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	69b9      	ldr	r1, [r7, #24]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f8d6 	bl	80015b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e012      	b.n	800143c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001416:	893b      	ldrh	r3, [r7, #8]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	2200      	movs	r2, #0
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f884 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	80002000 	.word	0x80002000

08001448 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af02      	add	r7, sp, #8
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	4608      	mov	r0, r1
 8001452:	4611      	mov	r1, r2
 8001454:	461a      	mov	r2, r3
 8001456:	4603      	mov	r3, r0
 8001458:	817b      	strh	r3, [r7, #10]
 800145a:	460b      	mov	r3, r1
 800145c:	813b      	strh	r3, [r7, #8]
 800145e:	4613      	mov	r3, r2
 8001460:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	8979      	ldrh	r1, [r7, #10]
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <I2C_RequestMemoryRead+0xa4>)
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f984 	bl	800177c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	69b9      	ldr	r1, [r7, #24]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 f89d 	bl	80015b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e02c      	b.n	80014e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d105      	bne.n	800149a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800148e:	893b      	ldrh	r3, [r7, #8]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
 8001498:	e015      	b.n	80014c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800149a:	893b      	ldrh	r3, [r7, #8]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	b29b      	uxth	r3, r3
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f883 	bl	80015b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e012      	b.n	80014e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014bc:	893b      	ldrh	r3, [r7, #8]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2200      	movs	r2, #0
 80014ce:	2140      	movs	r1, #64	; 0x40
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f831 	bl	8001538 <I2C_WaitOnFlagUntilTimeout>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	80002000 	.word	0x80002000

080014f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b02      	cmp	r3, #2
 8001504:	d103      	bne.n	800150e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d007      	beq.n	800152c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	619a      	str	r2, [r3, #24]
  }
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001548:	e022      	b.n	8001590 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d01e      	beq.n	8001590 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001552:	f7ff f839 	bl	80005c8 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d302      	bcc.n	8001568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d113      	bne.n	8001590 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f043 0220 	orr.w	r2, r3, #32
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e00f      	b.n	80015b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4013      	ands	r3, r2
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	429a      	cmp	r2, r3
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d0cd      	beq.n	800154a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015c4:	e02c      	b.n	8001620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f870 	bl	80016b0 <I2C_IsAcknowledgeFailed>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02a      	b.n	8001630 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d01e      	beq.n	8001620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e2:	f7fe fff1 	bl	80005c8 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d302      	bcc.n	80015f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d113      	bne.n	8001620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f043 0220 	orr.w	r2, r3, #32
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2220      	movs	r2, #32
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e007      	b.n	8001630 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b02      	cmp	r3, #2
 800162c:	d1cb      	bne.n	80015c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001644:	e028      	b.n	8001698 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f830 	bl	80016b0 <I2C_IsAcknowledgeFailed>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e026      	b.n	80016a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165a:	f7fe ffb5 	bl	80005c8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	429a      	cmp	r2, r3
 8001668:	d302      	bcc.n	8001670 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d113      	bne.n	8001698 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2220      	movs	r2, #32
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e007      	b.n	80016a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d1cf      	bne.n	8001646 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d151      	bne.n	800176e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ca:	e022      	b.n	8001712 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d01e      	beq.n	8001712 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d4:	f7fe ff78 	bl	80005c8 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d302      	bcc.n	80016ea <I2C_IsAcknowledgeFailed+0x3a>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d113      	bne.n	8001712 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f043 0220 	orr.w	r2, r3, #32
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e02e      	b.n	8001770 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	2b20      	cmp	r3, #32
 800171e:	d1d5      	bne.n	80016cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2210      	movs	r2, #16
 8001726:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2220      	movs	r2, #32
 800172e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff fedd 	bl	80014f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <I2C_IsAcknowledgeFailed+0xc8>)
 8001742:	400b      	ands	r3, r1
 8001744:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f043 0204 	orr.w	r2, r3, #4
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2220      	movs	r2, #32
 8001756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	fe00e800 	.word	0xfe00e800

0800177c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	817b      	strh	r3, [r7, #10]
 800178a:	4613      	mov	r3, r2
 800178c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	0d5b      	lsrs	r3, r3, #21
 8001798:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <I2C_TransferConfig+0x58>)
 800179e:	430b      	orrs	r3, r1
 80017a0:	43db      	mvns	r3, r3
 80017a2:	ea02 0103 	and.w	r1, r2, r3
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ac:	7a7b      	ldrb	r3, [r7, #9]
 80017ae:	041b      	lsls	r3, r3, #16
 80017b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	431a      	orrs	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	03ff63ff 	.word	0x03ff63ff

080017d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d138      	bne.n	8001860 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e032      	b.n	8001862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2224      	movs	r2, #36	; 0x24
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800182a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	e000      	b.n	8001862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001860:	2302      	movs	r3, #2
  }
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b20      	cmp	r3, #32
 8001882:	d139      	bne.n	80018f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800188e:	2302      	movs	r3, #2
 8001890:	e033      	b.n	80018fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2224      	movs	r2, #36	; 0x24
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_PWREx_GetVoltageRange+0x18>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40007000 	.word	0x40007000

08001924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001932:	d130      	bne.n	8001996 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800193c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001940:	d038      	beq.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001950:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2232      	movs	r2, #50	; 0x32
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9b      	lsrs	r3, r3, #18
 8001964:	3301      	adds	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001968:	e002      	b.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3b01      	subs	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197c:	d102      	bne.n	8001984 <HAL_PWREx_ControlVoltageScaling+0x60>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f2      	bne.n	800196a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001990:	d110      	bne.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e00f      	b.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800199e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a2:	d007      	beq.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40007000 	.word	0x40007000
 80019c8:	20000090 	.word	0x20000090
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e3d4      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e2:	4ba1      	ldr	r3, [pc, #644]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ec:	4b9e      	ldr	r3, [pc, #632]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80e4 	beq.w	8001bcc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4a>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	f040 808b 	bne.w	8001b28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f040 8087 	bne.w	8001b28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a1a:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x62>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e3ac      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_RCC_OscConfig+0x7c>
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a4a:	e005      	b.n	8001a58 <HAL_RCC_OscConfig+0x88>
 8001a4c:	4b86      	ldr	r3, [pc, #536]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d223      	bcs.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fd71 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e38d      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a70:	4b7d      	ldr	r3, [pc, #500]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a7c      	ldr	r2, [pc, #496]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4977      	ldr	r1, [pc, #476]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8e:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	4972      	ldr	r1, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
 8001aa2:	e025      	b.n	8001af0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa4:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6f      	ldr	r2, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	496a      	ldr	r1, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac2:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	4965      	ldr	r1, [pc, #404]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fd31 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e34d      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af0:	f000 fc36 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8001af4:	4601      	mov	r1, r0
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	4a5a      	ldr	r2, [pc, #360]	; (8001c6c <HAL_RCC_OscConfig+0x29c>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	fa21 f303 	lsr.w	r3, r1, r3
 8001b0c:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_RCC_OscConfig+0x2a0>)
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b10:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <HAL_RCC_OscConfig+0x2a4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 fe2d 	bl	8006774 <HAL_InitTick>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d052      	beq.n	8001bca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	e331      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d032      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b30:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b3c:	f7fe fd44 	bl	80005c8 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b44:	f7fe fd40 	bl	80005c8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e31a      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a40      	ldr	r2, [pc, #256]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	493b      	ldr	r1, [pc, #236]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	4936      	ldr	r1, [pc, #216]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
 8001b94:	e01a      	b.n	8001bcc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a33      	ldr	r2, [pc, #204]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba2:	f7fe fd11 	bl	80005c8 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001baa:	f7fe fd0d 	bl	80005c8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e2e7      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x1da>
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d074      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x21a>
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d10e      	bne.n	8001c02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d064      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d160      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e2c4      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x24a>
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e01d      	b.n	8001c56 <HAL_RCC_OscConfig+0x286>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x26e>
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e00b      	b.n	8001c56 <HAL_RCC_OscConfig+0x286>
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x298>)
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7fe fcb3 	bl	80005c8 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c64:	e011      	b.n	8001c8a <HAL_RCC_OscConfig+0x2ba>
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	0800733c 	.word	0x0800733c
 8001c70:	20000090 	.word	0x20000090
 8001c74:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7fe fca6 	bl	80005c8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e280      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	4baf      	ldr	r3, [pc, #700]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2a8>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7fe fc96 	bl	80005c8 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7fe fc92 	bl	80005c8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e26c      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cb2:	4ba5      	ldr	r3, [pc, #660]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2d0>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d060      	beq.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x310>
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d119      	bne.n	8001d0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d116      	bne.n	8001d0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce0:	4b99      	ldr	r3, [pc, #612]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x328>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e249      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b93      	ldr	r3, [pc, #588]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	4990      	ldr	r1, [pc, #576]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d0c:	e040      	b.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d023      	beq.n	8001d5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d16:	4b8c      	ldr	r3, [pc, #560]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a8b      	ldr	r2, [pc, #556]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7fe fc51 	bl	80005c8 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7fe fc4d 	bl	80005c8 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e227      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3c:	4b82      	ldr	r3, [pc, #520]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b7f      	ldr	r3, [pc, #508]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	497c      	ldr	r1, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e018      	b.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5e:	4b7a      	ldr	r3, [pc, #488]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a79      	ldr	r2, [pc, #484]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7fe fc2d 	bl	80005c8 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7fe fc29 	bl	80005c8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e203      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d84:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d03c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01c      	beq.n	8001dde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da4:	4b68      	ldr	r3, [pc, #416]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001daa:	4a67      	ldr	r2, [pc, #412]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7fe fc08 	bl	80005c8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7fe fc04 	bl	80005c8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1de      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dce:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ef      	beq.n	8001dbc <HAL_RCC_OscConfig+0x3ec>
 8001ddc:	e01b      	b.n	8001e16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de4:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7fe fbeb 	bl	80005c8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df6:	f7fe fbe7 	bl	80005c8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e1c1      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e08:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ef      	bne.n	8001df6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80a6 	beq.w	8001f70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e28:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	4a43      	ldr	r2, [pc, #268]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e40:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e50:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <HAL_RCC_OscConfig+0x57c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d118      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCC_OscConfig+0x57c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a3a      	ldr	r2, [pc, #232]	; (8001f4c <HAL_RCC_OscConfig+0x57c>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e68:	f7fe fbae 	bl	80005c8 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e70:	f7fe fbaa 	bl	80005c8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e184      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_RCC_OscConfig+0x57c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4d8>
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea6:	e024      	b.n	8001ef2 <HAL_RCC_OscConfig+0x522>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d110      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x502>
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed0:	e00f      	b.n	8001ef2 <HAL_RCC_OscConfig+0x522>
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001eea:	f023 0304 	bic.w	r3, r3, #4
 8001eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efa:	f7fe fb65 	bl	80005c8 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7fe fb61 	bl	80005c8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e139      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ed      	beq.n	8001f02 <HAL_RCC_OscConfig+0x532>
 8001f26:	e01a      	b.n	8001f5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7fe fb4e 	bl	80005c8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2e:	e00f      	b.n	8001f50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7fe fb4a 	bl	80005c8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d906      	bls.n	8001f50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e122      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f50:	4b90      	ldr	r3, [pc, #576]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e8      	bne.n	8001f30 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5e:	7ffb      	ldrb	r3, [r7, #31]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f64:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4a8a      	ldr	r2, [pc, #552]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8001f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8108 	beq.w	800218a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	f040 80d0 	bne.w	8002124 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f84:	4b83      	ldr	r3, [pc, #524]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d130      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d127      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d11f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fc4:	2a07      	cmp	r2, #7
 8001fc6:	bf14      	ite	ne
 8001fc8:	2201      	movne	r2, #1
 8001fca:	2200      	moveq	r2, #0
 8001fcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d113      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	085b      	lsrs	r3, r3, #1
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d06e      	beq.n	80020d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d069      	beq.n	80020d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002000:	4b64      	ldr	r3, [pc, #400]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800200c:	4b61      	ldr	r3, [pc, #388]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b7      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800201c:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5c      	ldr	r2, [pc, #368]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002028:	f7fe face 	bl	80005c8 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe faca 	bl	80005c8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0a4      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002042:	4b54      	ldr	r3, [pc, #336]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204e:	4b51      	ldr	r3, [pc, #324]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	4b51      	ldr	r3, [pc, #324]	; (8002198 <HAL_RCC_OscConfig+0x7c8>)
 8002054:	4013      	ands	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800205e:	3a01      	subs	r2, #1
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002068:	0212      	lsls	r2, r2, #8
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002070:	0852      	lsrs	r2, r2, #1
 8002072:	3a01      	subs	r2, #1
 8002074:	0552      	lsls	r2, r2, #21
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800207c:	0852      	lsrs	r2, r2, #1
 800207e:	3a01      	subs	r2, #1
 8002080:	0652      	lsls	r2, r2, #25
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002088:	0912      	lsrs	r2, r2, #4
 800208a:	0452      	lsls	r2, r2, #17
 800208c:	430a      	orrs	r2, r1
 800208e:	4941      	ldr	r1, [pc, #260]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002094:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a0:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020ac:	f7fe fa8c 	bl	80005c8 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fa88 	bl	80005c8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e062      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c6:	4b33      	ldr	r3, [pc, #204]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d2:	e05a      	b.n	800218a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e059      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d152      	bne.n	800218a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 80020ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f0:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a27      	ldr	r2, [pc, #156]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020fc:	f7fe fa64 	bl	80005c8 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe fa60 	bl	80005c8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e03a      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x734>
 8002122:	e032      	b.n	800218a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d02d      	beq.n	8002186 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002134:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002142:	4b14      	ldr	r3, [pc, #80]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4a13      	ldr	r2, [pc, #76]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002148:	f023 0303 	bic.w	r3, r3, #3
 800214c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 8002154:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fa33 	bl	80005c8 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe fa2f 	bl	80005c8 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e009      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_OscConfig+0x7c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x796>
 8002184:	e001      	b.n	800218a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	f99d808c 	.word	0xf99d808c

0800219c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0c8      	b.n	8002342 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_RCC_ClockConfig+0x1b0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_RCC_ClockConfig+0x1b0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4961      	ldr	r1, [pc, #388]	; (800234c <HAL_RCC_ClockConfig+0x1b0>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b5f      	ldr	r3, [pc, #380]	; (800234c <HAL_RCC_ClockConfig+0x1b0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0b0      	b.n	8002342 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d04c      	beq.n	8002286 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f4:	4b56      	ldr	r3, [pc, #344]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d121      	bne.n	8002244 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e09e      	b.n	8002342 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d107      	bne.n	800221c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d115      	bne.n	8002244 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e092      	b.n	8002342 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002224:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e086      	b.n	8002342 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002234:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e07e      	b.n	8002342 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002244:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 0203 	bic.w	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	493f      	ldr	r1, [pc, #252]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002256:	f7fe f9b7 	bl	80005c8 <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225c:	e00a      	b.n	8002274 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225e:	f7fe f9b3 	bl	80005c8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e066      	b.n	8002342 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 020c 	and.w	r2, r3, #12
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	429a      	cmp	r2, r3
 8002284:	d1eb      	bne.n	800225e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	492c      	ldr	r1, [pc, #176]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_RCC_ClockConfig+0x1b0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d210      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_RCC_ClockConfig+0x1b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4924      	ldr	r1, [pc, #144]	; (800234c <HAL_RCC_ClockConfig+0x1b0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_RCC_ClockConfig+0x1b0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e036      	b.n	8002342 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4918      	ldr	r1, [pc, #96]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4910      	ldr	r1, [pc, #64]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002312:	f000 f825 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8002316:	4601      	mov	r1, r0
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	5cd3      	ldrb	r3, [r2, r3]
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	fa21 f303 	lsr.w	r3, r1, r3
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f004 fa1c 	bl	8006774 <HAL_InitTick>
 800233c:	4603      	mov	r3, r0
 800233e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002340:	7afb      	ldrb	r3, [r7, #11]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000
 8002350:	40021000 	.word	0x40021000
 8002354:	0800733c 	.word	0x0800733c
 8002358:	20000090 	.word	0x20000090
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x34>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d121      	bne.n	80023d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d11e      	bne.n	80023d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002394:	4b33      	ldr	r3, [pc, #204]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e005      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023bc:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d102      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e004      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCC_GetSysClockFreq+0x110>)
 80023e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d133      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0xa4>
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0xaa>
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002406:	617b      	str	r3, [r7, #20]
      break;
 8002408:	e005      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_GetSysClockFreq+0x110>)
 800240c:	617b      	str	r3, [r7, #20]
      break;
 800240e:	e002      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	617b      	str	r3, [r7, #20]
      break;
 8002414:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	3301      	adds	r3, #1
 8002422:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	fb02 f203 	mul.w	r2, r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_GetSysClockFreq+0x104>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0e5b      	lsrs	r3, r3, #25
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	3301      	adds	r3, #1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002456:	69bb      	ldr	r3, [r7, #24]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3724      	adds	r7, #36	; 0x24
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000
 8002468:	08007354 	.word	0x08007354
 800246c:	00f42400 	.word	0x00f42400
 8002470:	007a1200 	.word	0x007a1200

08002474 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCC_GetHCLKFreq+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000090 	.word	0x20000090

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002490:	f7ff fff0 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8002494:	4601      	mov	r1, r0
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000
 80024b4:	0800734c 	.word	0x0800734c

080024b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024bc:	f7ff ffda 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 80024c0:	4601      	mov	r1, r0
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0adb      	lsrs	r3, r3, #11
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	0800734c 	.word	0x0800734c

080024e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	220f      	movs	r2, #15
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_GetClockConfig+0x5c>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0203 	and.w	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_RCC_GetClockConfig+0x5c>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_RCC_GetClockConfig+0x5c>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_GetClockConfig+0x5c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	08db      	lsrs	r3, r3, #3
 800251e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_RCC_GetClockConfig+0x60>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0207 	and.w	r2, r3, #7
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	601a      	str	r2, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	40022000 	.word	0x40022000

08002548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002560:	f7ff f9d2 	bl	8001908 <HAL_PWREx_GetVoltageRange>
 8002564:	6178      	str	r0, [r7, #20]
 8002566:	e014      	b.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	4a24      	ldr	r2, [pc, #144]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6593      	str	r3, [r2, #88]	; 0x58
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002580:	f7ff f9c2 	bl	8001908 <HAL_PWREx_GetVoltageRange>
 8002584:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d10b      	bne.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d919      	bls.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2ba0      	cmp	r3, #160	; 0xa0
 80025a4:	d902      	bls.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a6:	2302      	movs	r3, #2
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e013      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025ac:	2301      	movs	r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e010      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	d902      	bls.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025b8:	2303      	movs	r3, #3
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e00a      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d102      	bne.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025c4:	2302      	movs	r3, #2
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	e004      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b70      	cmp	r3, #112	; 0x70
 80025ce:	d101      	bne.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d0:	2301      	movs	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0207 	bic.w	r2, r3, #7
 80025dc:	4909      	ldr	r1, [pc, #36]	; (8002604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	40022000 	.word	0x40022000

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002610:	2300      	movs	r3, #0
 8002612:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002614:	2300      	movs	r3, #0
 8002616:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03f      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262c:	d01c      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800262e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002632:	d802      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002638:	e01f      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800263a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800263e:	d003      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002640:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002644:	d01c      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002646:	e018      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002648:	4b85      	ldr	r3, [pc, #532]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a84      	ldr	r2, [pc, #528]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002654:	e015      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fab9 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002662:	4603      	mov	r3, r0
 8002664:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002666:	e00c      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3320      	adds	r3, #32
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fba0 	bl	8002db4 <RCCEx_PLLSAI2_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002678:	e003      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	74fb      	strb	r3, [r7, #19]
      break;
 800267e:	e000      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10b      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002688:	4b75      	ldr	r3, [pc, #468]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002696:	4972      	ldr	r1, [pc, #456]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800269e:	e001      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d03f      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d01c      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80026ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026be:	d802      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00e      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80026c4:	e01f      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80026c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ca:	d003      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80026cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026d0:	d01c      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80026d2:	e018      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d4:	4b62      	ldr	r3, [pc, #392]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a61      	ldr	r2, [pc, #388]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026e0:	e015      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fa73 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f2:	e00c      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3320      	adds	r3, #32
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fb5a 	bl	8002db4 <RCCEx_PLLSAI2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	74fb      	strb	r3, [r7, #19]
      break;
 800270a:	e000      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800270c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002714:	4b52      	ldr	r3, [pc, #328]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002722:	494f      	ldr	r1, [pc, #316]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800272a:	e001      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a0 	beq.w	800287e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002762:	6593      	str	r3, [r2, #88]	; 0x58
 8002764:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002770:	2301      	movs	r3, #1
 8002772:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002780:	f7fd ff22 	bl	80005c8 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002786:	e009      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fd ff1e 	bl	80005c8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	74fb      	strb	r3, [r7, #19]
        break;
 800279a:	e005      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ef      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d019      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	4a20      	ldr	r2, [pc, #128]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fd fedd 	bl	80005c8 <HAL_GetTick>
 800280e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002810:	e00b      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fd fed9 	bl	80005c8 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d902      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	74fb      	strb	r3, [r7, #19]
            break;
 8002828:	e006      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ec      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002856:	e009      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
 800285c:	e006      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286c:	7c7b      	ldrb	r3, [r7, #17]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b9e      	ldr	r3, [pc, #632]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	4a9d      	ldr	r2, [pc, #628]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800288a:	4b98      	ldr	r3, [pc, #608]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f023 0203 	bic.w	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	4994      	ldr	r1, [pc, #592]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ac:	4b8f      	ldr	r3, [pc, #572]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f023 020c 	bic.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	498c      	ldr	r1, [pc, #560]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ce:	4b87      	ldr	r3, [pc, #540]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4983      	ldr	r1, [pc, #524]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028f0:	4b7e      	ldr	r3, [pc, #504]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	497b      	ldr	r1, [pc, #492]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002912:	4b76      	ldr	r3, [pc, #472]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002920:	4972      	ldr	r1, [pc, #456]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002934:	4b6d      	ldr	r3, [pc, #436]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	496a      	ldr	r1, [pc, #424]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	4961      	ldr	r1, [pc, #388]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002978:	4b5c      	ldr	r3, [pc, #368]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	4959      	ldr	r1, [pc, #356]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800299a:	4b54      	ldr	r3, [pc, #336]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a8:	4950      	ldr	r1, [pc, #320]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	4948      	ldr	r1, [pc, #288]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029de:	4b43      	ldr	r3, [pc, #268]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	493f      	ldr	r1, [pc, #252]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d028      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a00:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0e:	4937      	ldr	r1, [pc, #220]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a31      	ldr	r2, [pc, #196]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a2a:	60d3      	str	r3, [r2, #12]
 8002a2c:	e011      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f8c8 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	491f      	ldr	r1, [pc, #124]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a88:	60d3      	str	r3, [r2, #12]
 8002a8a:	e011      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f899 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02b      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aca:	4908      	ldr	r1, [pc, #32]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ada:	d109      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a02      	ldr	r2, [pc, #8]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
 8002ae8:	e014      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f867 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02f      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2e:	4928      	ldr	r1, [pc, #160]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f844 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d014      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	74bb      	strb	r3, [r7, #18]
 8002b5a:	e011      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3320      	adds	r3, #32
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f921 	bl	8002db4 <RCCEx_PLLSAI2_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9a:	490d      	ldr	r1, [pc, #52]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bbe:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bee:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0203 	and.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d10d      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
       ||
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c06:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
       ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d044      	beq.n	8002ca4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e041      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d00c      	beq.n	8002c42 <RCCEx_PLLSAI1_Config+0x6e>
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d013      	beq.n	8002c54 <RCCEx_PLLSAI1_Config+0x80>
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d120      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c30:	4b5f      	ldr	r3, [pc, #380]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d11d      	bne.n	8002c78 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c40:	e01a      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c52:	e013      	b.n	8002c7c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c54:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10f      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c70:	e006      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      break;
 8002c76:	e004      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c78:	bf00      	nop
 8002c7a:	e002      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c7c:	bf00      	nop
 8002c7e:	e000      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c80:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c88:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	4944      	ldr	r1, [pc, #272]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d17d      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002caa:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a40      	ldr	r2, [pc, #256]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb6:	f7fd fc87 	bl	80005c8 <HAL_GetTick>
 8002cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cbc:	e009      	b.n	8002cd2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cbe:	f7fd fc83 	bl	80005c8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d902      	bls.n	8002cd2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	73fb      	strb	r3, [r7, #15]
        break;
 8002cd0:	e005      	b.n	8002cde <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ef      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d160      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d111      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6892      	ldr	r2, [r2, #8]
 8002cfa:	0211      	lsls	r1, r2, #8
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68d2      	ldr	r2, [r2, #12]
 8002d00:	0912      	lsrs	r2, r2, #4
 8002d02:	0452      	lsls	r2, r2, #17
 8002d04:	430a      	orrs	r2, r1
 8002d06:	492a      	ldr	r1, [pc, #168]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	610b      	str	r3, [r1, #16]
 8002d0c:	e027      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d112      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	0211      	lsls	r1, r2, #8
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6912      	ldr	r2, [r2, #16]
 8002d2a:	0852      	lsrs	r2, r2, #1
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0552      	lsls	r2, r2, #21
 8002d30:	430a      	orrs	r2, r1
 8002d32:	491f      	ldr	r1, [pc, #124]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	610b      	str	r3, [r1, #16]
 8002d38:	e011      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6892      	ldr	r2, [r2, #8]
 8002d4a:	0211      	lsls	r1, r2, #8
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6952      	ldr	r2, [r2, #20]
 8002d50:	0852      	lsrs	r2, r2, #1
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0652      	lsls	r2, r2, #25
 8002d56:	430a      	orrs	r2, r1
 8002d58:	4915      	ldr	r1, [pc, #84]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fd fc2d 	bl	80005c8 <HAL_GetTick>
 8002d6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d70:	e009      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d72:	f7fd fc29 	bl	80005c8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d902      	bls.n	8002d86 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	73fb      	strb	r3, [r7, #15]
          break;
 8002d84:	e005      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ef      	beq.n	8002d72 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4903      	ldr	r1, [pc, #12]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000

08002db4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dc2:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dce:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0203 	and.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d10d      	bne.n	8002dfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
       ||
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002de6:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
       ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d044      	beq.n	8002e84 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e041      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d00c      	beq.n	8002e22 <RCCEx_PLLSAI2_Config+0x6e>
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d013      	beq.n	8002e34 <RCCEx_PLLSAI2_Config+0x80>
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d120      	bne.n	8002e52 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e10:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11d      	bne.n	8002e58 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e01a      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d116      	bne.n	8002e5c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e32:	e013      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e34:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e40:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e50:	e006      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
      break;
 8002e56:	e004      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e002      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e60:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e68:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	4939      	ldr	r1, [pc, #228]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d167      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e96:	f7fd fb97 	bl	80005c8 <HAL_GetTick>
 8002e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e9c:	e009      	b.n	8002eb2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e9e:	f7fd fb93 	bl	80005c8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d902      	bls.n	8002eb2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb0:	e005      	b.n	8002ebe <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ef      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d14a      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d111      	bne.n	8002eee <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	0211      	lsls	r1, r2, #8
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68d2      	ldr	r2, [r2, #12]
 8002ee0:	0912      	lsrs	r2, r2, #4
 8002ee2:	0452      	lsls	r2, r2, #17
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	491f      	ldr	r1, [pc, #124]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	614b      	str	r3, [r1, #20]
 8002eec:	e011      	b.n	8002f12 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ef6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	0211      	lsls	r1, r2, #8
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6912      	ldr	r2, [r2, #16]
 8002f04:	0852      	lsrs	r2, r2, #1
 8002f06:	3a01      	subs	r2, #1
 8002f08:	0652      	lsls	r2, r2, #25
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	4915      	ldr	r1, [pc, #84]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fd fb53 	bl	80005c8 <HAL_GetTick>
 8002f22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f24:	e009      	b.n	8002f3a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f26:	f7fd fb4f 	bl	80005c8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	73fb      	strb	r3, [r7, #15]
          break;
 8002f38:	e005      	b.n	8002f46 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ef      	beq.n	8002f26 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e049      	b.n	800300e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f841 	bl	8003016 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 f9f8 	bl	800339c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d001      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e04f      	b.n	80030e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01d      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306e:	d018      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_TIM_Base_Start_IT+0xd0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_TIM_Base_Start_IT+0xd4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_TIM_Base_Start_IT+0x76>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_TIM_Base_Start_IT+0xd8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d115      	bne.n	80030ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_TIM_Base_Start_IT+0xdc>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d015      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0xb4>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d011      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030cc:	e008      	b.n	80030e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e000      	b.n	80030e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40000c00 	.word	0x40000c00
 8003100:	40013400 	.word	0x40013400
 8003104:	40014000 	.word	0x40014000
 8003108:	00010007 	.word	0x00010007

0800310c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	d122      	bne.n	8003168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b02      	cmp	r3, #2
 800312e:	d11b      	bne.n	8003168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0202 	mvn.w	r2, #2
 8003138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f905 	bl	800335e <HAL_TIM_IC_CaptureCallback>
 8003154:	e005      	b.n	8003162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8f7 	bl	800334a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f908 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d122      	bne.n	80031bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d11b      	bne.n	80031bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0204 	mvn.w	r2, #4
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8db 	bl	800335e <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8cd 	bl	800334a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8de 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d122      	bne.n	8003210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d11b      	bne.n	8003210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0208 	mvn.w	r2, #8
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2204      	movs	r2, #4
 80031e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8b1 	bl	800335e <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8a3 	bl	800334a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8b4 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b10      	cmp	r3, #16
 800321c:	d122      	bne.n	8003264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b10      	cmp	r3, #16
 800322a:	d11b      	bne.n	8003264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0210 	mvn.w	r2, #16
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2208      	movs	r2, #8
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f887 	bl	800335e <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f879 	bl	800334a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f88a 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10e      	bne.n	8003290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d107      	bne.n	8003290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0201 	mvn.w	r2, #1
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f002 ff12 	bl	80060b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b80      	cmp	r3, #128	; 0x80
 800329c:	d10e      	bne.n	80032bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d107      	bne.n	80032bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f914 	bl	80034e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ca:	d10e      	bne.n	80032ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b80      	cmp	r3, #128	; 0x80
 80032d8:	d107      	bne.n	80032ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f907 	bl	80034f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d10e      	bne.n	8003316 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d107      	bne.n	8003316 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800330e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f838 	bl	8003386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b20      	cmp	r3, #32
 8003322:	d10e      	bne.n	8003342 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b20      	cmp	r3, #32
 8003330:	d107      	bne.n	8003342 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f06f 0220 	mvn.w	r2, #32
 800333a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f8c7 	bl	80034d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <TIM_Base_SetConfig+0x114>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d00f      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a3d      	ldr	r2, [pc, #244]	; (80034b4 <TIM_Base_SetConfig+0x118>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00b      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a3c      	ldr	r2, [pc, #240]	; (80034b8 <TIM_Base_SetConfig+0x11c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d007      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3b      	ldr	r2, [pc, #236]	; (80034bc <TIM_Base_SetConfig+0x120>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3a      	ldr	r2, [pc, #232]	; (80034c0 <TIM_Base_SetConfig+0x124>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d108      	bne.n	80033ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <TIM_Base_SetConfig+0x114>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d01b      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <TIM_Base_SetConfig+0x118>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d017      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <TIM_Base_SetConfig+0x11c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <TIM_Base_SetConfig+0x120>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00f      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <TIM_Base_SetConfig+0x124>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <TIM_Base_SetConfig+0x128>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <TIM_Base_SetConfig+0x12c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a26      	ldr	r2, [pc, #152]	; (80034cc <TIM_Base_SetConfig+0x130>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d108      	bne.n	8003448 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <TIM_Base_SetConfig+0x114>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00f      	beq.n	8003494 <TIM_Base_SetConfig+0xf8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <TIM_Base_SetConfig+0x124>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0xf8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <TIM_Base_SetConfig+0x128>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0xf8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <TIM_Base_SetConfig+0x12c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0xf8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0f      	ldr	r2, [pc, #60]	; (80034cc <TIM_Base_SetConfig+0x130>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d103      	bne.n	800349c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	615a      	str	r2, [r3, #20]
}
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	40000c00 	.word	0x40000c00
 80034c0:	40013400 	.word	0x40013400
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40014400 	.word	0x40014400
 80034cc:	40014800 	.word	0x40014800

080034d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e040      	b.n	80035a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f003 f8dc 	bl	80066ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8c0 	bl	80036d0 <UART_SetConfig>
 8003550:	4603      	mov	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e022      	b.n	80035a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fb3e 	bl	8003be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fbc5 	bl	8003d28 <UART_CheckIdleState>
 800359e:	4603      	mov	r3, r0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	2b20      	cmp	r3, #32
 80035be:	f040 8081 	bne.w	80036c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Transmit+0x26>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e079      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x38>
 80035dc:	2302      	movs	r3, #2
 80035de:	e072      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2221      	movs	r2, #33	; 0x21
 80035f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80035f4:	f7fc ffe8 	bl	80005c8 <HAL_GetTick>
 80035f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003612:	d108      	bne.n	8003626 <HAL_UART_Transmit+0x7e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e003      	b.n	800362e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003636:	e02d      	b.n	8003694 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2200      	movs	r2, #0
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fbb5 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e039      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	b292      	uxth	r2, r2
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	3302      	adds	r3, #2
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	e008      	b.n	8003682 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	b292      	uxth	r2, r2
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1cb      	bne.n	8003638 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2140      	movs	r1, #64	; 0x40
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fb81 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e005      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80036d4:	b088      	sub	sp, #32
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4bac      	ldr	r3, [pc, #688]	; (80039b0 <UART_SetConfig+0x2e0>)
 80036fe:	4013      	ands	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	69f9      	ldr	r1, [r7, #28]
 8003706:	430b      	orrs	r3, r1
 8003708:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4aa2      	ldr	r2, [pc, #648]	; (80039b4 <UART_SetConfig+0x2e4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	4313      	orrs	r3, r2
 8003738:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a99      	ldr	r2, [pc, #612]	; (80039b8 <UART_SetConfig+0x2e8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d121      	bne.n	800379c <UART_SetConfig+0xcc>
 8003758:	4b98      	ldr	r3, [pc, #608]	; (80039bc <UART_SetConfig+0x2ec>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b03      	cmp	r3, #3
 8003764:	d816      	bhi.n	8003794 <UART_SetConfig+0xc4>
 8003766:	a201      	add	r2, pc, #4	; (adr r2, 800376c <UART_SetConfig+0x9c>)
 8003768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376c:	0800377d 	.word	0x0800377d
 8003770:	08003789 	.word	0x08003789
 8003774:	08003783 	.word	0x08003783
 8003778:	0800378f 	.word	0x0800378f
 800377c:	2301      	movs	r3, #1
 800377e:	76fb      	strb	r3, [r7, #27]
 8003780:	e0e8      	b.n	8003954 <UART_SetConfig+0x284>
 8003782:	2302      	movs	r3, #2
 8003784:	76fb      	strb	r3, [r7, #27]
 8003786:	e0e5      	b.n	8003954 <UART_SetConfig+0x284>
 8003788:	2304      	movs	r3, #4
 800378a:	76fb      	strb	r3, [r7, #27]
 800378c:	e0e2      	b.n	8003954 <UART_SetConfig+0x284>
 800378e:	2308      	movs	r3, #8
 8003790:	76fb      	strb	r3, [r7, #27]
 8003792:	e0df      	b.n	8003954 <UART_SetConfig+0x284>
 8003794:	2310      	movs	r3, #16
 8003796:	76fb      	strb	r3, [r7, #27]
 8003798:	bf00      	nop
 800379a:	e0db      	b.n	8003954 <UART_SetConfig+0x284>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a87      	ldr	r2, [pc, #540]	; (80039c0 <UART_SetConfig+0x2f0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d134      	bne.n	8003810 <UART_SetConfig+0x140>
 80037a6:	4b85      	ldr	r3, [pc, #532]	; (80039bc <UART_SetConfig+0x2ec>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	d829      	bhi.n	8003808 <UART_SetConfig+0x138>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0xec>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037f1 	.word	0x080037f1
 80037c0:	08003809 	.word	0x08003809
 80037c4:	08003809 	.word	0x08003809
 80037c8:	08003809 	.word	0x08003809
 80037cc:	080037fd 	.word	0x080037fd
 80037d0:	08003809 	.word	0x08003809
 80037d4:	08003809 	.word	0x08003809
 80037d8:	08003809 	.word	0x08003809
 80037dc:	080037f7 	.word	0x080037f7
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003809 	.word	0x08003809
 80037ec:	08003803 	.word	0x08003803
 80037f0:	2300      	movs	r3, #0
 80037f2:	76fb      	strb	r3, [r7, #27]
 80037f4:	e0ae      	b.n	8003954 <UART_SetConfig+0x284>
 80037f6:	2302      	movs	r3, #2
 80037f8:	76fb      	strb	r3, [r7, #27]
 80037fa:	e0ab      	b.n	8003954 <UART_SetConfig+0x284>
 80037fc:	2304      	movs	r3, #4
 80037fe:	76fb      	strb	r3, [r7, #27]
 8003800:	e0a8      	b.n	8003954 <UART_SetConfig+0x284>
 8003802:	2308      	movs	r3, #8
 8003804:	76fb      	strb	r3, [r7, #27]
 8003806:	e0a5      	b.n	8003954 <UART_SetConfig+0x284>
 8003808:	2310      	movs	r3, #16
 800380a:	76fb      	strb	r3, [r7, #27]
 800380c:	bf00      	nop
 800380e:	e0a1      	b.n	8003954 <UART_SetConfig+0x284>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6b      	ldr	r2, [pc, #428]	; (80039c4 <UART_SetConfig+0x2f4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d120      	bne.n	800385c <UART_SetConfig+0x18c>
 800381a:	4b68      	ldr	r3, [pc, #416]	; (80039bc <UART_SetConfig+0x2ec>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003824:	2b10      	cmp	r3, #16
 8003826:	d00f      	beq.n	8003848 <UART_SetConfig+0x178>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d802      	bhi.n	8003832 <UART_SetConfig+0x162>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <UART_SetConfig+0x16c>
 8003830:	e010      	b.n	8003854 <UART_SetConfig+0x184>
 8003832:	2b20      	cmp	r3, #32
 8003834:	d005      	beq.n	8003842 <UART_SetConfig+0x172>
 8003836:	2b30      	cmp	r3, #48	; 0x30
 8003838:	d009      	beq.n	800384e <UART_SetConfig+0x17e>
 800383a:	e00b      	b.n	8003854 <UART_SetConfig+0x184>
 800383c:	2300      	movs	r3, #0
 800383e:	76fb      	strb	r3, [r7, #27]
 8003840:	e088      	b.n	8003954 <UART_SetConfig+0x284>
 8003842:	2302      	movs	r3, #2
 8003844:	76fb      	strb	r3, [r7, #27]
 8003846:	e085      	b.n	8003954 <UART_SetConfig+0x284>
 8003848:	2304      	movs	r3, #4
 800384a:	76fb      	strb	r3, [r7, #27]
 800384c:	e082      	b.n	8003954 <UART_SetConfig+0x284>
 800384e:	2308      	movs	r3, #8
 8003850:	76fb      	strb	r3, [r7, #27]
 8003852:	e07f      	b.n	8003954 <UART_SetConfig+0x284>
 8003854:	2310      	movs	r3, #16
 8003856:	76fb      	strb	r3, [r7, #27]
 8003858:	bf00      	nop
 800385a:	e07b      	b.n	8003954 <UART_SetConfig+0x284>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a59      	ldr	r2, [pc, #356]	; (80039c8 <UART_SetConfig+0x2f8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d120      	bne.n	80038a8 <UART_SetConfig+0x1d8>
 8003866:	4b55      	ldr	r3, [pc, #340]	; (80039bc <UART_SetConfig+0x2ec>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d00f      	beq.n	8003894 <UART_SetConfig+0x1c4>
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d802      	bhi.n	800387e <UART_SetConfig+0x1ae>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <UART_SetConfig+0x1b8>
 800387c:	e010      	b.n	80038a0 <UART_SetConfig+0x1d0>
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d005      	beq.n	800388e <UART_SetConfig+0x1be>
 8003882:	2bc0      	cmp	r3, #192	; 0xc0
 8003884:	d009      	beq.n	800389a <UART_SetConfig+0x1ca>
 8003886:	e00b      	b.n	80038a0 <UART_SetConfig+0x1d0>
 8003888:	2300      	movs	r3, #0
 800388a:	76fb      	strb	r3, [r7, #27]
 800388c:	e062      	b.n	8003954 <UART_SetConfig+0x284>
 800388e:	2302      	movs	r3, #2
 8003890:	76fb      	strb	r3, [r7, #27]
 8003892:	e05f      	b.n	8003954 <UART_SetConfig+0x284>
 8003894:	2304      	movs	r3, #4
 8003896:	76fb      	strb	r3, [r7, #27]
 8003898:	e05c      	b.n	8003954 <UART_SetConfig+0x284>
 800389a:	2308      	movs	r3, #8
 800389c:	76fb      	strb	r3, [r7, #27]
 800389e:	e059      	b.n	8003954 <UART_SetConfig+0x284>
 80038a0:	2310      	movs	r3, #16
 80038a2:	76fb      	strb	r3, [r7, #27]
 80038a4:	bf00      	nop
 80038a6:	e055      	b.n	8003954 <UART_SetConfig+0x284>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a47      	ldr	r2, [pc, #284]	; (80039cc <UART_SetConfig+0x2fc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d124      	bne.n	80038fc <UART_SetConfig+0x22c>
 80038b2:	4b42      	ldr	r3, [pc, #264]	; (80039bc <UART_SetConfig+0x2ec>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c0:	d012      	beq.n	80038e8 <UART_SetConfig+0x218>
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c6:	d802      	bhi.n	80038ce <UART_SetConfig+0x1fe>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <UART_SetConfig+0x20c>
 80038cc:	e012      	b.n	80038f4 <UART_SetConfig+0x224>
 80038ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d2:	d006      	beq.n	80038e2 <UART_SetConfig+0x212>
 80038d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d8:	d009      	beq.n	80038ee <UART_SetConfig+0x21e>
 80038da:	e00b      	b.n	80038f4 <UART_SetConfig+0x224>
 80038dc:	2300      	movs	r3, #0
 80038de:	76fb      	strb	r3, [r7, #27]
 80038e0:	e038      	b.n	8003954 <UART_SetConfig+0x284>
 80038e2:	2302      	movs	r3, #2
 80038e4:	76fb      	strb	r3, [r7, #27]
 80038e6:	e035      	b.n	8003954 <UART_SetConfig+0x284>
 80038e8:	2304      	movs	r3, #4
 80038ea:	76fb      	strb	r3, [r7, #27]
 80038ec:	e032      	b.n	8003954 <UART_SetConfig+0x284>
 80038ee:	2308      	movs	r3, #8
 80038f0:	76fb      	strb	r3, [r7, #27]
 80038f2:	e02f      	b.n	8003954 <UART_SetConfig+0x284>
 80038f4:	2310      	movs	r3, #16
 80038f6:	76fb      	strb	r3, [r7, #27]
 80038f8:	bf00      	nop
 80038fa:	e02b      	b.n	8003954 <UART_SetConfig+0x284>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2c      	ldr	r2, [pc, #176]	; (80039b4 <UART_SetConfig+0x2e4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d124      	bne.n	8003950 <UART_SetConfig+0x280>
 8003906:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <UART_SetConfig+0x2ec>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003914:	d012      	beq.n	800393c <UART_SetConfig+0x26c>
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391a:	d802      	bhi.n	8003922 <UART_SetConfig+0x252>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <UART_SetConfig+0x260>
 8003920:	e012      	b.n	8003948 <UART_SetConfig+0x278>
 8003922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003926:	d006      	beq.n	8003936 <UART_SetConfig+0x266>
 8003928:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800392c:	d009      	beq.n	8003942 <UART_SetConfig+0x272>
 800392e:	e00b      	b.n	8003948 <UART_SetConfig+0x278>
 8003930:	2300      	movs	r3, #0
 8003932:	76fb      	strb	r3, [r7, #27]
 8003934:	e00e      	b.n	8003954 <UART_SetConfig+0x284>
 8003936:	2302      	movs	r3, #2
 8003938:	76fb      	strb	r3, [r7, #27]
 800393a:	e00b      	b.n	8003954 <UART_SetConfig+0x284>
 800393c:	2304      	movs	r3, #4
 800393e:	76fb      	strb	r3, [r7, #27]
 8003940:	e008      	b.n	8003954 <UART_SetConfig+0x284>
 8003942:	2308      	movs	r3, #8
 8003944:	76fb      	strb	r3, [r7, #27]
 8003946:	e005      	b.n	8003954 <UART_SetConfig+0x284>
 8003948:	2310      	movs	r3, #16
 800394a:	76fb      	strb	r3, [r7, #27]
 800394c:	bf00      	nop
 800394e:	e001      	b.n	8003954 <UART_SetConfig+0x284>
 8003950:	2310      	movs	r3, #16
 8003952:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <UART_SetConfig+0x2e4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f040 8087 	bne.w	8003a6e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003960:	7efb      	ldrb	r3, [r7, #27]
 8003962:	2b08      	cmp	r3, #8
 8003964:	d836      	bhi.n	80039d4 <UART_SetConfig+0x304>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <UART_SetConfig+0x29c>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	08003991 	.word	0x08003991
 8003970:	080039d5 	.word	0x080039d5
 8003974:	08003999 	.word	0x08003999
 8003978:	080039d5 	.word	0x080039d5
 800397c:	0800399f 	.word	0x0800399f
 8003980:	080039d5 	.word	0x080039d5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039d5 	.word	0x080039d5
 800398c:	080039a7 	.word	0x080039a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003990:	f7fe fd7c 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8003994:	6178      	str	r0, [r7, #20]
        break;
 8003996:	e022      	b.n	80039de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <UART_SetConfig+0x300>)
 800399a:	617b      	str	r3, [r7, #20]
        break;
 800399c:	e01f      	b.n	80039de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399e:	f7fe fcdf 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 80039a2:	6178      	str	r0, [r7, #20]
        break;
 80039a4:	e01b      	b.n	80039de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039aa:	617b      	str	r3, [r7, #20]
        break;
 80039ac:	e017      	b.n	80039de <UART_SetConfig+0x30e>
 80039ae:	bf00      	nop
 80039b0:	efff69f3 	.word	0xefff69f3
 80039b4:	40008000 	.word	0x40008000
 80039b8:	40013800 	.word	0x40013800
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40004400 	.word	0x40004400
 80039c4:	40004800 	.word	0x40004800
 80039c8:	40004c00 	.word	0x40004c00
 80039cc:	40005000 	.word	0x40005000
 80039d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	76bb      	strb	r3, [r7, #26]
        break;
 80039dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80f1 	beq.w	8003bc8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d305      	bcc.n	8003a02 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d902      	bls.n	8003a08 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	76bb      	strb	r3, [r7, #26]
 8003a06:	e0df      	b.n	8003bc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	f04f 0400 	mov.w	r4, #0
 8003a18:	0214      	lsls	r4, r2, #8
 8003a1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a1e:	020b      	lsls	r3, r1, #8
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6852      	ldr	r2, [r2, #4]
 8003a24:	0852      	lsrs	r2, r2, #1
 8003a26:	4611      	mov	r1, r2
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	eb13 0b01 	adds.w	fp, r3, r1
 8003a30:	eb44 0c02 	adc.w	ip, r4, r2
 8003a34:	4658      	mov	r0, fp
 8003a36:	4661      	mov	r1, ip
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f04f 0400 	mov.w	r4, #0
 8003a40:	461a      	mov	r2, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	f7fc fc14 	bl	8000270 <__aeabi_uldivmod>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a54:	d308      	bcc.n	8003a68 <UART_SetConfig+0x398>
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5c:	d204      	bcs.n	8003a68 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e0af      	b.n	8003bc8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	76bb      	strb	r3, [r7, #26]
 8003a6c:	e0ac      	b.n	8003bc8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a76:	d15b      	bne.n	8003b30 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003a78:	7efb      	ldrb	r3, [r7, #27]
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d827      	bhi.n	8003ace <UART_SetConfig+0x3fe>
 8003a7e:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <UART_SetConfig+0x3b4>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003acf 	.word	0x08003acf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003acf 	.word	0x08003acf
 8003a9c:	08003acf 	.word	0x08003acf
 8003aa0:	08003acf 	.word	0x08003acf
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7fe fcf0 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8003aac:	6178      	str	r0, [r7, #20]
        break;
 8003aae:	e013      	b.n	8003ad8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab0:	f7fe fd02 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	6178      	str	r0, [r7, #20]
        break;
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab8:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <UART_SetConfig+0x510>)
 8003aba:	617b      	str	r3, [r7, #20]
        break;
 8003abc:	e00c      	b.n	8003ad8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003abe:	f7fe fc4f 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003ac2:	6178      	str	r0, [r7, #20]
        break;
 8003ac4:	e008      	b.n	8003ad8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aca:	617b      	str	r3, [r7, #20]
        break;
 8003acc:	e004      	b.n	8003ad8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ad6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d074      	beq.n	8003bc8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	005a      	lsls	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	441a      	add	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b0f      	cmp	r3, #15
 8003afa:	d916      	bls.n	8003b2a <UART_SetConfig+0x45a>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d212      	bcs.n	8003b2a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f023 030f 	bic.w	r3, r3, #15
 8003b0c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	89fb      	ldrh	r3, [r7, #14]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	89fa      	ldrh	r2, [r7, #14]
 8003b26:	60da      	str	r2, [r3, #12]
 8003b28:	e04e      	b.n	8003bc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	76bb      	strb	r3, [r7, #26]
 8003b2e:	e04b      	b.n	8003bc8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b30:	7efb      	ldrb	r3, [r7, #27]
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d827      	bhi.n	8003b86 <UART_SetConfig+0x4b6>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0x46c>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b71 	.word	0x08003b71
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b77 	.word	0x08003b77
 8003b50:	08003b87 	.word	0x08003b87
 8003b54:	08003b87 	.word	0x08003b87
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b7f 	.word	0x08003b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b60:	f7fe fc94 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8003b64:	6178      	str	r0, [r7, #20]
        break;
 8003b66:	e013      	b.n	8003b90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7fe fca6 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 8003b6c:	6178      	str	r0, [r7, #20]
        break;
 8003b6e:	e00f      	b.n	8003b90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <UART_SetConfig+0x510>)
 8003b72:	617b      	str	r3, [r7, #20]
        break;
 8003b74:	e00c      	b.n	8003b90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7fe fbf3 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003b7a:	6178      	str	r0, [r7, #20]
        break;
 8003b7c:	e008      	b.n	8003b90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b82:	617b      	str	r3, [r7, #20]
        break;
 8003b84:	e004      	b.n	8003b90 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	76bb      	strb	r3, [r7, #26]
        break;
 8003b8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d018      	beq.n	8003bc8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	085a      	lsrs	r2, r3, #1
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	d908      	bls.n	8003bc4 <UART_SetConfig+0x4f4>
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d204      	bcs.n	8003bc4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	e001      	b.n	8003bc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003bd4:	7ebb      	ldrb	r3, [r7, #26]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003be0:	00f42400 	.word	0x00f42400

08003be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce2:	d10a      	bne.n	8003cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d36:	f7fc fc47 	bl	80005c8 <HAL_GetTick>
 8003d3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d10e      	bne.n	8003d68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f82a 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e020      	b.n	8003daa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d10e      	bne.n	8003d94 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f814 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e00a      	b.n	8003daa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	e05d      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d059      	beq.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dcc:	f7fc fbfc 	bl	80005c8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d302      	bcc.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d11b      	bne.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003df0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e042      	b.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d02b      	beq.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e36:	d123      	bne.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e50:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e00f      	b.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d092      	beq.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eba:	2b84      	cmp	r3, #132	; 0x84
 8003ebc:	d005      	beq.n	8003eca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ebe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3303      	adds	r3, #3
 8003ec8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003edc:	f000 fada 	bl	8004494 <vTaskStartScheduler>
  
  return osOK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee8:	b089      	sub	sp, #36	; 0x24
 8003eea:	af04      	add	r7, sp, #16
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <osThreadCreate+0x54>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01c      	beq.n	8003f3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685c      	ldr	r4, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681d      	ldr	r5, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691e      	ldr	r6, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ffc8 	bl	8003ea8 <makeFreeRtosPriority>
 8003f18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f22:	9202      	str	r2, [sp, #8]
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	9100      	str	r1, [sp, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4632      	mov	r2, r6
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f000 f8ed 	bl	800410e <xTaskCreateStatic>
 8003f34:	4603      	mov	r3, r0
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e01c      	b.n	8003f74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685c      	ldr	r4, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f46:	b29e      	uxth	r6, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ffaa 	bl	8003ea8 <makeFreeRtosPriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f107 030c 	add.w	r3, r7, #12
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	9200      	str	r2, [sp, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	4632      	mov	r2, r6
 8003f62:	4629      	mov	r1, r5
 8003f64:	4620      	mov	r0, r4
 8003f66:	f000 f92c 	bl	80041c2 <xTaskCreate>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <osDelay+0x16>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	e000      	b.n	8003f96 <osDelay+0x18>
 8003f94:	2301      	movs	r3, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fa48 	bl	800442c <vTaskDelay>
  
  return osOK;
 8003f9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f103 0208 	add.w	r2, r3, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f103 0208 	add.w	r2, r3, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f103 0208 	add.w	r2, r3, #8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d103      	bne.n	8004068 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e00c      	b.n	8004082 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3308      	adds	r3, #8
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e002      	b.n	8004076 <vListInsert+0x2e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	429a      	cmp	r2, r3
 8004080:	d2f6      	bcs.n	8004070 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	601a      	str	r2, [r3, #0]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6892      	ldr	r2, [r2, #8]
 80040d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6852      	ldr	r2, [r2, #4]
 80040da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d103      	bne.n	80040ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	1e5a      	subs	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800410e:	b580      	push	{r7, lr}
 8004110:	b08e      	sub	sp, #56	; 0x38
 8004112:	af04      	add	r7, sp, #16
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800411c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	e7fe      	b.n	8004134 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <xTaskCreateStatic+0x42>
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e7fe      	b.n	800414e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004150:	2354      	movs	r3, #84	; 0x54
 8004152:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b54      	cmp	r3, #84	; 0x54
 8004158:	d009      	beq.n	800416e <xTaskCreateStatic+0x60>
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e7fe      	b.n	800416c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800416e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01e      	beq.n	80041b4 <xTaskCreateStatic+0xa6>
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800418e:	2300      	movs	r3, #0
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f850 	bl	800424c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ae:	f000 f8d3 	bl	8004358 <prvAddNewTaskToReadyList>
 80041b2:	e001      	b.n	80041b8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041b8:	697b      	ldr	r3, [r7, #20]
	}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08c      	sub	sp, #48	; 0x30
 80041c6:	af04      	add	r7, sp, #16
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 feb4 	bl	8004f44 <pvPortMalloc>
 80041dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041e4:	2054      	movs	r0, #84	; 0x54
 80041e6:	f000 fead 	bl	8004f44 <pvPortMalloc>
 80041ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
 80041f8:	e005      	b.n	8004206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f000 ff64 	bl	80050c8 <vPortFree>
 8004200:	e001      	b.n	8004206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d017      	beq.n	800423c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	2300      	movs	r3, #0
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f80e 	bl	800424c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004230:	69f8      	ldr	r0, [r7, #28]
 8004232:	f000 f891 	bl	8004358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e002      	b.n	8004242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004242:	69bb      	ldr	r3, [r7, #24]
	}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004264:	3b01      	subs	r3, #1
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f023 0307 	bic.w	r3, r3, #7
 8004272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <prvInitialiseNewTask+0x46>
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e7fe      	b.n	8004290 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01f      	beq.n	80042d8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e012      	b.n	80042c4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	7819      	ldrb	r1, [r3, #0]
 80042a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	4413      	add	r3, r2
 80042ac:	3334      	adds	r3, #52	; 0x34
 80042ae:	460a      	mov	r2, r1
 80042b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d006      	beq.n	80042cc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	d9e9      	bls.n	800429e <prvInitialiseNewTask+0x52>
 80042ca:	e000      	b.n	80042ce <prvInitialiseNewTask+0x82>
			{
				break;
 80042cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d6:	e003      	b.n	80042e0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d901      	bls.n	80042ea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042e6:	2306      	movs	r3, #6
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	2200      	movs	r2, #0
 80042fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	3304      	adds	r3, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fe70 	bl	8003fe6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	3318      	adds	r3, #24
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fe6b 	bl	8003fe6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004314:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	f1c3 0207 	rsb	r2, r3, #7
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	2200      	movs	r2, #0
 800432a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	69b8      	ldr	r0, [r7, #24]
 800433a:	f000 fbfd 	bl	8004b38 <pxPortInitialiseStack>
 800433e:	4602      	mov	r2, r0
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004350:	bf00      	nop
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004360:	f000 fd14 	bl	8004d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004364:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <prvAddNewTaskToReadyList+0xb8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	4a29      	ldr	r2, [pc, #164]	; (8004410 <prvAddNewTaskToReadyList+0xb8>)
 800436c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800436e:	4b29      	ldr	r3, [pc, #164]	; (8004414 <prvAddNewTaskToReadyList+0xbc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004376:	4a27      	ldr	r2, [pc, #156]	; (8004414 <prvAddNewTaskToReadyList+0xbc>)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <prvAddNewTaskToReadyList+0xb8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d110      	bne.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004384:	f000 fab8 	bl	80048f8 <prvInitialiseTaskLists>
 8004388:	e00d      	b.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800438a:	4b23      	ldr	r3, [pc, #140]	; (8004418 <prvAddNewTaskToReadyList+0xc0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004392:	4b20      	ldr	r3, [pc, #128]	; (8004414 <prvAddNewTaskToReadyList+0xbc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	429a      	cmp	r2, r3
 800439e:	d802      	bhi.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <prvAddNewTaskToReadyList+0xbc>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <prvAddNewTaskToReadyList+0xc4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	4a1b      	ldr	r2, [pc, #108]	; (800441c <prvAddNewTaskToReadyList+0xc4>)
 80043ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	2201      	movs	r2, #1
 80043b6:	409a      	lsls	r2, r3
 80043b8:	4b19      	ldr	r3, [pc, #100]	; (8004420 <prvAddNewTaskToReadyList+0xc8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	4a18      	ldr	r2, [pc, #96]	; (8004420 <prvAddNewTaskToReadyList+0xc8>)
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <prvAddNewTaskToReadyList+0xcc>)
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f7ff fe11 	bl	8004000 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043de:	f000 fd03 	bl	8004de8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <prvAddNewTaskToReadyList+0xc0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00e      	beq.n	8004408 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <prvAddNewTaskToReadyList+0xbc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d207      	bcs.n	8004408 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <prvAddNewTaskToReadyList+0xd0>)
 80043fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004408:	bf00      	nop
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000214 	.word	0x20000214
 8004414:	20000114 	.word	0x20000114
 8004418:	20000220 	.word	0x20000220
 800441c:	20000230 	.word	0x20000230
 8004420:	2000021c 	.word	0x2000021c
 8004424:	20000118 	.word	0x20000118
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800443e:	4b13      	ldr	r3, [pc, #76]	; (800448c <vTaskDelay+0x60>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <vTaskDelay+0x2e>
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	e7fe      	b.n	8004458 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800445a:	f000 f879 	bl	8004550 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800445e:	2100      	movs	r1, #0
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fb03 	bl	8004a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004466:	f000 f881 	bl	800456c <xTaskResumeAll>
 800446a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <vTaskDelay+0x64>)
 8004474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	2000023c 	.word	0x2000023c
 8004490:	e000ed04 	.word	0xe000ed04

08004494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044a2:	463a      	mov	r2, r7
 80044a4:	1d39      	adds	r1, r7, #4
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 ff20 	bl	80052f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	9202      	str	r2, [sp, #8]
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	2300      	movs	r3, #0
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	460a      	mov	r2, r1
 80044c2:	491d      	ldr	r1, [pc, #116]	; (8004538 <vTaskStartScheduler+0xa4>)
 80044c4:	481d      	ldr	r0, [pc, #116]	; (800453c <vTaskStartScheduler+0xa8>)
 80044c6:	f7ff fe22 	bl	800410e <xTaskCreateStatic>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <vTaskStartScheduler+0xac>)
 80044ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <vTaskStartScheduler+0xac>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e001      	b.n	80044e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d115      	bne.n	8004514 <vTaskStartScheduler+0x80>
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <vTaskStartScheduler+0xb0>)
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <vTaskStartScheduler+0xb4>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <vTaskStartScheduler+0xb8>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800450e:	f000 fb9f 	bl	8004c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004512:	e00d      	b.n	8004530 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d109      	bne.n	8004530 <vTaskStartScheduler+0x9c>
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e7fe      	b.n	800452e <vTaskStartScheduler+0x9a>
}
 8004530:	bf00      	nop
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	08007230 	.word	0x08007230
 800453c:	080048c9 	.word	0x080048c9
 8004540:	20000238 	.word	0x20000238
 8004544:	20000234 	.word	0x20000234
 8004548:	20000220 	.word	0x20000220
 800454c:	20000218 	.word	0x20000218

08004550 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <vTaskSuspendAll+0x18>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a03      	ldr	r2, [pc, #12]	; (8004568 <vTaskSuspendAll+0x18>)
 800455c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	2000023c 	.word	0x2000023c

0800456c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800457a:	4b41      	ldr	r3, [pc, #260]	; (8004680 <xTaskResumeAll+0x114>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <xTaskResumeAll+0x2a>
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	e7fe      	b.n	8004594 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004596:	f000 fbf9 	bl	8004d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800459a:	4b39      	ldr	r3, [pc, #228]	; (8004680 <xTaskResumeAll+0x114>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3b01      	subs	r3, #1
 80045a0:	4a37      	ldr	r2, [pc, #220]	; (8004680 <xTaskResumeAll+0x114>)
 80045a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a4:	4b36      	ldr	r3, [pc, #216]	; (8004680 <xTaskResumeAll+0x114>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d161      	bne.n	8004670 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <xTaskResumeAll+0x118>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05d      	beq.n	8004670 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045b4:	e02e      	b.n	8004614 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b6:	4b34      	ldr	r3, [pc, #208]	; (8004688 <xTaskResumeAll+0x11c>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3318      	adds	r3, #24
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fd79 	bl	80040ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fd74 	bl	80040ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	2201      	movs	r2, #1
 80045d8:	409a      	lsls	r2, r3
 80045da:	4b2c      	ldr	r3, [pc, #176]	; (800468c <xTaskResumeAll+0x120>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	4a2a      	ldr	r2, [pc, #168]	; (800468c <xTaskResumeAll+0x120>)
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4a27      	ldr	r2, [pc, #156]	; (8004690 <xTaskResumeAll+0x124>)
 80045f2:	441a      	add	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f7ff fd00 	bl	8004000 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004604:	4b23      	ldr	r3, [pc, #140]	; (8004694 <xTaskResumeAll+0x128>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <xTaskResumeAll+0x12c>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004614:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <xTaskResumeAll+0x11c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1cc      	bne.n	80045b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004622:	f000 fa03 	bl	8004a2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <xTaskResumeAll+0x130>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d010      	beq.n	8004654 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004632:	f000 f837 	bl	80046a4 <xTaskIncrementTick>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800463c:	4b16      	ldr	r3, [pc, #88]	; (8004698 <xTaskResumeAll+0x12c>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3b01      	subs	r3, #1
 8004646:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f1      	bne.n	8004632 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <xTaskResumeAll+0x130>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <xTaskResumeAll+0x12c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800465c:	2301      	movs	r3, #1
 800465e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <xTaskResumeAll+0x134>)
 8004662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004670:	f000 fbba 	bl	8004de8 <vPortExitCritical>

	return xAlreadyYielded;
 8004674:	68bb      	ldr	r3, [r7, #8]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2000023c 	.word	0x2000023c
 8004684:	20000214 	.word	0x20000214
 8004688:	200001d4 	.word	0x200001d4
 800468c:	2000021c 	.word	0x2000021c
 8004690:	20000118 	.word	0x20000118
 8004694:	20000114 	.word	0x20000114
 8004698:	20000228 	.word	0x20000228
 800469c:	20000224 	.word	0x20000224
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ae:	4b4e      	ldr	r3, [pc, #312]	; (80047e8 <xTaskIncrementTick+0x144>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 8087 	bne.w	80047c6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046b8:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <xTaskIncrementTick+0x148>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3301      	adds	r3, #1
 80046be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046c0:	4a4a      	ldr	r2, [pc, #296]	; (80047ec <xTaskIncrementTick+0x148>)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11f      	bne.n	800470c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80046cc:	4b48      	ldr	r3, [pc, #288]	; (80047f0 <xTaskIncrementTick+0x14c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <xTaskIncrementTick+0x46>
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	e7fe      	b.n	80046e8 <xTaskIncrementTick+0x44>
 80046ea:	4b41      	ldr	r3, [pc, #260]	; (80047f0 <xTaskIncrementTick+0x14c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	4b40      	ldr	r3, [pc, #256]	; (80047f4 <xTaskIncrementTick+0x150>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a3e      	ldr	r2, [pc, #248]	; (80047f0 <xTaskIncrementTick+0x14c>)
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4a3e      	ldr	r2, [pc, #248]	; (80047f4 <xTaskIncrementTick+0x150>)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <xTaskIncrementTick+0x154>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	4a3c      	ldr	r2, [pc, #240]	; (80047f8 <xTaskIncrementTick+0x154>)
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	f000 f990 	bl	8004a2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800470c:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <xTaskIncrementTick+0x158>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	d348      	bcc.n	80047a8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004716:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <xTaskIncrementTick+0x14c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <xTaskIncrementTick+0x158>)
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	601a      	str	r2, [r3, #0]
					break;
 8004728:	e03e      	b.n	80047a8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472a:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <xTaskIncrementTick+0x14c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d203      	bcs.n	800474a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004742:	4a2e      	ldr	r2, [pc, #184]	; (80047fc <xTaskIncrementTick+0x158>)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004748:	e02e      	b.n	80047a8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3304      	adds	r3, #4
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fcb3 	bl	80040ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3318      	adds	r3, #24
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fcaa 	bl	80040ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	2201      	movs	r2, #1
 800476c:	409a      	lsls	r2, r3
 800476e:	4b24      	ldr	r3, [pc, #144]	; (8004800 <xTaskIncrementTick+0x15c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	4a22      	ldr	r2, [pc, #136]	; (8004800 <xTaskIncrementTick+0x15c>)
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <xTaskIncrementTick+0x160>)
 8004786:	441a      	add	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f7ff fc36 	bl	8004000 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <xTaskIncrementTick+0x164>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	429a      	cmp	r2, r3
 80047a0:	d3b9      	bcc.n	8004716 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80047a2:	2301      	movs	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047a6:	e7b6      	b.n	8004716 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <xTaskIncrementTick+0x164>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	4915      	ldr	r1, [pc, #84]	; (8004804 <xTaskIncrementTick+0x160>)
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d907      	bls.n	80047d0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e004      	b.n	80047d0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047c6:	4b11      	ldr	r3, [pc, #68]	; (800480c <xTaskIncrementTick+0x168>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	4a0f      	ldr	r2, [pc, #60]	; (800480c <xTaskIncrementTick+0x168>)
 80047ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <xTaskIncrementTick+0x16c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047dc:	697b      	ldr	r3, [r7, #20]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000023c 	.word	0x2000023c
 80047ec:	20000218 	.word	0x20000218
 80047f0:	200001cc 	.word	0x200001cc
 80047f4:	200001d0 	.word	0x200001d0
 80047f8:	2000022c 	.word	0x2000022c
 80047fc:	20000234 	.word	0x20000234
 8004800:	2000021c 	.word	0x2000021c
 8004804:	20000118 	.word	0x20000118
 8004808:	20000114 	.word	0x20000114
 800480c:	20000224 	.word	0x20000224
 8004810:	20000228 	.word	0x20000228

08004814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800481a:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <vTaskSwitchContext+0xa0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004822:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <vTaskSwitchContext+0xa4>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004828:	e03e      	b.n	80048a8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <vTaskSwitchContext+0xa4>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004830:	4b22      	ldr	r3, [pc, #136]	; (80048bc <vTaskSwitchContext+0xa8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	fab3 f383 	clz	r3, r3
 800483c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f1c3 031f 	rsb	r3, r3, #31
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	491e      	ldr	r1, [pc, #120]	; (80048c0 <vTaskSwitchContext+0xac>)
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <vTaskSwitchContext+0x5a>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
 800486c:	e7fe      	b.n	800486c <vTaskSwitchContext+0x58>
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <vTaskSwitchContext+0xac>)
 800487a:	4413      	add	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3308      	adds	r3, #8
 8004890:	429a      	cmp	r2, r3
 8004892:	d104      	bne.n	800489e <vTaskSwitchContext+0x8a>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <vTaskSwitchContext+0xb0>)
 80048a6:	6013      	str	r3, [r2, #0]
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	2000023c 	.word	0x2000023c
 80048b8:	20000228 	.word	0x20000228
 80048bc:	2000021c 	.word	0x2000021c
 80048c0:	20000118 	.word	0x20000118
 80048c4:	20000114 	.word	0x20000114

080048c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048d0:	f000 f852 	bl	8004978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <prvIdleTask+0x28>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d9f9      	bls.n	80048d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <prvIdleTask+0x2c>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048ec:	e7f0      	b.n	80048d0 <prvIdleTask+0x8>
 80048ee:	bf00      	nop
 80048f0:	20000118 	.word	0x20000118
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	e00c      	b.n	800491e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <prvInitialiseTaskLists+0x60>)
 8004910:	4413      	add	r3, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fb47 	bl	8003fa6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3301      	adds	r3, #1
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b06      	cmp	r3, #6
 8004922:	d9ef      	bls.n	8004904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004924:	480d      	ldr	r0, [pc, #52]	; (800495c <prvInitialiseTaskLists+0x64>)
 8004926:	f7ff fb3e 	bl	8003fa6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800492a:	480d      	ldr	r0, [pc, #52]	; (8004960 <prvInitialiseTaskLists+0x68>)
 800492c:	f7ff fb3b 	bl	8003fa6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004930:	480c      	ldr	r0, [pc, #48]	; (8004964 <prvInitialiseTaskLists+0x6c>)
 8004932:	f7ff fb38 	bl	8003fa6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004936:	480c      	ldr	r0, [pc, #48]	; (8004968 <prvInitialiseTaskLists+0x70>)
 8004938:	f7ff fb35 	bl	8003fa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800493c:	480b      	ldr	r0, [pc, #44]	; (800496c <prvInitialiseTaskLists+0x74>)
 800493e:	f7ff fb32 	bl	8003fa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <prvInitialiseTaskLists+0x78>)
 8004944:	4a05      	ldr	r2, [pc, #20]	; (800495c <prvInitialiseTaskLists+0x64>)
 8004946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <prvInitialiseTaskLists+0x7c>)
 800494a:	4a05      	ldr	r2, [pc, #20]	; (8004960 <prvInitialiseTaskLists+0x68>)
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000118 	.word	0x20000118
 800495c:	200001a4 	.word	0x200001a4
 8004960:	200001b8 	.word	0x200001b8
 8004964:	200001d4 	.word	0x200001d4
 8004968:	200001e8 	.word	0x200001e8
 800496c:	20000200 	.word	0x20000200
 8004970:	200001cc 	.word	0x200001cc
 8004974:	200001d0 	.word	0x200001d0

08004978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800497e:	e019      	b.n	80049b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004980:	f000 fa04 	bl	8004d8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <prvCheckTasksWaitingTermination+0x4c>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fb92 	bl	80040ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <prvCheckTasksWaitingTermination+0x50>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3b01      	subs	r3, #1
 800499c:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <prvCheckTasksWaitingTermination+0x50>)
 800499e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvCheckTasksWaitingTermination+0x54>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <prvCheckTasksWaitingTermination+0x54>)
 80049a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049aa:	f000 fa1d 	bl	8004de8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f80e 	bl	80049d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <prvCheckTasksWaitingTermination+0x54>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e1      	bne.n	8004980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	200001e8 	.word	0x200001e8
 80049c8:	20000214 	.word	0x20000214
 80049cc:	200001fc 	.word	0x200001fc

080049d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fb6e 	bl	80050c8 <vPortFree>
				vPortFree( pxTCB );
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fb6b 	bl	80050c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049f2:	e017      	b.n	8004a24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d103      	bne.n	8004a06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fb62 	bl	80050c8 <vPortFree>
	}
 8004a04:	e00e      	b.n	8004a24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d009      	beq.n	8004a24 <prvDeleteTCB+0x54>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e7fe      	b.n	8004a22 <prvDeleteTCB+0x52>
	}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a32:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <prvResetNextTaskUnblockTime+0x38>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <prvResetNextTaskUnblockTime+0x3c>)
 8004a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a44:	e008      	b.n	8004a58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <prvResetNextTaskUnblockTime+0x38>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <prvResetNextTaskUnblockTime+0x3c>)
 8004a56:	6013      	str	r3, [r2, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	200001cc 	.word	0x200001cc
 8004a68:	20000234 	.word	0x20000234

08004a6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a76:	4b29      	ldr	r3, [pc, #164]	; (8004b1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a7c:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3304      	adds	r3, #4
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff fb19 	bl	80040ba <uxListRemove>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a8e:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	2201      	movs	r2, #1
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aa4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d10a      	bne.n	8004ac4 <prvAddCurrentTaskToDelayedList+0x58>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	481a      	ldr	r0, [pc, #104]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004abe:	f7ff fa9f 	bl	8004000 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ac2:	e026      	b.n	8004b12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004acc:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d209      	bcs.n	8004af0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff faad 	bl	8004048 <vListInsert>
}
 8004aee:	e010      	b.n	8004b12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f7ff faa3 	bl	8004048 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d202      	bcs.n	8004b12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b0c:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6013      	str	r3, [r2, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000218 	.word	0x20000218
 8004b20:	20000114 	.word	0x20000114
 8004b24:	2000021c 	.word	0x2000021c
 8004b28:	20000200 	.word	0x20000200
 8004b2c:	200001d0 	.word	0x200001d0
 8004b30:	200001cc 	.word	0x200001cc
 8004b34:	20000234 	.word	0x20000234

08004b38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b04      	subs	r3, #4
 8004b48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b04      	subs	r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b68:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <pxPortInitialiseStack+0x64>)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b14      	subs	r3, #20
 8004b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f06f 0202 	mvn.w	r2, #2
 8004b86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b20      	subs	r3, #32
 8004b8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	08004ba1 	.word	0x08004ba1

08004ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <prvTaskExitError+0x50>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d009      	beq.n	8004bc8 <prvTaskExitError+0x28>
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	e7fe      	b.n	8004bc6 <prvTaskExitError+0x26>
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bda:	bf00      	nop
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0fc      	beq.n	8004bdc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000008 	.word	0x20000008
	...

08004c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <pxCurrentTCBConst2>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	f380 8809 	msr	PSP, r0
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	4770      	bx	lr
 8004c1c:	f3af 8000 	nop.w

08004c20 <pxCurrentTCBConst2>:
 8004c20:	20000114 	.word	0x20000114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <prvPortStartFirstTask+0x24>)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f380 8808 	msr	MSP, r0
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8814 	msr	CONTROL, r0
 8004c3a:	b662      	cpsie	i
 8004c3c:	b661      	cpsie	f
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	df00      	svc	0
 8004c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c4a:	bf00      	nop
 8004c4c:	e000ed08 	.word	0xe000ed08

08004c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c56:	4b44      	ldr	r3, [pc, #272]	; (8004d68 <xPortStartScheduler+0x118>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a44      	ldr	r2, [pc, #272]	; (8004d6c <xPortStartScheduler+0x11c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d109      	bne.n	8004c74 <xPortStartScheduler+0x24>
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e7fe      	b.n	8004c72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c74:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <xPortStartScheduler+0x118>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <xPortStartScheduler+0x120>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d109      	bne.n	8004c92 <xPortStartScheduler+0x42>
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e7fe      	b.n	8004c90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <xPortStartScheduler+0x124>)
 8004c94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <xPortStartScheduler+0x128>)
 8004cb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cba:	4b30      	ldr	r3, [pc, #192]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cc0:	e009      	b.n	8004cd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004cc2:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	4a2c      	ldr	r2, [pc, #176]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004cca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d0ef      	beq.n	8004cc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1c3 0307 	rsb	r3, r3, #7
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d009      	beq.n	8004d02 <xPortStartScheduler+0xb2>
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	e7fe      	b.n	8004d00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d02:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004d0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004d16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d20:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <xPortStartScheduler+0x130>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <xPortStartScheduler+0x130>)
 8004d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <xPortStartScheduler+0x130>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <xPortStartScheduler+0x130>)
 8004d32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d38:	f000 f8d6 	bl	8004ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d42:	f000 f8f5 	bl	8004f30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a0f      	ldr	r2, [pc, #60]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d52:	f7ff ff69 	bl	8004c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d56:	f7ff fd5d 	bl	8004814 <vTaskSwitchContext>
	prvTaskExitError();
 8004d5a:	f7ff ff21 	bl	8004ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	e000ed00 	.word	0xe000ed00
 8004d6c:	410fc271 	.word	0x410fc271
 8004d70:	410fc270 	.word	0x410fc270
 8004d74:	e000e400 	.word	0xe000e400
 8004d78:	20000240 	.word	0x20000240
 8004d7c:	20000244 	.word	0x20000244
 8004d80:	e000ed20 	.word	0xe000ed20
 8004d84:	20000008 	.word	0x20000008
 8004d88:	e000ef34 	.word	0xe000ef34

08004d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <vPortEnterCritical+0x54>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <vPortEnterCritical+0x54>)
 8004dac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <vPortEnterCritical+0x54>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10e      	bne.n	8004dd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <vPortEnterCritical+0x58>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <vPortEnterCritical+0x48>
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	603b      	str	r3, [r7, #0]
 8004dd2:	e7fe      	b.n	8004dd2 <vPortEnterCritical+0x46>
	}
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	20000008 	.word	0x20000008
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <vPortExitCritical+0x4c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <vPortExitCritical+0x22>
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	e7fe      	b.n	8004e08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <vPortExitCritical+0x4c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <vPortExitCritical+0x4c>)
 8004e12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <vPortExitCritical+0x4c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <vPortExitCritical+0x3e>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000008 	.word	0x20000008
	...

08004e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e40:	f3ef 8009 	mrs	r0, PSP
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <pxCurrentTCBConst>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f01e 0f10 	tst.w	lr, #16
 8004e50:	bf08      	it	eq
 8004e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5a:	6010      	str	r0, [r2, #0]
 8004e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e64:	f380 8811 	msr	BASEPRI, r0
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f7ff fcd0 	bl	8004814 <vTaskSwitchContext>
 8004e74:	f04f 0000 	mov.w	r0, #0
 8004e78:	f380 8811 	msr	BASEPRI, r0
 8004e7c:	bc09      	pop	{r0, r3}
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	6808      	ldr	r0, [r1, #0]
 8004e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e86:	f01e 0f10 	tst.w	lr, #16
 8004e8a:	bf08      	it	eq
 8004e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e90:	f380 8809 	msr	PSP, r0
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst>:
 8004ea0:	20000114 	.word	0x20000114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ec0:	f7ff fbf0 	bl	80046a4 <xTaskIncrementTick>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <SysTick_Handler+0x3c>)
 8004ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <vPortSetupTimerInterrupt+0x34>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortSetupTimerInterrupt+0x38>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <vPortSetupTimerInterrupt+0x3c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <vPortSetupTimerInterrupt+0x40>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	099b      	lsrs	r3, r3, #6
 8004f04:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <vPortSetupTimerInterrupt+0x44>)
 8004f06:	3b01      	subs	r3, #1
 8004f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <vPortSetupTimerInterrupt+0x34>)
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	601a      	str	r2, [r3, #0]
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	e000e010 	.word	0xe000e010
 8004f20:	e000e018 	.word	0xe000e018
 8004f24:	20000090 	.word	0x20000090
 8004f28:	10624dd3 	.word	0x10624dd3
 8004f2c:	e000e014 	.word	0xe000e014

08004f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f40 <vPortEnableVFP+0x10>
 8004f34:	6801      	ldr	r1, [r0, #0]
 8004f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f3a:	6001      	str	r1, [r0, #0]
 8004f3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f3e:	bf00      	nop
 8004f40:	e000ed88 	.word	0xe000ed88

08004f44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f50:	f7ff fafe 	bl	8004550 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f54:	4b57      	ldr	r3, [pc, #348]	; (80050b4 <pvPortMalloc+0x170>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f5c:	f000 f90c 	bl	8005178 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f60:	4b55      	ldr	r3, [pc, #340]	; (80050b8 <pvPortMalloc+0x174>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 808c 	bne.w	8005086 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01c      	beq.n	8004fae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004f74:	2208      	movs	r2, #8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d013      	beq.n	8004fae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f023 0307 	bic.w	r3, r3, #7
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <pvPortMalloc+0x6a>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e7fe      	b.n	8004fac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d068      	beq.n	8005086 <pvPortMalloc+0x142>
 8004fb4:	4b41      	ldr	r3, [pc, #260]	; (80050bc <pvPortMalloc+0x178>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d863      	bhi.n	8005086 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fbe:	4b40      	ldr	r3, [pc, #256]	; (80050c0 <pvPortMalloc+0x17c>)
 8004fc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <pvPortMalloc+0x17c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fc8:	e004      	b.n	8004fd4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d903      	bls.n	8004fe6 <pvPortMalloc+0xa2>
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f1      	bne.n	8004fca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fe6:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <pvPortMalloc+0x170>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d04a      	beq.n	8005086 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	4413      	add	r3, r2
 8004ff8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	1ad2      	subs	r2, r2, r3
 800500a:	2308      	movs	r3, #8
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	429a      	cmp	r2, r3
 8005010:	d91e      	bls.n	8005050 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <pvPortMalloc+0xf4>
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e7fe      	b.n	8005036 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800504a:	69b8      	ldr	r0, [r7, #24]
 800504c:	f000 f8f6 	bl	800523c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <pvPortMalloc+0x178>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	4a18      	ldr	r2, [pc, #96]	; (80050bc <pvPortMalloc+0x178>)
 800505c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <pvPortMalloc+0x178>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <pvPortMalloc+0x180>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d203      	bcs.n	8005072 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <pvPortMalloc+0x178>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <pvPortMalloc+0x180>)
 8005070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <pvPortMalloc+0x174>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	431a      	orrs	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005086:	f7ff fa71 	bl	800456c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <pvPortMalloc+0x164>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e7fe      	b.n	80050a6 <pvPortMalloc+0x162>
	return pvReturn;
 80050a8:	69fb      	ldr	r3, [r7, #28]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3728      	adds	r7, #40	; 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000e08 	.word	0x20000e08
 80050b8:	20000e14 	.word	0x20000e14
 80050bc:	20000e0c 	.word	0x20000e0c
 80050c0:	20000e00 	.word	0x20000e00
 80050c4:	20000e10 	.word	0x20000e10

080050c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d046      	beq.n	8005168 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050da:	2308      	movs	r3, #8
 80050dc:	425b      	negs	r3, r3
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4413      	add	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4b20      	ldr	r3, [pc, #128]	; (8005170 <vPortFree+0xa8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <vPortFree+0x42>
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e7fe      	b.n	8005108 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <vPortFree+0x5e>
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	e7fe      	b.n	8005124 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	4b11      	ldr	r3, [pc, #68]	; (8005170 <vPortFree+0xa8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d019      	beq.n	8005168 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d115      	bne.n	8005168 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <vPortFree+0xa8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800514c:	f7ff fa00 	bl	8004550 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <vPortFree+0xac>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4413      	add	r3, r2
 800515a:	4a06      	ldr	r2, [pc, #24]	; (8005174 <vPortFree+0xac>)
 800515c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800515e:	6938      	ldr	r0, [r7, #16]
 8005160:	f000 f86c 	bl	800523c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005164:	f7ff fa02 	bl	800456c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005168:	bf00      	nop
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000e14 	.word	0x20000e14
 8005174:	20000e0c 	.word	0x20000e0c

08005178 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800517e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005182:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <prvHeapInit+0xac>)
 8005186:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3307      	adds	r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <prvHeapInit+0xac>)
 80051a8:	4413      	add	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051b0:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <prvHeapInit+0xb0>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051b6:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <prvHeapInit+0xb0>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051c4:	2208      	movs	r2, #8
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0307 	bic.w	r3, r3, #7
 80051d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <prvHeapInit+0xb4>)
 80051d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <prvHeapInit+0xb4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <prvHeapInit+0xb4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <prvHeapInit+0xb4>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <prvHeapInit+0xb8>)
 8005206:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <prvHeapInit+0xbc>)
 800520e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <prvHeapInit+0xc0>)
 8005212:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005216:	601a      	str	r2, [r3, #0]
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20000248 	.word	0x20000248
 8005228:	20000e00 	.word	0x20000e00
 800522c:	20000e08 	.word	0x20000e08
 8005230:	20000e10 	.word	0x20000e10
 8005234:	20000e0c 	.word	0x20000e0c
 8005238:	20000e14 	.word	0x20000e14

0800523c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005244:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <prvInsertBlockIntoFreeList+0xac>)
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e002      	b.n	8005250 <prvInsertBlockIntoFreeList+0x14>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d8f7      	bhi.n	800524a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4413      	add	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d108      	bne.n	800527e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	441a      	add	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	441a      	add	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d118      	bne.n	80052c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <prvInsertBlockIntoFreeList+0xb0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d00d      	beq.n	80052ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	441a      	add	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e008      	b.n	80052cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <prvInsertBlockIntoFreeList+0xb0>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e003      	b.n	80052cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d002      	beq.n	80052da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000e00 	.word	0x20000e00
 80052ec:	20000e08 	.word	0x20000e08

080052f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <vApplicationGetIdleTaskMemory+0x2c>)
 8005300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a06      	ldr	r2, [pc, #24]	; (8005320 <vApplicationGetIdleTaskMemory+0x30>)
 8005306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000e18 	.word	0x20000e18
 8005320:	20000e6c 	.word	0x20000e6c

08005324 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	6039      	str	r1, [r7, #0]
 800532e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2120      	movs	r1, #32
 8005336:	4618      	mov	r0, r3
 8005338:	f000 ffea 	bl	8006310 <SENSOR_IO_Read>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	f023 0304 	bic.w	r3, r3, #4
 8005346:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005366:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	7bfa      	ldrb	r2, [r7, #15]
 800536e:	2120      	movs	r1, #32
 8005370:	4618      	mov	r0, r3
 8005372:	f000 ffb3 	bl	80062dc <SENSOR_IO_Write>
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b088      	sub	sp, #32
 8005382:	af00      	add	r7, sp, #0
 8005384:	4603      	mov	r3, r0
 8005386:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	b2d8      	uxtb	r0, r3
 800538c:	f107 0208 	add.w	r2, r7, #8
 8005390:	2302      	movs	r3, #2
 8005392:	21b2      	movs	r1, #178	; 0xb2
 8005394:	f000 ffda 	bl	800634c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2135      	movs	r1, #53	; 0x35
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 ffb6 	bl	8006310 <SENSOR_IO_Read>
 80053a4:	4603      	mov	r3, r0
 80053a6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80053a8:	7ffb      	ldrb	r3, [r7, #31]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	b21b      	sxth	r3, r3
 80053ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b2:	b21a      	sxth	r2, r3
 80053b4:	7a3b      	ldrb	r3, [r7, #8]
 80053b6:	b21b      	sxth	r3, r3
 80053b8:	4313      	orrs	r3, r2
 80053ba:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80053bc:	7ffb      	ldrb	r3, [r7, #31]
 80053be:	019b      	lsls	r3, r3, #6
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	b21a      	sxth	r2, r3
 80053c8:	7a7b      	ldrb	r3, [r7, #9]
 80053ca:	b21b      	sxth	r3, r3
 80053cc:	4313      	orrs	r3, r2
 80053ce:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80053d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80053d4:	10db      	asrs	r3, r3, #3
 80053d6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80053d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80053dc:	10db      	asrs	r3, r3, #3
 80053de:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	b2d8      	uxtb	r0, r3
 80053e4:	f107 0208 	add.w	r2, r7, #8
 80053e8:	2304      	movs	r3, #4
 80053ea:	21bc      	movs	r1, #188	; 0xbc
 80053ec:	f000 ffae 	bl	800634c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053f0:	7a7b      	ldrb	r3, [r7, #9]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	b21a      	sxth	r2, r3
 80053f6:	7a3b      	ldrb	r3, [r7, #8]
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80053fe:	7afb      	ldrb	r3, [r7, #11]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	b21a      	sxth	r2, r3
 8005404:	7abb      	ldrb	r3, [r7, #10]
 8005406:	b21b      	sxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	b2d8      	uxtb	r0, r3
 8005410:	f107 0208 	add.w	r2, r7, #8
 8005414:	2302      	movs	r3, #2
 8005416:	21aa      	movs	r1, #170	; 0xaa
 8005418:	f000 ff98 	bl	800634c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800541c:	7a7b      	ldrb	r3, [r7, #9]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	b21a      	sxth	r2, r3
 8005422:	7a3b      	ldrb	r3, [r7, #8]
 8005424:	b21b      	sxth	r3, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800542a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800542e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005440:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800544e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005452:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005456:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005468:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800546c:	ee07 3a90 	vmov	s15, r3
 8005470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005478:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	ee07 3a90 	vmov	s15, r3
}
 8005482:	eeb0 0a67 	vmov.f32	s0, s15
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	463b      	mov	r3, r7
 8005494:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8005498:	783b      	ldrb	r3, [r7, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	2120      	movs	r1, #32
 800549e:	203c      	movs	r0, #60	; 0x3c
 80054a0:	f000 ff1c 	bl	80062dc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80054a4:	787b      	ldrb	r3, [r7, #1]
 80054a6:	461a      	mov	r2, r3
 80054a8:	2121      	movs	r1, #33	; 0x21
 80054aa:	203c      	movs	r0, #60	; 0x3c
 80054ac:	f000 ff16 	bl	80062dc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80054b0:	78bb      	ldrb	r3, [r7, #2]
 80054b2:	461a      	mov	r2, r3
 80054b4:	2122      	movs	r1, #34	; 0x22
 80054b6:	203c      	movs	r0, #60	; 0x3c
 80054b8:	f000 ff10 	bl	80062dc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	461a      	mov	r2, r3
 80054c0:	2123      	movs	r1, #35	; 0x23
 80054c2:	203c      	movs	r0, #60	; 0x3c
 80054c4:	f000 ff0a 	bl	80062dc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80054c8:	793b      	ldrb	r3, [r7, #4]
 80054ca:	461a      	mov	r2, r3
 80054cc:	2124      	movs	r1, #36	; 0x24
 80054ce:	203c      	movs	r0, #60	; 0x3c
 80054d0:	f000 ff04 	bl	80062dc <SENSOR_IO_Write>
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80054e2:	2300      	movs	r3, #0
 80054e4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80054e6:	2122      	movs	r1, #34	; 0x22
 80054e8:	203c      	movs	r0, #60	; 0x3c
 80054ea:	f000 ff11 	bl	8006310 <SENSOR_IO_Read>
 80054ee:	4603      	mov	r3, r0
 80054f0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	f043 0303 	orr.w	r3, r3, #3
 8005500:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	461a      	mov	r2, r3
 8005506:	2122      	movs	r1, #34	; 0x22
 8005508:	203c      	movs	r0, #60	; 0x3c
 800550a:	f000 fee7 	bl	80062dc <SENSOR_IO_Write>
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800551a:	f000 fed5 	bl	80062c8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800551e:	210f      	movs	r1, #15
 8005520:	203c      	movs	r0, #60	; 0x3c
 8005522:	f000 fef5 	bl	8006310 <SENSOR_IO_Read>
 8005526:	4603      	mov	r3, r0
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd80      	pop	{r7, pc}

0800552c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800553a:	2122      	movs	r1, #34	; 0x22
 800553c:	203c      	movs	r0, #60	; 0x3c
 800553e:	f000 fee7 	bl	8006310 <SENSOR_IO_Read>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	f023 0320 	bic.w	r3, r3, #32
 800554c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	f043 0320 	orr.w	r3, r3, #32
 800555a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	461a      	mov	r2, r3
 8005560:	2122      	movs	r1, #34	; 0x22
 8005562:	203c      	movs	r0, #60	; 0x3c
 8005564:	f000 feba 	bl	80062dc <SENSOR_IO_Write>
}
 8005568:	bf00      	nop
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8005578:	2300      	movs	r3, #0
 800557a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005586:	2121      	movs	r1, #33	; 0x21
 8005588:	203c      	movs	r0, #60	; 0x3c
 800558a:	f000 fec1 	bl	8006310 <SENSOR_IO_Read>
 800558e:	4603      	mov	r3, r0
 8005590:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8005592:	f107 0208 	add.w	r2, r7, #8
 8005596:	2306      	movs	r3, #6
 8005598:	21a8      	movs	r1, #168	; 0xa8
 800559a:	203c      	movs	r0, #60	; 0x3c
 800559c:	f000 fed6 	bl	800634c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e01f      	b.n	80055e6 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80055a6:	7ffb      	ldrb	r3, [r7, #31]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	3301      	adds	r3, #1
 80055ac:	f107 0220 	add.w	r2, r7, #32
 80055b0:	4413      	add	r3, r2
 80055b2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	f107 0120 	add.w	r1, r7, #32
 80055c4:	440b      	add	r3, r1
 80055c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	7ffb      	ldrb	r3, [r7, #31]
 80055d2:	b212      	sxth	r2, r2
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	f107 0120 	add.w	r1, r7, #32
 80055da:	440b      	add	r3, r1
 80055dc:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80055e0:	7ffb      	ldrb	r3, [r7, #31]
 80055e2:	3301      	adds	r3, #1
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	7ffb      	ldrb	r3, [r7, #31]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d9dc      	bls.n	80055a6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d00c      	beq.n	8005610 <LIS3MDL_MagReadXYZ+0xa0>
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	dc02      	bgt.n	8005600 <LIS3MDL_MagReadXYZ+0x90>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <LIS3MDL_MagReadXYZ+0x9a>
 80055fe:	e010      	b.n	8005622 <LIS3MDL_MagReadXYZ+0xb2>
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d008      	beq.n	8005616 <LIS3MDL_MagReadXYZ+0xa6>
 8005604:	2b60      	cmp	r3, #96	; 0x60
 8005606:	d009      	beq.n	800561c <LIS3MDL_MagReadXYZ+0xac>
 8005608:	e00b      	b.n	8005622 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800560a:	4b19      	ldr	r3, [pc, #100]	; (8005670 <LIS3MDL_MagReadXYZ+0x100>)
 800560c:	61bb      	str	r3, [r7, #24]
    break;
 800560e:	e008      	b.n	8005622 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8005610:	4b18      	ldr	r3, [pc, #96]	; (8005674 <LIS3MDL_MagReadXYZ+0x104>)
 8005612:	61bb      	str	r3, [r7, #24]
    break;
 8005614:	e005      	b.n	8005622 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8005616:	4b18      	ldr	r3, [pc, #96]	; (8005678 <LIS3MDL_MagReadXYZ+0x108>)
 8005618:	61bb      	str	r3, [r7, #24]
    break;
 800561a:	e002      	b.n	8005622 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <LIS3MDL_MagReadXYZ+0x10c>)
 800561e:	61bb      	str	r3, [r7, #24]
    break;    
 8005620:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8005622:	2300      	movs	r3, #0
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e01b      	b.n	8005660 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8005628:	7ffb      	ldrb	r3, [r7, #31]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	f107 0220 	add.w	r2, r7, #32
 8005630:	4413      	add	r3, r2
 8005632:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800563e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005646:	7ffb      	ldrb	r3, [r7, #31]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	4413      	add	r3, r2
 800564e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005652:	ee17 2a90 	vmov	r2, s15
 8005656:	b212      	sxth	r2, r2
 8005658:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800565a:	7ffb      	ldrb	r3, [r7, #31]
 800565c:	3301      	adds	r3, #1
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	7ffb      	ldrb	r3, [r7, #31]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d9e0      	bls.n	8005628 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8005666:	bf00      	nop
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	3e0f5c29 	.word	0x3e0f5c29
 8005674:	3e947ae1 	.word	0x3e947ae1
 8005678:	3edc28f6 	.word	0x3edc28f6
 800567c:	3f147ae1 	.word	0x3f147ae1

08005680 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 f87b 	bl	8005788 <LPS22HB_Init>
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	4603      	mov	r3, r0
 80056a2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80056a8:	f000 fe0e 	bl	80062c8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	210f      	movs	r1, #15
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fe2c 	bl	8006310 <SENSOR_IO_Read>
 80056b8:	4603      	mov	r3, r0
 80056ba:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	74fb      	strb	r3, [r7, #19]
 80056da:	e013      	b.n	8005704 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	3328      	adds	r3, #40	; 0x28
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	7cfc      	ldrb	r4, [r7, #19]
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fe10 	bl	8006310 <SENSOR_IO_Read>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	f107 0318 	add.w	r3, r7, #24
 80056f8:	4423      	add	r3, r4
 80056fa:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	3301      	adds	r3, #1
 8005702:	74fb      	strb	r3, [r7, #19]
 8005704:	7cfb      	ldrb	r3, [r7, #19]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d9e8      	bls.n	80056dc <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800570a:	2300      	movs	r3, #0
 800570c:	74fb      	strb	r3, [r7, #19]
 800570e:	e010      	b.n	8005732 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	f107 0218 	add.w	r2, r7, #24
 8005716:	4413      	add	r3, r2
 8005718:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800571c:	461a      	mov	r2, r3
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	3301      	adds	r3, #1
 8005730:	74fb      	strb	r3, [r7, #19]
 8005732:	7cfb      	ldrb	r3, [r7, #19]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d9eb      	bls.n	8005710 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005748:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2264      	movs	r2, #100	; 0x64
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	da01      	bge.n	800575e <LPS22HB_P_ReadPressure+0x96>
 800575a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800575e:	131b      	asrs	r3, r3, #12
 8005760:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800576c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005784 <LPS22HB_P_ReadPressure+0xbc>
 8005770:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005774:	eef0 7a66 	vmov.f32	s15, s13
}
 8005778:	eeb0 0a67 	vmov.f32	s0, s15
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd90      	pop	{r4, r7, pc}
 8005782:	bf00      	nop
 8005784:	42c80000 	.word	0x42c80000

08005788 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	211a      	movs	r1, #26
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fdb9 	bl	8006310 <SENSOR_IO_Read>
 800579e:	4603      	mov	r3, r0
 80057a0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	7bfa      	ldrb	r2, [r7, #15]
 80057b8:	211a      	movs	r1, #26
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fd8e 	bl	80062dc <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2110      	movs	r1, #16
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fda2 	bl	8006310 <SENSOR_IO_Read>
 80057cc:	4603      	mov	r3, r0
 80057ce:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80057de:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	f023 0302 	bic.w	r3, r3, #2
 80057e6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	f043 0302 	orr.w	r3, r3, #2
 80057ee:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	7bfa      	ldrb	r2, [r7, #15]
 80057f6:	2110      	movs	r1, #16
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fd6f 	bl	80062dc <SENSOR_IO_Write>
}  
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	4603      	mov	r3, r0
 800580e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005814:	2110      	movs	r1, #16
 8005816:	20d4      	movs	r0, #212	; 0xd4
 8005818:	f000 fd7a 	bl	8006310 <SENSOR_IO_Read>
 800581c:	4603      	mov	r3, r0
 800581e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8005820:	88fb      	ldrh	r3, [r7, #6]
 8005822:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800582c:	7bba      	ldrb	r2, [r7, #14]
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	4313      	orrs	r3, r2
 8005832:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	461a      	mov	r2, r3
 8005838:	2110      	movs	r1, #16
 800583a:	20d4      	movs	r0, #212	; 0xd4
 800583c:	f000 fd4e 	bl	80062dc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8005840:	2112      	movs	r1, #18
 8005842:	20d4      	movs	r0, #212	; 0xd4
 8005844:	f000 fd64 	bl	8006310 <SENSOR_IO_Read>
 8005848:	4603      	mov	r3, r0
 800584a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	b29b      	uxth	r3, r3
 8005852:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8005854:	7bbb      	ldrb	r3, [r7, #14]
 8005856:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800585a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800585c:	7bba      	ldrb	r2, [r7, #14]
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	4313      	orrs	r3, r2
 8005862:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	461a      	mov	r2, r3
 8005868:	2112      	movs	r1, #18
 800586a:	20d4      	movs	r0, #212	; 0xd4
 800586c:	f000 fd36 	bl	80062dc <SENSOR_IO_Write>
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800587e:	2300      	movs	r3, #0
 8005880:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005882:	2110      	movs	r1, #16
 8005884:	20d4      	movs	r0, #212	; 0xd4
 8005886:	f000 fd43 	bl	8006310 <SENSOR_IO_Read>
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	461a      	mov	r2, r3
 800589a:	2110      	movs	r1, #16
 800589c:	20d4      	movs	r0, #212	; 0xd4
 800589e:	f000 fd1d 	bl	80062dc <SENSOR_IO_Write>
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80058aa:	b580      	push	{r7, lr}
 80058ac:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80058ae:	f000 fd0b 	bl	80062c8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80058b2:	210f      	movs	r1, #15
 80058b4:	20d4      	movs	r0, #212	; 0xd4
 80058b6:	f000 fd2b 	bl	8006310 <SENSOR_IO_Read>
 80058ba:	4603      	mov	r3, r0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}

080058c0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80058ce:	2115      	movs	r1, #21
 80058d0:	20d4      	movs	r0, #212	; 0xd4
 80058d2:	f000 fd1d 	bl	8006310 <SENSOR_IO_Read>
 80058d6:	4603      	mov	r3, r0
 80058d8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	f023 0310 	bic.w	r3, r3, #16
 80058e0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	f043 0310 	orr.w	r3, r3, #16
 80058ee:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	461a      	mov	r2, r3
 80058f4:	2115      	movs	r1, #21
 80058f6:	20d4      	movs	r0, #212	; 0xd4
 80058f8:	f000 fcf0 	bl	80062dc <SENSOR_IO_Write>
}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800590c:	2300      	movs	r3, #0
 800590e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800591a:	2110      	movs	r1, #16
 800591c:	20d4      	movs	r0, #212	; 0xd4
 800591e:	f000 fcf7 	bl	8006310 <SENSOR_IO_Read>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8005926:	f107 0208 	add.w	r2, r7, #8
 800592a:	2306      	movs	r3, #6
 800592c:	2128      	movs	r1, #40	; 0x28
 800592e:	20d4      	movs	r0, #212	; 0xd4
 8005930:	f000 fd0c 	bl	800634c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005934:	2300      	movs	r3, #0
 8005936:	77fb      	strb	r3, [r7, #31]
 8005938:	e01f      	b.n	800597a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800593a:	7ffb      	ldrb	r3, [r7, #31]
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	3301      	adds	r3, #1
 8005940:	f107 0220 	add.w	r2, r7, #32
 8005944:	4413      	add	r3, r2
 8005946:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800594a:	b29b      	uxth	r3, r3
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	b29a      	uxth	r2, r3
 8005950:	7ffb      	ldrb	r3, [r7, #31]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	f107 0120 	add.w	r1, r7, #32
 8005958:	440b      	add	r3, r1
 800595a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800595e:	b29b      	uxth	r3, r3
 8005960:	4413      	add	r3, r2
 8005962:	b29a      	uxth	r2, r3
 8005964:	7ffb      	ldrb	r3, [r7, #31]
 8005966:	b212      	sxth	r2, r2
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	f107 0120 	add.w	r1, r7, #32
 800596e:	440b      	add	r3, r1
 8005970:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005974:	7ffb      	ldrb	r3, [r7, #31]
 8005976:	3301      	adds	r3, #1
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	7ffb      	ldrb	r3, [r7, #31]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d9dc      	bls.n	800593a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	f003 030c 	and.w	r3, r3, #12
 8005986:	2b0c      	cmp	r3, #12
 8005988:	d828      	bhi.n	80059dc <LSM6DSL_AccReadXYZ+0xd8>
 800598a:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <LSM6DSL_AccReadXYZ+0x8c>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	080059c5 	.word	0x080059c5
 8005994:	080059dd 	.word	0x080059dd
 8005998:	080059dd 	.word	0x080059dd
 800599c:	080059dd 	.word	0x080059dd
 80059a0:	080059d7 	.word	0x080059d7
 80059a4:	080059dd 	.word	0x080059dd
 80059a8:	080059dd 	.word	0x080059dd
 80059ac:	080059dd 	.word	0x080059dd
 80059b0:	080059cb 	.word	0x080059cb
 80059b4:	080059dd 	.word	0x080059dd
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	080059dd 	.word	0x080059dd
 80059c0:	080059d1 	.word	0x080059d1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80059c4:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <LSM6DSL_AccReadXYZ+0x124>)
 80059c6:	61bb      	str	r3, [r7, #24]
    break;
 80059c8:	e008      	b.n	80059dc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80059ca:	4b18      	ldr	r3, [pc, #96]	; (8005a2c <LSM6DSL_AccReadXYZ+0x128>)
 80059cc:	61bb      	str	r3, [r7, #24]
    break;
 80059ce:	e005      	b.n	80059dc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80059d0:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <LSM6DSL_AccReadXYZ+0x12c>)
 80059d2:	61bb      	str	r3, [r7, #24]
    break;
 80059d4:	e002      	b.n	80059dc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80059d6:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <LSM6DSL_AccReadXYZ+0x130>)
 80059d8:	61bb      	str	r3, [r7, #24]
    break;    
 80059da:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80059dc:	2300      	movs	r3, #0
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e01b      	b.n	8005a1a <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	f107 0220 	add.w	r2, r7, #32
 80059ea:	4413      	add	r3, r2
 80059ec:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80059fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a00:	7ffb      	ldrb	r3, [r7, #31]
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	4413      	add	r3, r2
 8005a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a0c:	ee17 2a90 	vmov	r2, s15
 8005a10:	b212      	sxth	r2, r2
 8005a12:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8005a14:	7ffb      	ldrb	r3, [r7, #31]
 8005a16:	3301      	adds	r3, #1
 8005a18:	77fb      	strb	r3, [r7, #31]
 8005a1a:	7ffb      	ldrb	r3, [r7, #31]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d9e0      	bls.n	80059e2 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8005a20:	bf00      	nop
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	3d79db23 	.word	0x3d79db23
 8005a2c:	3df9db23 	.word	0x3df9db23
 8005a30:	3e79db23 	.word	0x3e79db23
 8005a34:	3ef9db23 	.word	0x3ef9db23

08005a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a38:	b5b0      	push	{r4, r5, r7, lr}
 8005a3a:	b098      	sub	sp, #96	; 0x60
 8005a3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a3e:	f7fa fd97 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a42:	f000 f8df 	bl	8005c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a46:	f000 f9c7 	bl	8005dd8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8005a4a:	f000 f955 	bl	8005cf8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8005a4e:	f000 f993 	bl	8005d78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize I2C sensors */
  BSP_ACCELERO_Init();
 8005a52:	f000 fc99 	bl	8006388 <BSP_ACCELERO_Init>
  BSP_MAGNETO_Init();
 8005a56:	f000 fd07 	bl	8006468 <BSP_MAGNETO_Init>
  BSP_PSENSOR_Init();
 8005a5a:	f000 fd63 	bl	8006524 <BSP_PSENSOR_Init>
  BSP_TSENSOR_Init();
 8005a5e:	f000 fd8f 	bl	8006580 <BSP_TSENSOR_Init>

  /* Set low power mode for accelerometer and magnetometer */
  BSP_ACCELERO_LowPower(1);
 8005a62:	2001      	movs	r0, #1
 8005a64:	f000 fcce 	bl	8006404 <BSP_ACCELERO_LowPower>
  BSP_MAGNETO_LowPower(1);
 8005a68:	2001      	movs	r0, #1
 8005a6a:	f000 fd29 	bl	80064c0 <BSP_MAGNETO_LowPower>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonInterrupt */
  osThreadDef(buttonInterrupt, StartButtonInterrupt, osPriorityNormal, 0, 128);
 8005a6e:	4b52      	ldr	r3, [pc, #328]	; (8005bb8 <main+0x180>)
 8005a70:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005a74:	461d      	mov	r5, r3
 8005a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonInterruptHandle = osThreadCreate(osThread(buttonInterrupt), NULL);
 8005a82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fa2c 	bl	8003ee6 <osThreadCreate>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b4a      	ldr	r3, [pc, #296]	; (8005bbc <main+0x184>)
 8005a92:	601a      	str	r2, [r3, #0]

  /* definition and creation of readSensors */
  osThreadDef(readSensors, StartReadSensors, osPriorityNormal, 0, 128);
 8005a94:	4b4a      	ldr	r3, [pc, #296]	; (8005bc0 <main+0x188>)
 8005a96:	f107 0420 	add.w	r4, r7, #32
 8005a9a:	461d      	mov	r5, r3
 8005a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005aa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005aa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsHandle = osThreadCreate(osThread(readSensors), NULL);
 8005aa8:	f107 0320 	add.w	r3, r7, #32
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fa19 	bl	8003ee6 <osThreadCreate>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b43      	ldr	r3, [pc, #268]	; (8005bc4 <main+0x18c>)
 8005ab8:	601a      	str	r2, [r3, #0]

  /* definition and creation of TransmitReading */
  osThreadDef(TransmitReading, StartTransmitReading, osPriorityNormal, 0, 128);
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <main+0x190>)
 8005abc:	1d3c      	adds	r4, r7, #4
 8005abe:	461d      	mov	r5, r3
 8005ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ac4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmitReadingHandle = osThreadCreate(osThread(TransmitReading), NULL);
 8005acc:	1d3b      	adds	r3, r7, #4
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe fa08 	bl	8003ee6 <osThreadCreate>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	4b3c      	ldr	r3, [pc, #240]	; (8005bcc <main+0x194>)
 8005ada:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005adc:	f7fe f9fc 	bl	8003ed8 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // read from the sensor
	  BSP_ACCELERO_AccGetXYZ(ACCELERO_XYZ);
 8005ae0:	483b      	ldr	r0, [pc, #236]	; (8005bd0 <main+0x198>)
 8005ae2:	f000 fca9 	bl	8006438 <BSP_ACCELERO_AccGetXYZ>
	  BSP_MAGNETO_GetXYZ(MAGNETO_XYZ);
 8005ae6:	483b      	ldr	r0, [pc, #236]	; (8005bd4 <main+0x19c>)
 8005ae8:	f000 fd04 	bl	80064f4 <BSP_MAGNETO_GetXYZ>
	  PRESSURE_VALUE = BSP_PSENSOR_ReadPressure();
 8005aec:	f000 fd3a 	bl	8006564 <BSP_PSENSOR_ReadPressure>
 8005af0:	eef0 7a40 	vmov.f32	s15, s0
 8005af4:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <main+0x1a0>)
 8005af6:	edc3 7a00 	vstr	s15, [r3]
	  TEMP_VALUE = BSP_TSENSOR_ReadTemp();
 8005afa:	f000 fd5d 	bl	80065b8 <BSP_TSENSOR_ReadTemp>
 8005afe:	eef0 7a40 	vmov.f32	s15, s0
 8005b02:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <main+0x1a4>)
 8005b04:	edc3 7a00 	vstr	s15, [r3]

	  // add the values to the buffers
	  sprintf(ACCELERO_BUFFER, "\nAccelerometer values:\nX: %d\nY: %d\nZ: %d\n", ACCELERO_XYZ[0], ACCELERO_XYZ[1], ACCELERO_XYZ[2]);
 8005b08:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <main+0x198>)
 8005b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4b2f      	ldr	r3, [pc, #188]	; (8005bd0 <main+0x198>)
 8005b12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b16:	4619      	mov	r1, r3
 8005b18:	4b2d      	ldr	r3, [pc, #180]	; (8005bd0 <main+0x198>)
 8005b1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	460b      	mov	r3, r1
 8005b22:	492f      	ldr	r1, [pc, #188]	; (8005be0 <main+0x1a8>)
 8005b24:	482f      	ldr	r0, [pc, #188]	; (8005be4 <main+0x1ac>)
 8005b26:	f000 ff7b 	bl	8006a20 <siprintf>
	  sprintf(MAGNETO_BUFFER, "\nMagneto values:\nX: %d\nY: %d\nZ: %d\n", MAGNETO_XYZ[0], MAGNETO_XYZ[1], MAGNETO_XYZ[2]);
 8005b2a:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <main+0x19c>)
 8005b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b30:	461a      	mov	r2, r3
 8005b32:	4b28      	ldr	r3, [pc, #160]	; (8005bd4 <main+0x19c>)
 8005b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <main+0x19c>)
 8005b3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	460b      	mov	r3, r1
 8005b44:	4928      	ldr	r1, [pc, #160]	; (8005be8 <main+0x1b0>)
 8005b46:	4829      	ldr	r0, [pc, #164]	; (8005bec <main+0x1b4>)
 8005b48:	f000 ff6a 	bl	8006a20 <siprintf>
	  sprintf(PRESSURE_BUFFER, "\nPressure reading: %d\n", (int) PRESSURE_VALUE);
 8005b4c:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <main+0x1a0>)
 8005b4e:	edd3 7a00 	vldr	s15, [r3]
 8005b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b56:	ee17 2a90 	vmov	r2, s15
 8005b5a:	4925      	ldr	r1, [pc, #148]	; (8005bf0 <main+0x1b8>)
 8005b5c:	4825      	ldr	r0, [pc, #148]	; (8005bf4 <main+0x1bc>)
 8005b5e:	f000 ff5f 	bl	8006a20 <siprintf>
	  sprintf(TEMP_BUFFER, "\nTemperature reading: %d\n", (int) TEMP_VALUE);
 8005b62:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <main+0x1a4>)
 8005b64:	edd3 7a00 	vldr	s15, [r3]
 8005b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b6c:	ee17 2a90 	vmov	r2, s15
 8005b70:	4921      	ldr	r1, [pc, #132]	; (8005bf8 <main+0x1c0>)
 8005b72:	4822      	ldr	r0, [pc, #136]	; (8005bfc <main+0x1c4>)
 8005b74:	f000 ff54 	bl	8006a20 <siprintf>

	  // transmit buffer over USART1
	  HAL_UART_Transmit(&huart1, ACCELERO_BUFFER, 100, 30000);
 8005b78:	f247 5330 	movw	r3, #30000	; 0x7530
 8005b7c:	2264      	movs	r2, #100	; 0x64
 8005b7e:	4919      	ldr	r1, [pc, #100]	; (8005be4 <main+0x1ac>)
 8005b80:	481f      	ldr	r0, [pc, #124]	; (8005c00 <main+0x1c8>)
 8005b82:	f7fd fd11 	bl	80035a8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, MAGNETO_BUFFER, 100, 30000);
 8005b86:	f247 5330 	movw	r3, #30000	; 0x7530
 8005b8a:	2264      	movs	r2, #100	; 0x64
 8005b8c:	4917      	ldr	r1, [pc, #92]	; (8005bec <main+0x1b4>)
 8005b8e:	481c      	ldr	r0, [pc, #112]	; (8005c00 <main+0x1c8>)
 8005b90:	f7fd fd0a 	bl	80035a8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, PRESSURE_BUFFER, 100, 30000);
 8005b94:	f247 5330 	movw	r3, #30000	; 0x7530
 8005b98:	2264      	movs	r2, #100	; 0x64
 8005b9a:	4916      	ldr	r1, [pc, #88]	; (8005bf4 <main+0x1bc>)
 8005b9c:	4818      	ldr	r0, [pc, #96]	; (8005c00 <main+0x1c8>)
 8005b9e:	f7fd fd03 	bl	80035a8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, TEMP_BUFFER, 100, 30000);
 8005ba2:	f247 5330 	movw	r3, #30000	; 0x7530
 8005ba6:	2264      	movs	r2, #100	; 0x64
 8005ba8:	4914      	ldr	r1, [pc, #80]	; (8005bfc <main+0x1c4>)
 8005baa:	4815      	ldr	r0, [pc, #84]	; (8005c00 <main+0x1c8>)
 8005bac:	f7fd fcfc 	bl	80035a8 <HAL_UART_Transmit>

	  // Delay to achieve 10 Hz sensor reading rate
	  HAL_Delay(100);
 8005bb0:	2064      	movs	r0, #100	; 0x64
 8005bb2:	f7fa fd15 	bl	80005e0 <HAL_Delay>
  {
 8005bb6:	e793      	b.n	8005ae0 <main+0xa8>
 8005bb8:	080072cc 	.word	0x080072cc
 8005bbc:	20001140 	.word	0x20001140
 8005bc0:	080072f4 	.word	0x080072f4
 8005bc4:	2000123c 	.word	0x2000123c
 8005bc8:	08007320 	.word	0x08007320
 8005bcc:	2000114c 	.word	0x2000114c
 8005bd0:	20001144 	.word	0x20001144
 8005bd4:	20001240 	.word	0x20001240
 8005bd8:	20001234 	.word	0x20001234
 8005bdc:	20001238 	.word	0x20001238
 8005be0:	08007238 	.word	0x08007238
 8005be4:	20001150 	.word	0x20001150
 8005be8:	08007264 	.word	0x08007264
 8005bec:	200010dc 	.word	0x200010dc
 8005bf0:	08007288 	.word	0x08007288
 8005bf4:	20001248 	.word	0x20001248
 8005bf8:	080072a0 	.word	0x080072a0
 8005bfc:	200012ac 	.word	0x200012ac
 8005c00:	200011b4 	.word	0x200011b4

08005c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b0b8      	sub	sp, #224	; 0xe0
 8005c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c0e:	2244      	movs	r2, #68	; 0x44
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fefb 	bl	8006a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c28:	463b      	mov	r3, r7
 8005c2a:	2288      	movs	r2, #136	; 0x88
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 feed 	bl	8006a0e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005c34:	2310      	movs	r3, #16
 8005c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005c46:	2360      	movs	r3, #96	; 0x60
 8005c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005c5e:	2328      	movs	r3, #40	; 0x28
 8005c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005c64:	2307      	movs	r3, #7
 8005c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005c70:	2302      	movs	r3, #2
 8005c72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fb fea8 	bl	80019d0 <HAL_RCC_OscConfig>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005c86:	f000 fa27 	bl	80060d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c8a:	230f      	movs	r3, #15
 8005c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c90:	2303      	movs	r3, #3
 8005c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005ca8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005cac:	2104      	movs	r1, #4
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fc fa74 	bl	800219c <HAL_RCC_ClockConfig>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005cba:	f000 fa0d 	bl	80060d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8005cbe:	2381      	movs	r3, #129	; 0x81
 8005cc0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005cca:	463b      	mov	r3, r7
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fc fc9b 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005cd8:	f000 f9fe 	bl	80060d8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005cdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005ce0:	f7fb fe20 	bl	8001924 <HAL_PWREx_ControlVoltageScaling>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005cea:	f000 f9f5 	bl	80060d8 <Error_Handler>
  }
}
 8005cee:	bf00      	nop
 8005cf0:	37e0      	adds	r7, #224	; 0xe0
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	; (8005d70 <MX_I2C2_Init+0x78>)
 8005d00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8005d02:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <MX_I2C2_Init+0x7c>)
 8005d06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005d08:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d0e:	4b17      	ldr	r3, [pc, #92]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005d1a:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d20:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005d32:	480e      	ldr	r0, [pc, #56]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d34:	f7fb f847 	bl	8000dc6 <HAL_I2C_Init>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005d3e:	f000 f9cb 	bl	80060d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005d42:	2100      	movs	r1, #0
 8005d44:	4809      	ldr	r0, [pc, #36]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d46:	f7fb fd47 	bl	80017d8 <HAL_I2CEx_ConfigAnalogFilter>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005d50:	f000 f9c2 	bl	80060d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005d54:	2100      	movs	r1, #0
 8005d56:	4805      	ldr	r0, [pc, #20]	; (8005d6c <MX_I2C2_Init+0x74>)
 8005d58:	f7fb fd89 	bl	800186e <HAL_I2CEx_ConfigDigitalFilter>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005d62:	f000 f9b9 	bl	80060d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005d66:	bf00      	nop
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20001090 	.word	0x20001090
 8005d70:	40005800 	.word	0x40005800
 8005d74:	10909cec 	.word	0x10909cec

08005d78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005d7e:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <MX_USART1_UART_Init+0x5c>)
 8005d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d82:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d8a:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d96:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005d9e:	220c      	movs	r2, #12
 8005da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005da8:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dae:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dba:	4805      	ldr	r0, [pc, #20]	; (8005dd0 <MX_USART1_UART_Init+0x58>)
 8005dbc:	f7fd fba6 	bl	800350c <HAL_UART_Init>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005dc6:	f000 f987 	bl	80060d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005dca:	bf00      	nop
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	200011b4 	.word	0x200011b4
 8005dd4:	40013800 	.word	0x40013800

08005dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dde:	f107 030c 	add.w	r3, r7, #12
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	609a      	str	r2, [r3, #8]
 8005dea:	60da      	str	r2, [r3, #12]
 8005dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005dee:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df2:	4a31      	ldr	r2, [pc, #196]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005df4:	f043 0310 	orr.w	r3, r3, #16
 8005df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e06:	4b2c      	ldr	r3, [pc, #176]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0a:	4a2b      	ldr	r2, [pc, #172]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005e0c:	f043 0304 	orr.w	r3, r3, #4
 8005e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e12:	4b29      	ldr	r3, [pc, #164]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e1e:	4b26      	ldr	r3, [pc, #152]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	4a25      	ldr	r2, [pc, #148]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005e24:	f043 0302 	orr.w	r3, r3, #2
 8005e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e2a:	4b23      	ldr	r3, [pc, #140]	; (8005eb8 <MX_GPIO_Init+0xe0>)
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ErrorLED_GPIO_Port, ErrorLED_Pin, GPIO_PIN_RESET);
 8005e36:	2200      	movs	r2, #0
 8005e38:	2108      	movs	r1, #8
 8005e3a:	4820      	ldr	r0, [pc, #128]	; (8005ebc <MX_GPIO_Init+0xe4>)
 8005e3c:	f7fa ff88 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FineLED_GPIO_Port, FineLED_Pin, GPIO_PIN_RESET);
 8005e40:	2200      	movs	r2, #0
 8005e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e46:	481e      	ldr	r0, [pc, #120]	; (8005ec0 <MX_GPIO_Init+0xe8>)
 8005e48:	f7fa ff82 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ErrorLED_Pin */
  GPIO_InitStruct.Pin = ErrorLED_Pin;
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e50:	2301      	movs	r3, #1
 8005e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ErrorLED_GPIO_Port, &GPIO_InitStruct);
 8005e5c:	f107 030c 	add.w	r3, r7, #12
 8005e60:	4619      	mov	r1, r3
 8005e62:	4816      	ldr	r0, [pc, #88]	; (8005ebc <MX_GPIO_Init+0xe4>)
 8005e64:	f7fa fcc0 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8005e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005e6e:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <MX_GPIO_Init+0xec>)
 8005e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005e76:	f107 030c 	add.w	r3, r7, #12
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4812      	ldr	r0, [pc, #72]	; (8005ec8 <MX_GPIO_Init+0xf0>)
 8005e7e:	f7fa fcb3 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FineLED_Pin */
  GPIO_InitStruct.Pin = FineLED_Pin;
 8005e82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FineLED_GPIO_Port, &GPIO_InitStruct);
 8005e94:	f107 030c 	add.w	r3, r7, #12
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <MX_GPIO_Init+0xe8>)
 8005e9c:	f7fa fca4 	bl	80007e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	2028      	movs	r0, #40	; 0x28
 8005ea6:	f7fa fc75 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005eaa:	2028      	movs	r0, #40	; 0x28
 8005eac:	f7fa fc8e 	bl	80007cc <HAL_NVIC_EnableIRQ>

}
 8005eb0:	bf00      	nop
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	48001000 	.word	0x48001000
 8005ec0:	48000400 	.word	0x48000400
 8005ec4:	10210000 	.word	0x10210000
 8005ec8:	48000800 	.word	0x48000800

08005ecc <StartButtonInterrupt>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonInterrupt */
void StartButtonInterrupt(void const * argument)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;) {
	  // Poll to check if the button is pressed
	  osDelay(200);
 8005ed4:	20c8      	movs	r0, #200	; 0xc8
 8005ed6:	f7fe f852 	bl	8003f7e <osDelay>
	  if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET) {
 8005eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ede:	480c      	ldr	r0, [pc, #48]	; (8005f10 <StartButtonInterrupt+0x44>)
 8005ee0:	f7fa ff1e 	bl	8000d20 <HAL_GPIO_ReadPin>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f4      	bne.n	8005ed4 <StartButtonInterrupt+0x8>
		  sensor_count++;
 8005eea:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <StartButtonInterrupt+0x48>)
 8005eec:	f993 3000 	ldrsb.w	r3, [r3]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	b25a      	sxtb	r2, r3
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <StartButtonInterrupt+0x48>)
 8005efa:	701a      	strb	r2, [r3, #0]
		  if (sensor_count == 4) {
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <StartButtonInterrupt+0x48>)
 8005efe:	f993 3000 	ldrsb.w	r3, [r3]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d1e6      	bne.n	8005ed4 <StartButtonInterrupt+0x8>
			  sensor_count = 0;
 8005f06:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <StartButtonInterrupt+0x48>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
	  osDelay(200);
 8005f0c:	e7e2      	b.n	8005ed4 <StartButtonInterrupt+0x8>
 8005f0e:	bf00      	nop
 8005f10:	48000800 	.word	0x48000800
 8005f14:	2000106c 	.word	0x2000106c

08005f18 <StartReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadSensors */
void StartReadSensors(void const * argument)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSensors */
  /* Infinite loop */
  for(;;) {
	  osDelay(50);
 8005f20:	2032      	movs	r0, #50	; 0x32
 8005f22:	f7fe f82c 	bl	8003f7e <osDelay>
	  if (sensor_count == 0) {
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <StartReadSensors+0x68>)
 8005f28:	f993 3000 	ldrsb.w	r3, [r3]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <StartReadSensors+0x20>
		  BSP_ACCELERO_AccGetXYZ(ACCELERO_XYZ);
 8005f30:	4814      	ldr	r0, [pc, #80]	; (8005f84 <StartReadSensors+0x6c>)
 8005f32:	f000 fa81 	bl	8006438 <BSP_ACCELERO_AccGetXYZ>
 8005f36:	e7f3      	b.n	8005f20 <StartReadSensors+0x8>
	  }
	  else if (sensor_count == 1) {
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <StartReadSensors+0x68>)
 8005f3a:	f993 3000 	ldrsb.w	r3, [r3]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d103      	bne.n	8005f4a <StartReadSensors+0x32>
		  BSP_MAGNETO_GetXYZ(MAGNETO_XYZ);
 8005f42:	4811      	ldr	r0, [pc, #68]	; (8005f88 <StartReadSensors+0x70>)
 8005f44:	f000 fad6 	bl	80064f4 <BSP_MAGNETO_GetXYZ>
 8005f48:	e7ea      	b.n	8005f20 <StartReadSensors+0x8>
	  }
	  else if (sensor_count == 2) {
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <StartReadSensors+0x68>)
 8005f4c:	f993 3000 	ldrsb.w	r3, [r3]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d107      	bne.n	8005f64 <StartReadSensors+0x4c>
		  PRESSURE_VALUE = BSP_PSENSOR_ReadPressure();
 8005f54:	f000 fb06 	bl	8006564 <BSP_PSENSOR_ReadPressure>
 8005f58:	eef0 7a40 	vmov.f32	s15, s0
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <StartReadSensors+0x74>)
 8005f5e:	edc3 7a00 	vstr	s15, [r3]
 8005f62:	e7dd      	b.n	8005f20 <StartReadSensors+0x8>
	  }
	  else if (sensor_count == 3) {
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <StartReadSensors+0x68>)
 8005f66:	f993 3000 	ldrsb.w	r3, [r3]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d1d8      	bne.n	8005f20 <StartReadSensors+0x8>
		  TEMP_VALUE = BSP_TSENSOR_ReadTemp();
 8005f6e:	f000 fb23 	bl	80065b8 <BSP_TSENSOR_ReadTemp>
 8005f72:	eef0 7a40 	vmov.f32	s15, s0
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <StartReadSensors+0x78>)
 8005f78:	edc3 7a00 	vstr	s15, [r3]
	  osDelay(50);
 8005f7c:	e7d0      	b.n	8005f20 <StartReadSensors+0x8>
 8005f7e:	bf00      	nop
 8005f80:	2000106c 	.word	0x2000106c
 8005f84:	20001144 	.word	0x20001144
 8005f88:	20001240 	.word	0x20001240
 8005f8c:	20001234 	.word	0x20001234
 8005f90:	20001238 	.word	0x20001238

08005f94 <StartTransmitReading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitReading */
void StartTransmitReading(void const * argument)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitReading */
  /* Infinite loop */
  for(;;) {
	  osDelay(50);
 8005f9c:	2032      	movs	r0, #50	; 0x32
 8005f9e:	f7fd ffee 	bl	8003f7e <osDelay>
	  if (sensor_count == 0) {
 8005fa2:	4b36      	ldr	r3, [pc, #216]	; (800607c <StartTransmitReading+0xe8>)
 8005fa4:	f993 3000 	ldrsb.w	r3, [r3]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d118      	bne.n	8005fde <StartTransmitReading+0x4a>
		  sprintf(ACCELERO_BUFFER, "\nAccelerometer values:\nX: %d\nY: %d\nZ: %d\n", ACCELERO_XYZ[0], ACCELERO_XYZ[1], ACCELERO_XYZ[2]);
 8005fac:	4b34      	ldr	r3, [pc, #208]	; (8006080 <StartTransmitReading+0xec>)
 8005fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b32      	ldr	r3, [pc, #200]	; (8006080 <StartTransmitReading+0xec>)
 8005fb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4b30      	ldr	r3, [pc, #192]	; (8006080 <StartTransmitReading+0xec>)
 8005fbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	492f      	ldr	r1, [pc, #188]	; (8006084 <StartTransmitReading+0xf0>)
 8005fc8:	482f      	ldr	r0, [pc, #188]	; (8006088 <StartTransmitReading+0xf4>)
 8005fca:	f000 fd29 	bl	8006a20 <siprintf>
		  HAL_UART_Transmit(&huart1, ACCELERO_BUFFER, 100, 30000);
 8005fce:	f247 5330 	movw	r3, #30000	; 0x7530
 8005fd2:	2264      	movs	r2, #100	; 0x64
 8005fd4:	492c      	ldr	r1, [pc, #176]	; (8006088 <StartTransmitReading+0xf4>)
 8005fd6:	482d      	ldr	r0, [pc, #180]	; (800608c <StartTransmitReading+0xf8>)
 8005fd8:	f7fd fae6 	bl	80035a8 <HAL_UART_Transmit>
 8005fdc:	e7de      	b.n	8005f9c <StartTransmitReading+0x8>
	  }
	  else if (sensor_count == 1) {
 8005fde:	4b27      	ldr	r3, [pc, #156]	; (800607c <StartTransmitReading+0xe8>)
 8005fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d118      	bne.n	800601a <StartTransmitReading+0x86>
		  sprintf(MAGNETO_BUFFER, "\nMagneto values:\nX: %d\nY: %d\nZ: %d\n", MAGNETO_XYZ[0], MAGNETO_XYZ[1], MAGNETO_XYZ[2]);
 8005fe8:	4b29      	ldr	r3, [pc, #164]	; (8006090 <StartTransmitReading+0xfc>)
 8005fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <StartTransmitReading+0xfc>)
 8005ff2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <StartTransmitReading+0xfc>)
 8005ffa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	460b      	mov	r3, r1
 8006002:	4924      	ldr	r1, [pc, #144]	; (8006094 <StartTransmitReading+0x100>)
 8006004:	4824      	ldr	r0, [pc, #144]	; (8006098 <StartTransmitReading+0x104>)
 8006006:	f000 fd0b 	bl	8006a20 <siprintf>
		  HAL_UART_Transmit(&huart1, MAGNETO_BUFFER, 100, 30000);
 800600a:	f247 5330 	movw	r3, #30000	; 0x7530
 800600e:	2264      	movs	r2, #100	; 0x64
 8006010:	4921      	ldr	r1, [pc, #132]	; (8006098 <StartTransmitReading+0x104>)
 8006012:	481e      	ldr	r0, [pc, #120]	; (800608c <StartTransmitReading+0xf8>)
 8006014:	f7fd fac8 	bl	80035a8 <HAL_UART_Transmit>
 8006018:	e7c0      	b.n	8005f9c <StartTransmitReading+0x8>
	  }
	  else if (sensor_count == 2) {
 800601a:	4b18      	ldr	r3, [pc, #96]	; (800607c <StartTransmitReading+0xe8>)
 800601c:	f993 3000 	ldrsb.w	r3, [r3]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d112      	bne.n	800604a <StartTransmitReading+0xb6>
		  sprintf(PRESSURE_BUFFER, "\nPressure reading: %d\n", (int) PRESSURE_VALUE);
 8006024:	4b1d      	ldr	r3, [pc, #116]	; (800609c <StartTransmitReading+0x108>)
 8006026:	edd3 7a00 	vldr	s15, [r3]
 800602a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800602e:	ee17 2a90 	vmov	r2, s15
 8006032:	491b      	ldr	r1, [pc, #108]	; (80060a0 <StartTransmitReading+0x10c>)
 8006034:	481b      	ldr	r0, [pc, #108]	; (80060a4 <StartTransmitReading+0x110>)
 8006036:	f000 fcf3 	bl	8006a20 <siprintf>
		  HAL_UART_Transmit(&huart1, PRESSURE_BUFFER, 100, 30000);
 800603a:	f247 5330 	movw	r3, #30000	; 0x7530
 800603e:	2264      	movs	r2, #100	; 0x64
 8006040:	4918      	ldr	r1, [pc, #96]	; (80060a4 <StartTransmitReading+0x110>)
 8006042:	4812      	ldr	r0, [pc, #72]	; (800608c <StartTransmitReading+0xf8>)
 8006044:	f7fd fab0 	bl	80035a8 <HAL_UART_Transmit>
 8006048:	e7a8      	b.n	8005f9c <StartTransmitReading+0x8>
	  }
	  else if (sensor_count == 3) {
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <StartTransmitReading+0xe8>)
 800604c:	f993 3000 	ldrsb.w	r3, [r3]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d1a3      	bne.n	8005f9c <StartTransmitReading+0x8>
		  sprintf(TEMP_BUFFER, "\nTemperature reading: %d\n", (int) TEMP_VALUE);
 8006054:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <StartTransmitReading+0x114>)
 8006056:	edd3 7a00 	vldr	s15, [r3]
 800605a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800605e:	ee17 2a90 	vmov	r2, s15
 8006062:	4912      	ldr	r1, [pc, #72]	; (80060ac <StartTransmitReading+0x118>)
 8006064:	4812      	ldr	r0, [pc, #72]	; (80060b0 <StartTransmitReading+0x11c>)
 8006066:	f000 fcdb 	bl	8006a20 <siprintf>
		  HAL_UART_Transmit(&huart1, TEMP_BUFFER, 100, 30000);
 800606a:	f247 5330 	movw	r3, #30000	; 0x7530
 800606e:	2264      	movs	r2, #100	; 0x64
 8006070:	490f      	ldr	r1, [pc, #60]	; (80060b0 <StartTransmitReading+0x11c>)
 8006072:	4806      	ldr	r0, [pc, #24]	; (800608c <StartTransmitReading+0xf8>)
 8006074:	f7fd fa98 	bl	80035a8 <HAL_UART_Transmit>
	  osDelay(50);
 8006078:	e790      	b.n	8005f9c <StartTransmitReading+0x8>
 800607a:	bf00      	nop
 800607c:	2000106c 	.word	0x2000106c
 8006080:	20001144 	.word	0x20001144
 8006084:	08007238 	.word	0x08007238
 8006088:	20001150 	.word	0x20001150
 800608c:	200011b4 	.word	0x200011b4
 8006090:	20001240 	.word	0x20001240
 8006094:	08007264 	.word	0x08007264
 8006098:	200010dc 	.word	0x200010dc
 800609c:	20001234 	.word	0x20001234
 80060a0:	08007288 	.word	0x08007288
 80060a4:	20001248 	.word	0x20001248
 80060a8:	20001238 	.word	0x20001238
 80060ac:	080072a0 	.word	0x080072a0
 80060b0:	200012ac 	.word	0x200012ac

080060b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a04      	ldr	r2, [pc, #16]	; (80060d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80060c6:	f7fa fa6b 	bl	80005a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40001000 	.word	0x40001000

080060d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80060f0:	4b27      	ldr	r3, [pc, #156]	; (8006190 <I2Cx_MspInit+0xa8>)
 80060f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f4:	4a26      	ldr	r2, [pc, #152]	; (8006190 <I2Cx_MspInit+0xa8>)
 80060f6:	f043 0302 	orr.w	r3, r3, #2
 80060fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060fc:	4b24      	ldr	r3, [pc, #144]	; (8006190 <I2Cx_MspInit+0xa8>)
 80060fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8006108:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800610c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800610e:	2312      	movs	r3, #18
 8006110:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8006112:	2301      	movs	r3, #1
 8006114:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006116:	2303      	movs	r3, #3
 8006118:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800611a:	2304      	movs	r3, #4
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800611e:	f107 0314 	add.w	r3, r7, #20
 8006122:	4619      	mov	r1, r3
 8006124:	481b      	ldr	r0, [pc, #108]	; (8006194 <I2Cx_MspInit+0xac>)
 8006126:	f7fa fb5f 	bl	80007e8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800612a:	f107 0314 	add.w	r3, r7, #20
 800612e:	4619      	mov	r1, r3
 8006130:	4818      	ldr	r0, [pc, #96]	; (8006194 <I2Cx_MspInit+0xac>)
 8006132:	f7fa fb59 	bl	80007e8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006136:	4b16      	ldr	r3, [pc, #88]	; (8006190 <I2Cx_MspInit+0xa8>)
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	4a15      	ldr	r2, [pc, #84]	; (8006190 <I2Cx_MspInit+0xa8>)
 800613c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006140:	6593      	str	r3, [r2, #88]	; 0x58
 8006142:	4b13      	ldr	r3, [pc, #76]	; (8006190 <I2Cx_MspInit+0xa8>)
 8006144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800614e:	4b10      	ldr	r3, [pc, #64]	; (8006190 <I2Cx_MspInit+0xa8>)
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <I2Cx_MspInit+0xa8>)
 8006154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006158:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800615a:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <I2Cx_MspInit+0xa8>)
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <I2Cx_MspInit+0xa8>)
 8006160:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006164:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8006166:	2200      	movs	r2, #0
 8006168:	210f      	movs	r1, #15
 800616a:	2021      	movs	r0, #33	; 0x21
 800616c:	f7fa fb12 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8006170:	2021      	movs	r0, #33	; 0x21
 8006172:	f7fa fb2b 	bl	80007cc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8006176:	2200      	movs	r2, #0
 8006178:	210f      	movs	r1, #15
 800617a:	2022      	movs	r0, #34	; 0x22
 800617c:	f7fa fb0a 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8006180:	2022      	movs	r0, #34	; 0x22
 8006182:	f7fa fb23 	bl	80007cc <HAL_NVIC_EnableIRQ>
}
 8006186:	bf00      	nop
 8006188:	3728      	adds	r7, #40	; 0x28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40021000 	.word	0x40021000
 8006194:	48000400 	.word	0x48000400

08006198 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a12      	ldr	r2, [pc, #72]	; (80061ec <I2Cx_Init+0x54>)
 80061a4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a11      	ldr	r2, [pc, #68]	; (80061f0 <I2Cx_Init+0x58>)
 80061aa:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff89 	bl	80060e8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fa fdf5 	bl	8000dc6 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80061dc:	2100      	movs	r1, #0
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fb fafa 	bl	80017d8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40005800 	.word	0x40005800
 80061f0:	00702681 	.word	0x00702681

080061f4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af04      	add	r7, sp, #16
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	4608      	mov	r0, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	461a      	mov	r2, r3
 8006202:	4603      	mov	r3, r0
 8006204:	72fb      	strb	r3, [r7, #11]
 8006206:	460b      	mov	r3, r1
 8006208:	813b      	strh	r3, [r7, #8]
 800620a:	4613      	mov	r3, r2
 800620c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006212:	7afb      	ldrb	r3, [r7, #11]
 8006214:	b299      	uxth	r1, r3
 8006216:	88f8      	ldrh	r0, [r7, #6]
 8006218:	893a      	ldrh	r2, [r7, #8]
 800621a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800621e:	9302      	str	r3, [sp, #8]
 8006220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	4603      	mov	r3, r0
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7fa ff9e 	bl	800116c <HAL_I2C_Mem_Read>
 8006230:	4603      	mov	r3, r0
 8006232:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	4619      	mov	r1, r3
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f832 	bl	80062a8 <I2Cx_Error>
  }
  return status;
 8006244:	7dfb      	ldrb	r3, [r7, #23]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b08a      	sub	sp, #40	; 0x28
 8006252:	af04      	add	r7, sp, #16
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	4608      	mov	r0, r1
 8006258:	4611      	mov	r1, r2
 800625a:	461a      	mov	r2, r3
 800625c:	4603      	mov	r3, r0
 800625e:	72fb      	strb	r3, [r7, #11]
 8006260:	460b      	mov	r3, r1
 8006262:	813b      	strh	r3, [r7, #8]
 8006264:	4613      	mov	r3, r2
 8006266:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	b299      	uxth	r1, r3
 8006270:	88f8      	ldrh	r0, [r7, #6]
 8006272:	893a      	ldrh	r2, [r7, #8]
 8006274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006278:	9302      	str	r3, [sp, #8]
 800627a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	4603      	mov	r3, r0
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7fa fe5d 	bl	8000f44 <HAL_I2C_Mem_Write>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	4619      	mov	r1, r3
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f805 	bl	80062a8 <I2Cx_Error>
  }
  return status;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fa fe15 	bl	8000ee4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff ff6c 	bl	8006198 <I2Cx_Init>
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80062cc:	4802      	ldr	r0, [pc, #8]	; (80062d8 <SENSOR_IO_Init+0x10>)
 80062ce:	f7ff ff63 	bl	8006198 <I2Cx_Init>
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20001390 	.word	0x20001390

080062dc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]
 80062e6:	460b      	mov	r3, r1
 80062e8:	71bb      	strb	r3, [r7, #6]
 80062ea:	4613      	mov	r3, r2
 80062ec:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80062ee:	79bb      	ldrb	r3, [r7, #6]
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	79f9      	ldrb	r1, [r7, #7]
 80062f4:	2301      	movs	r3, #1
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	1d7b      	adds	r3, r7, #5
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	2301      	movs	r3, #1
 80062fe:	4803      	ldr	r0, [pc, #12]	; (800630c <SENSOR_IO_Write+0x30>)
 8006300:	f7ff ffa5 	bl	800624e <I2Cx_WriteMultiple>
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20001390 	.word	0x20001390

08006310 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af02      	add	r7, sp, #8
 8006316:	4603      	mov	r3, r0
 8006318:	460a      	mov	r2, r1
 800631a:	71fb      	strb	r3, [r7, #7]
 800631c:	4613      	mov	r3, r2
 800631e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006324:	79bb      	ldrb	r3, [r7, #6]
 8006326:	b29a      	uxth	r2, r3
 8006328:	79f9      	ldrb	r1, [r7, #7]
 800632a:	2301      	movs	r3, #1
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	f107 030f 	add.w	r3, r7, #15
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	2301      	movs	r3, #1
 8006336:	4804      	ldr	r0, [pc, #16]	; (8006348 <SENSOR_IO_Read+0x38>)
 8006338:	f7ff ff5c 	bl	80061f4 <I2Cx_ReadMultiple>

  return read_value;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20001390 	.word	0x20001390

0800634c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af02      	add	r7, sp, #8
 8006352:	603a      	str	r2, [r7, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	4603      	mov	r3, r0
 8006358:	71fb      	strb	r3, [r7, #7]
 800635a:	460b      	mov	r3, r1
 800635c:	71bb      	strb	r3, [r7, #6]
 800635e:	4613      	mov	r3, r2
 8006360:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8006362:	79bb      	ldrb	r3, [r7, #6]
 8006364:	b29a      	uxth	r2, r3
 8006366:	79f9      	ldrb	r1, [r7, #7]
 8006368:	88bb      	ldrh	r3, [r7, #4]
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	2301      	movs	r3, #1
 8006372:	4804      	ldr	r0, [pc, #16]	; (8006384 <SENSOR_IO_ReadMultiple+0x38>)
 8006374:	f7ff ff3e 	bl	80061f4 <I2Cx_ReadMultiple>
 8006378:	4603      	mov	r3, r0
 800637a:	b29b      	uxth	r3, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20001390 	.word	0x20001390

08006388 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8006392:	2300      	movs	r3, #0
 8006394:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006396:	4b19      	ldr	r3, [pc, #100]	; (80063fc <BSP_ACCELERO_Init+0x74>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	4798      	blx	r3
 800639c:	4603      	mov	r3, r0
 800639e:	2b6a      	cmp	r3, #106	; 0x6a
 80063a0:	d002      	beq.n	80063a8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	73fb      	strb	r3, [r7, #15]
 80063a6:	e024      	b.n	80063f2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80063a8:	4b15      	ldr	r3, [pc, #84]	; (8006400 <BSP_ACCELERO_Init+0x78>)
 80063aa:	4a14      	ldr	r2, [pc, #80]	; (80063fc <BSP_ACCELERO_Init+0x74>)
 80063ac:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80063ae:	2330      	movs	r3, #48	; 0x30
 80063b0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80063b6:	2300      	movs	r3, #0
 80063b8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80063ba:	2340      	movs	r3, #64	; 0x40
 80063bc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80063c6:	797a      	ldrb	r2, [r7, #5]
 80063c8:	7abb      	ldrb	r3, [r7, #10]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80063d0:	7a3b      	ldrb	r3, [r7, #8]
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	b21a      	sxth	r2, r3
 80063dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	b21b      	sxth	r3, r3
 80063e4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <BSP_ACCELERO_Init+0x78>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	89ba      	ldrh	r2, [r7, #12]
 80063ee:	4610      	mov	r0, r2
 80063f0:	4798      	blx	r3
  }  

  return ret;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	2000005c 	.word	0x2000005c
 8006400:	20001070 	.word	0x20001070

08006404 <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <BSP_ACCELERO_LowPower+0x30>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 8006416:	4b07      	ldr	r3, [pc, #28]	; (8006434 <BSP_ACCELERO_LowPower+0x30>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 8006420:	4b04      	ldr	r3, [pc, #16]	; (8006434 <BSP_ACCELERO_LowPower+0x30>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	4610      	mov	r0, r2
 800642a:	4798      	blx	r3
    }
  }
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20001070 	.word	0x20001070

08006438 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8006440:	4b08      	ldr	r3, [pc, #32]	; (8006464 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8006452:	4b04      	ldr	r3, [pc, #16]	; (8006464 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
    }
  }
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20001070 	.word	0x20001070

08006468 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <BSP_MAGNETO_Init+0x50>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	4798      	blx	r3
 8006478:	4603      	mov	r3, r0
 800647a:	2b3d      	cmp	r3, #61	; 0x3d
 800647c:	d002      	beq.n	8006484 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	71fb      	strb	r3, [r7, #7]
 8006482:	e013      	b.n	80064ac <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8006484:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <BSP_MAGNETO_Init+0x54>)
 8006486:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <BSP_MAGNETO_Init+0x50>)
 8006488:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800648a:	2358      	movs	r3, #88	; 0x58
 800648c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800648e:	2300      	movs	r3, #0
 8006490:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8006492:	2300      	movs	r3, #0
 8006494:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8006496:	2308      	movs	r3, #8
 8006498:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800649a:	2340      	movs	r3, #64	; 0x40
 800649c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <BSP_MAGNETO_Init+0x54>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	463a      	mov	r2, r7
 80064a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064aa:	4798      	blx	r3
  } 

  return ret;  
 80064ac:	79fb      	ldrb	r3, [r7, #7]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	2000001c 	.word	0x2000001c
 80064bc:	20001074 	.word	0x20001074

080064c0 <BSP_MAGNETO_LowPower>:

/**
  * @brief  Set/Unset the MAGNETO in low power mode.
  */
void BSP_MAGNETO_LowPower(uint16_t status)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* Put the magnetometer in low power mode */
  if(MagnetoDrv != NULL)
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <BSP_MAGNETO_LowPower+0x30>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <BSP_MAGNETO_LowPower+0x28>
  {
    if(MagnetoDrv->LowPower != NULL)
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <BSP_MAGNETO_LowPower+0x30>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <BSP_MAGNETO_LowPower+0x28>
    {
      MagnetoDrv->LowPower(status);
 80064dc:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <BSP_MAGNETO_LowPower+0x30>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	4610      	mov	r0, r2
 80064e6:	4798      	blx	r3
    }
  }
}
 80064e8:	bf00      	nop
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20001074 	.word	0x20001074

080064f4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80064fc:	4b08      	ldr	r3, [pc, #32]	; (8006520 <BSP_MAGNETO_GetXYZ+0x2c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <BSP_MAGNETO_GetXYZ+0x2c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	2b00      	cmp	r3, #0
 800650c:	d004      	beq.n	8006518 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800650e:	4b04      	ldr	r3, [pc, #16]	; (8006520 <BSP_MAGNETO_GetXYZ+0x2c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
    }
  }
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20001074 	.word	0x20001074

08006524 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <BSP_PSENSOR_Init+0x38>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	20ba      	movs	r0, #186	; 0xba
 8006530:	4798      	blx	r3
 8006532:	4603      	mov	r3, r0
 8006534:	2bb1      	cmp	r3, #177	; 0xb1
 8006536:	d002      	beq.n	800653e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	607b      	str	r3, [r7, #4]
 800653c:	e009      	b.n	8006552 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800653e:	4b08      	ldr	r3, [pc, #32]	; (8006560 <BSP_PSENSOR_Init+0x3c>)
 8006540:	4a06      	ldr	r2, [pc, #24]	; (800655c <BSP_PSENSOR_Init+0x38>)
 8006542:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <BSP_PSENSOR_Init+0x3c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	20ba      	movs	r0, #186	; 0xba
 800654c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8006552:	687b      	ldr	r3, [r7, #4]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000050 	.word	0x20000050
 8006560:	20001078 	.word	0x20001078

08006564 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8006568:	4b04      	ldr	r3, [pc, #16]	; (800657c <BSP_PSENSOR_ReadPressure+0x18>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	20ba      	movs	r0, #186	; 0xba
 8006570:	4798      	blx	r3
 8006572:	eef0 7a40 	vmov.f32	s15, s0
}
 8006576:	eeb0 0a67 	vmov.f32	s0, s15
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20001078 	.word	0x20001078

08006580 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800658a:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <BSP_TSENSOR_Init+0x30>)
 800658c:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <BSP_TSENSOR_Init+0x34>)
 800658e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8006590:	f7ff fe9a 	bl	80062c8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <BSP_TSENSOR_Init+0x30>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2100      	movs	r1, #0
 800659c:	20be      	movs	r0, #190	; 0xbe
 800659e:	4798      	blx	r3

  ret = TSENSOR_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80065a4:	79fb      	ldrb	r3, [r7, #7]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2000107c 	.word	0x2000107c
 80065b4:	2000000c 	.word	0x2000000c

080065b8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80065bc:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <BSP_TSENSOR_ReadTemp+0x18>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	20be      	movs	r0, #190	; 0xbe
 80065c4:	4798      	blx	r3
 80065c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80065ca:	eeb0 0a67 	vmov.f32	s0, s15
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	2000107c 	.word	0x2000107c

080065d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <HAL_MspInit+0x44>)
 80065dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065de:	4a0e      	ldr	r2, [pc, #56]	; (8006618 <HAL_MspInit+0x44>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	6613      	str	r3, [r2, #96]	; 0x60
 80065e6:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <HAL_MspInit+0x44>)
 80065e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	607b      	str	r3, [r7, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <HAL_MspInit+0x44>)
 80065f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f6:	4a08      	ldr	r2, [pc, #32]	; (8006618 <HAL_MspInit+0x44>)
 80065f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fc:	6593      	str	r3, [r2, #88]	; 0x58
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <HAL_MspInit+0x44>)
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000

0800661c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	; 0x28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a17      	ldr	r2, [pc, #92]	; (8006698 <HAL_I2C_MspInit+0x7c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d128      	bne.n	8006690 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800663e:	4b17      	ldr	r3, [pc, #92]	; (800669c <HAL_I2C_MspInit+0x80>)
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	4a16      	ldr	r2, [pc, #88]	; (800669c <HAL_I2C_MspInit+0x80>)
 8006644:	f043 0302 	orr.w	r3, r3, #2
 8006648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800664a:	4b14      	ldr	r3, [pc, #80]	; (800669c <HAL_I2C_MspInit+0x80>)
 800664c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006656:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800665a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800665c:	2312      	movs	r3, #18
 800665e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006660:	2301      	movs	r3, #1
 8006662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006664:	2303      	movs	r3, #3
 8006666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006668:	2304      	movs	r3, #4
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	4619      	mov	r1, r3
 8006672:	480b      	ldr	r0, [pc, #44]	; (80066a0 <HAL_I2C_MspInit+0x84>)
 8006674:	f7fa f8b8 	bl	80007e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <HAL_I2C_MspInit+0x80>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667c:	4a07      	ldr	r2, [pc, #28]	; (800669c <HAL_I2C_MspInit+0x80>)
 800667e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006682:	6593      	str	r3, [r2, #88]	; 0x58
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <HAL_I2C_MspInit+0x80>)
 8006686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006690:	bf00      	nop
 8006692:	3728      	adds	r7, #40	; 0x28
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40005800 	.word	0x40005800
 800669c:	40021000 	.word	0x40021000
 80066a0:	48000400 	.word	0x48000400

080066a4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a0b      	ldr	r2, [pc, #44]	; (80066e0 <HAL_I2C_MspDeInit+0x3c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10f      	bne.n	80066d6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <HAL_I2C_MspDeInit+0x40>)
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <HAL_I2C_MspDeInit+0x40>)
 80066bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80066c0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80066c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066c6:	4808      	ldr	r0, [pc, #32]	; (80066e8 <HAL_I2C_MspDeInit+0x44>)
 80066c8:	f7fa fa36 	bl	8000b38 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80066cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066d0:	4805      	ldr	r0, [pc, #20]	; (80066e8 <HAL_I2C_MspDeInit+0x44>)
 80066d2:	f7fa fa31 	bl	8000b38 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40005800 	.word	0x40005800
 80066e4:	40021000 	.word	0x40021000
 80066e8:	48000400 	.word	0x48000400

080066ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	; 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f4:	f107 0314 	add.w	r3, r7, #20
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	60da      	str	r2, [r3, #12]
 8006702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <HAL_UART_MspInit+0x7c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d127      	bne.n	800675e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800670e:	4b17      	ldr	r3, [pc, #92]	; (800676c <HAL_UART_MspInit+0x80>)
 8006710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006712:	4a16      	ldr	r2, [pc, #88]	; (800676c <HAL_UART_MspInit+0x80>)
 8006714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006718:	6613      	str	r3, [r2, #96]	; 0x60
 800671a:	4b14      	ldr	r3, [pc, #80]	; (800676c <HAL_UART_MspInit+0x80>)
 800671c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006726:	4b11      	ldr	r3, [pc, #68]	; (800676c <HAL_UART_MspInit+0x80>)
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	4a10      	ldr	r2, [pc, #64]	; (800676c <HAL_UART_MspInit+0x80>)
 800672c:	f043 0302 	orr.w	r3, r3, #2
 8006730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006732:	4b0e      	ldr	r3, [pc, #56]	; (800676c <HAL_UART_MspInit+0x80>)
 8006734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800673e:	23c0      	movs	r3, #192	; 0xc0
 8006740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006742:	2302      	movs	r3, #2
 8006744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006746:	2300      	movs	r3, #0
 8006748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800674a:	2303      	movs	r3, #3
 800674c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800674e:	2307      	movs	r3, #7
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006752:	f107 0314 	add.w	r3, r7, #20
 8006756:	4619      	mov	r1, r3
 8006758:	4805      	ldr	r0, [pc, #20]	; (8006770 <HAL_UART_MspInit+0x84>)
 800675a:	f7fa f845 	bl	80007e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800675e:	bf00      	nop
 8006760:	3728      	adds	r7, #40	; 0x28
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40013800 	.word	0x40013800
 800676c:	40021000 	.word	0x40021000
 8006770:	48000400 	.word	0x48000400

08006774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08c      	sub	sp, #48	; 0x30
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006784:	2200      	movs	r2, #0
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	2036      	movs	r0, #54	; 0x36
 800678a:	f7fa f803 	bl	8000794 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800678e:	2036      	movs	r0, #54	; 0x36
 8006790:	f7fa f81c 	bl	80007cc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006794:	4b1e      	ldr	r3, [pc, #120]	; (8006810 <HAL_InitTick+0x9c>)
 8006796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006798:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <HAL_InitTick+0x9c>)
 800679a:	f043 0310 	orr.w	r3, r3, #16
 800679e:	6593      	str	r3, [r2, #88]	; 0x58
 80067a0:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_InitTick+0x9c>)
 80067a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80067ac:	f107 0210 	add.w	r2, r7, #16
 80067b0:	f107 0314 	add.w	r3, r7, #20
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fb fe94 	bl	80024e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80067bc:	f7fb fe66 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 80067c0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	4a13      	ldr	r2, [pc, #76]	; (8006814 <HAL_InitTick+0xa0>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	0c9b      	lsrs	r3, r3, #18
 80067cc:	3b01      	subs	r3, #1
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80067d0:	4b11      	ldr	r3, [pc, #68]	; (8006818 <HAL_InitTick+0xa4>)
 80067d2:	4a12      	ldr	r2, [pc, #72]	; (800681c <HAL_InitTick+0xa8>)
 80067d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80067d6:	4b10      	ldr	r3, [pc, #64]	; (8006818 <HAL_InitTick+0xa4>)
 80067d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80067dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80067de:	4a0e      	ldr	r2, [pc, #56]	; (8006818 <HAL_InitTick+0xa4>)
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <HAL_InitTick+0xa4>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <HAL_InitTick+0xa4>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80067f0:	4809      	ldr	r0, [pc, #36]	; (8006818 <HAL_InitTick+0xa4>)
 80067f2:	f7fc fbb9 	bl	8002f68 <HAL_TIM_Base_Init>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80067fc:	4806      	ldr	r0, [pc, #24]	; (8006818 <HAL_InitTick+0xa4>)
 80067fe:	f7fc fc15 	bl	800302c <HAL_TIM_Base_Start_IT>
 8006802:	4603      	mov	r3, r0
 8006804:	e000      	b.n	8006808 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
}
 8006808:	4618      	mov	r0, r3
 800680a:	3730      	adds	r7, #48	; 0x30
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40021000 	.word	0x40021000
 8006814:	431bde83 	.word	0x431bde83
 8006818:	200013dc 	.word	0x200013dc
 800681c:	40001000 	.word	0x40001000

08006820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006824:	bf00      	nop
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800682e:	b480      	push	{r7}
 8006830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006832:	e7fe      	b.n	8006832 <HardFault_Handler+0x4>

08006834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006838:	e7fe      	b.n	8006838 <MemManage_Handler+0x4>

0800683a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800683a:	b480      	push	{r7}
 800683c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800683e:	e7fe      	b.n	800683e <BusFault_Handler+0x4>

08006840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006844:	e7fe      	b.n	8006844 <UsageFault_Handler+0x4>

08006846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006846:	b480      	push	{r7}
 8006848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800684a:	bf00      	nop
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006858:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800685c:	f7fa fa90 	bl	8000d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006860:	bf00      	nop
 8006862:	bd80      	pop	{r7, pc}

08006864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006868:	4802      	ldr	r0, [pc, #8]	; (8006874 <TIM6_DAC_IRQHandler+0x10>)
 800686a:	f7fc fc4f 	bl	800310c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	200013dc 	.word	0x200013dc

08006878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006880:	4a14      	ldr	r2, [pc, #80]	; (80068d4 <_sbrk+0x5c>)
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <_sbrk+0x60>)
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <_sbrk+0x64>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <_sbrk+0x64>)
 8006896:	4a12      	ldr	r2, [pc, #72]	; (80068e0 <_sbrk+0x68>)
 8006898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <_sbrk+0x64>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4413      	add	r3, r2
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d207      	bcs.n	80068b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068a8:	f000 f87c 	bl	80069a4 <__errno>
 80068ac:	4602      	mov	r2, r0
 80068ae:	230c      	movs	r3, #12
 80068b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295
 80068b6:	e009      	b.n	80068cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068b8:	4b08      	ldr	r3, [pc, #32]	; (80068dc <_sbrk+0x64>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <_sbrk+0x64>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4413      	add	r3, r2
 80068c6:	4a05      	ldr	r2, [pc, #20]	; (80068dc <_sbrk+0x64>)
 80068c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068ca:	68fb      	ldr	r3, [r7, #12]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20018000 	.word	0x20018000
 80068d8:	00000400 	.word	0x00000400
 80068dc:	20001080 	.word	0x20001080
 80068e0:	20001430 	.word	0x20001430

080068e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068e8:	4b17      	ldr	r3, [pc, #92]	; (8006948 <SystemInit+0x64>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	4a16      	ldr	r2, [pc, #88]	; (8006948 <SystemInit+0x64>)
 80068f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80068f8:	4b14      	ldr	r3, [pc, #80]	; (800694c <SystemInit+0x68>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a13      	ldr	r2, [pc, #76]	; (800694c <SystemInit+0x68>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006904:	4b11      	ldr	r3, [pc, #68]	; (800694c <SystemInit+0x68>)
 8006906:	2200      	movs	r2, #0
 8006908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800690a:	4b10      	ldr	r3, [pc, #64]	; (800694c <SystemInit+0x68>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a0f      	ldr	r2, [pc, #60]	; (800694c <SystemInit+0x68>)
 8006910:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006914:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800691a:	4b0c      	ldr	r3, [pc, #48]	; (800694c <SystemInit+0x68>)
 800691c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006920:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <SystemInit+0x68>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a09      	ldr	r2, [pc, #36]	; (800694c <SystemInit+0x68>)
 8006928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800692c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800692e:	4b07      	ldr	r3, [pc, #28]	; (800694c <SystemInit+0x68>)
 8006930:	2200      	movs	r2, #0
 8006932:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006934:	4b04      	ldr	r3, [pc, #16]	; (8006948 <SystemInit+0x64>)
 8006936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800693a:	609a      	str	r2, [r3, #8]
#endif
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	e000ed00 	.word	0xe000ed00
 800694c:	40021000 	.word	0x40021000

08006950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006988 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006954:	f7ff ffc6 	bl	80068e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006958:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800695a:	e003      	b.n	8006964 <LoopCopyDataInit>

0800695c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800695c:	4b0b      	ldr	r3, [pc, #44]	; (800698c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800695e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006960:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006962:	3104      	adds	r1, #4

08006964 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006964:	480a      	ldr	r0, [pc, #40]	; (8006990 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006968:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800696a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800696c:	d3f6      	bcc.n	800695c <CopyDataInit>
	ldr	r2, =_sbss
 800696e:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006970:	e002      	b.n	8006978 <LoopFillZerobss>

08006972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006972:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006974:	f842 3b04 	str.w	r3, [r2], #4

08006978 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006978:	4b08      	ldr	r3, [pc, #32]	; (800699c <LoopForever+0x16>)
	cmp	r2, r3
 800697a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800697c:	d3f9      	bcc.n	8006972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800697e:	f000 f817 	bl	80069b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006982:	f7ff f859 	bl	8005a38 <main>

08006986 <LoopForever>:

LoopForever:
    b LoopForever
 8006986:	e7fe      	b.n	8006986 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006988:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800698c:	080073c8 	.word	0x080073c8
	ldr	r0, =_sdata
 8006990:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006994:	200000f8 	.word	0x200000f8
	ldr	r2, =_sbss
 8006998:	200000f8 	.word	0x200000f8
	ldr	r3, = _ebss
 800699c:	2000142c 	.word	0x2000142c

080069a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80069a0:	e7fe      	b.n	80069a0 <ADC1_2_IRQHandler>
	...

080069a4 <__errno>:
 80069a4:	4b01      	ldr	r3, [pc, #4]	; (80069ac <__errno+0x8>)
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000094 	.word	0x20000094

080069b0 <__libc_init_array>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4e0d      	ldr	r6, [pc, #52]	; (80069e8 <__libc_init_array+0x38>)
 80069b4:	4c0d      	ldr	r4, [pc, #52]	; (80069ec <__libc_init_array+0x3c>)
 80069b6:	1ba4      	subs	r4, r4, r6
 80069b8:	10a4      	asrs	r4, r4, #2
 80069ba:	2500      	movs	r5, #0
 80069bc:	42a5      	cmp	r5, r4
 80069be:	d109      	bne.n	80069d4 <__libc_init_array+0x24>
 80069c0:	4e0b      	ldr	r6, [pc, #44]	; (80069f0 <__libc_init_array+0x40>)
 80069c2:	4c0c      	ldr	r4, [pc, #48]	; (80069f4 <__libc_init_array+0x44>)
 80069c4:	f000 fc28 	bl	8007218 <_init>
 80069c8:	1ba4      	subs	r4, r4, r6
 80069ca:	10a4      	asrs	r4, r4, #2
 80069cc:	2500      	movs	r5, #0
 80069ce:	42a5      	cmp	r5, r4
 80069d0:	d105      	bne.n	80069de <__libc_init_array+0x2e>
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069d8:	4798      	blx	r3
 80069da:	3501      	adds	r5, #1
 80069dc:	e7ee      	b.n	80069bc <__libc_init_array+0xc>
 80069de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069e2:	4798      	blx	r3
 80069e4:	3501      	adds	r5, #1
 80069e6:	e7f2      	b.n	80069ce <__libc_init_array+0x1e>
 80069e8:	080073c0 	.word	0x080073c0
 80069ec:	080073c0 	.word	0x080073c0
 80069f0:	080073c0 	.word	0x080073c0
 80069f4:	080073c4 	.word	0x080073c4

080069f8 <memcpy>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	1e43      	subs	r3, r0, #1
 80069fc:	440a      	add	r2, r1
 80069fe:	4291      	cmp	r1, r2
 8006a00:	d100      	bne.n	8006a04 <memcpy+0xc>
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0c:	e7f7      	b.n	80069fe <memcpy+0x6>

08006a0e <memset>:
 8006a0e:	4402      	add	r2, r0
 8006a10:	4603      	mov	r3, r0
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d100      	bne.n	8006a18 <memset+0xa>
 8006a16:	4770      	bx	lr
 8006a18:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1c:	e7f9      	b.n	8006a12 <memset+0x4>
	...

08006a20 <siprintf>:
 8006a20:	b40e      	push	{r1, r2, r3}
 8006a22:	b500      	push	{lr}
 8006a24:	b09c      	sub	sp, #112	; 0x70
 8006a26:	ab1d      	add	r3, sp, #116	; 0x74
 8006a28:	9002      	str	r0, [sp, #8]
 8006a2a:	9006      	str	r0, [sp, #24]
 8006a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a30:	4809      	ldr	r0, [pc, #36]	; (8006a58 <siprintf+0x38>)
 8006a32:	9107      	str	r1, [sp, #28]
 8006a34:	9104      	str	r1, [sp, #16]
 8006a36:	4909      	ldr	r1, [pc, #36]	; (8006a5c <siprintf+0x3c>)
 8006a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a3c:	9105      	str	r1, [sp, #20]
 8006a3e:	6800      	ldr	r0, [r0, #0]
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	a902      	add	r1, sp, #8
 8006a44:	f000 f866 	bl	8006b14 <_svfiprintf_r>
 8006a48:	9b02      	ldr	r3, [sp, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	b01c      	add	sp, #112	; 0x70
 8006a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a54:	b003      	add	sp, #12
 8006a56:	4770      	bx	lr
 8006a58:	20000094 	.word	0x20000094
 8006a5c:	ffff0208 	.word	0xffff0208

08006a60 <__ssputs_r>:
 8006a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	688e      	ldr	r6, [r1, #8]
 8006a66:	429e      	cmp	r6, r3
 8006a68:	4682      	mov	sl, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	4690      	mov	r8, r2
 8006a6e:	4699      	mov	r9, r3
 8006a70:	d837      	bhi.n	8006ae2 <__ssputs_r+0x82>
 8006a72:	898a      	ldrh	r2, [r1, #12]
 8006a74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a78:	d031      	beq.n	8006ade <__ssputs_r+0x7e>
 8006a7a:	6825      	ldr	r5, [r4, #0]
 8006a7c:	6909      	ldr	r1, [r1, #16]
 8006a7e:	1a6f      	subs	r7, r5, r1
 8006a80:	6965      	ldr	r5, [r4, #20]
 8006a82:	2302      	movs	r3, #2
 8006a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a88:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a8c:	f109 0301 	add.w	r3, r9, #1
 8006a90:	443b      	add	r3, r7
 8006a92:	429d      	cmp	r5, r3
 8006a94:	bf38      	it	cc
 8006a96:	461d      	movcc	r5, r3
 8006a98:	0553      	lsls	r3, r2, #21
 8006a9a:	d530      	bpl.n	8006afe <__ssputs_r+0x9e>
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f000 fb21 	bl	80070e4 <_malloc_r>
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	b950      	cbnz	r0, 8006abc <__ssputs_r+0x5c>
 8006aa6:	230c      	movs	r3, #12
 8006aa8:	f8ca 3000 	str.w	r3, [sl]
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abc:	463a      	mov	r2, r7
 8006abe:	6921      	ldr	r1, [r4, #16]
 8006ac0:	f7ff ff9a 	bl	80069f8 <memcpy>
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	6126      	str	r6, [r4, #16]
 8006ad2:	6165      	str	r5, [r4, #20]
 8006ad4:	443e      	add	r6, r7
 8006ad6:	1bed      	subs	r5, r5, r7
 8006ad8:	6026      	str	r6, [r4, #0]
 8006ada:	60a5      	str	r5, [r4, #8]
 8006adc:	464e      	mov	r6, r9
 8006ade:	454e      	cmp	r6, r9
 8006ae0:	d900      	bls.n	8006ae4 <__ssputs_r+0x84>
 8006ae2:	464e      	mov	r6, r9
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	4641      	mov	r1, r8
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	f000 fa93 	bl	8007014 <memmove>
 8006aee:	68a3      	ldr	r3, [r4, #8]
 8006af0:	1b9b      	subs	r3, r3, r6
 8006af2:	60a3      	str	r3, [r4, #8]
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	441e      	add	r6, r3
 8006af8:	6026      	str	r6, [r4, #0]
 8006afa:	2000      	movs	r0, #0
 8006afc:	e7dc      	b.n	8006ab8 <__ssputs_r+0x58>
 8006afe:	462a      	mov	r2, r5
 8006b00:	f000 fb4a 	bl	8007198 <_realloc_r>
 8006b04:	4606      	mov	r6, r0
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d1e2      	bne.n	8006ad0 <__ssputs_r+0x70>
 8006b0a:	6921      	ldr	r1, [r4, #16]
 8006b0c:	4650      	mov	r0, sl
 8006b0e:	f000 fa9b 	bl	8007048 <_free_r>
 8006b12:	e7c8      	b.n	8006aa6 <__ssputs_r+0x46>

08006b14 <_svfiprintf_r>:
 8006b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b18:	461d      	mov	r5, r3
 8006b1a:	898b      	ldrh	r3, [r1, #12]
 8006b1c:	061f      	lsls	r7, r3, #24
 8006b1e:	b09d      	sub	sp, #116	; 0x74
 8006b20:	4680      	mov	r8, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	4616      	mov	r6, r2
 8006b26:	d50f      	bpl.n	8006b48 <_svfiprintf_r+0x34>
 8006b28:	690b      	ldr	r3, [r1, #16]
 8006b2a:	b96b      	cbnz	r3, 8006b48 <_svfiprintf_r+0x34>
 8006b2c:	2140      	movs	r1, #64	; 0x40
 8006b2e:	f000 fad9 	bl	80070e4 <_malloc_r>
 8006b32:	6020      	str	r0, [r4, #0]
 8006b34:	6120      	str	r0, [r4, #16]
 8006b36:	b928      	cbnz	r0, 8006b44 <_svfiprintf_r+0x30>
 8006b38:	230c      	movs	r3, #12
 8006b3a:	f8c8 3000 	str.w	r3, [r8]
 8006b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b42:	e0c8      	b.n	8006cd6 <_svfiprintf_r+0x1c2>
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	6163      	str	r3, [r4, #20]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b52:	2330      	movs	r3, #48	; 0x30
 8006b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b58:	9503      	str	r5, [sp, #12]
 8006b5a:	f04f 0b01 	mov.w	fp, #1
 8006b5e:	4637      	mov	r7, r6
 8006b60:	463d      	mov	r5, r7
 8006b62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b66:	b10b      	cbz	r3, 8006b6c <_svfiprintf_r+0x58>
 8006b68:	2b25      	cmp	r3, #37	; 0x25
 8006b6a:	d13e      	bne.n	8006bea <_svfiprintf_r+0xd6>
 8006b6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b70:	d00b      	beq.n	8006b8a <_svfiprintf_r+0x76>
 8006b72:	4653      	mov	r3, sl
 8006b74:	4632      	mov	r2, r6
 8006b76:	4621      	mov	r1, r4
 8006b78:	4640      	mov	r0, r8
 8006b7a:	f7ff ff71 	bl	8006a60 <__ssputs_r>
 8006b7e:	3001      	adds	r0, #1
 8006b80:	f000 80a4 	beq.w	8006ccc <_svfiprintf_r+0x1b8>
 8006b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b86:	4453      	add	r3, sl
 8006b88:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8a:	783b      	ldrb	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 809d 	beq.w	8006ccc <_svfiprintf_r+0x1b8>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba6:	462f      	mov	r7, r5
 8006ba8:	2205      	movs	r2, #5
 8006baa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006bae:	4850      	ldr	r0, [pc, #320]	; (8006cf0 <_svfiprintf_r+0x1dc>)
 8006bb0:	f7f9 fb0e 	bl	80001d0 <memchr>
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	b9d0      	cbnz	r0, 8006bee <_svfiprintf_r+0xda>
 8006bb8:	06d9      	lsls	r1, r3, #27
 8006bba:	bf44      	itt	mi
 8006bbc:	2220      	movmi	r2, #32
 8006bbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bc2:	071a      	lsls	r2, r3, #28
 8006bc4:	bf44      	itt	mi
 8006bc6:	222b      	movmi	r2, #43	; 0x2b
 8006bc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bcc:	782a      	ldrb	r2, [r5, #0]
 8006bce:	2a2a      	cmp	r2, #42	; 0x2a
 8006bd0:	d015      	beq.n	8006bfe <_svfiprintf_r+0xea>
 8006bd2:	9a07      	ldr	r2, [sp, #28]
 8006bd4:	462f      	mov	r7, r5
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	250a      	movs	r5, #10
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be0:	3b30      	subs	r3, #48	; 0x30
 8006be2:	2b09      	cmp	r3, #9
 8006be4:	d94d      	bls.n	8006c82 <_svfiprintf_r+0x16e>
 8006be6:	b1b8      	cbz	r0, 8006c18 <_svfiprintf_r+0x104>
 8006be8:	e00f      	b.n	8006c0a <_svfiprintf_r+0xf6>
 8006bea:	462f      	mov	r7, r5
 8006bec:	e7b8      	b.n	8006b60 <_svfiprintf_r+0x4c>
 8006bee:	4a40      	ldr	r2, [pc, #256]	; (8006cf0 <_svfiprintf_r+0x1dc>)
 8006bf0:	1a80      	subs	r0, r0, r2
 8006bf2:	fa0b f000 	lsl.w	r0, fp, r0
 8006bf6:	4318      	orrs	r0, r3
 8006bf8:	9004      	str	r0, [sp, #16]
 8006bfa:	463d      	mov	r5, r7
 8006bfc:	e7d3      	b.n	8006ba6 <_svfiprintf_r+0x92>
 8006bfe:	9a03      	ldr	r2, [sp, #12]
 8006c00:	1d11      	adds	r1, r2, #4
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	9103      	str	r1, [sp, #12]
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	db01      	blt.n	8006c0e <_svfiprintf_r+0xfa>
 8006c0a:	9207      	str	r2, [sp, #28]
 8006c0c:	e004      	b.n	8006c18 <_svfiprintf_r+0x104>
 8006c0e:	4252      	negs	r2, r2
 8006c10:	f043 0302 	orr.w	r3, r3, #2
 8006c14:	9207      	str	r2, [sp, #28]
 8006c16:	9304      	str	r3, [sp, #16]
 8006c18:	783b      	ldrb	r3, [r7, #0]
 8006c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c1c:	d10c      	bne.n	8006c38 <_svfiprintf_r+0x124>
 8006c1e:	787b      	ldrb	r3, [r7, #1]
 8006c20:	2b2a      	cmp	r3, #42	; 0x2a
 8006c22:	d133      	bne.n	8006c8c <_svfiprintf_r+0x178>
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	1d1a      	adds	r2, r3, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	9203      	str	r2, [sp, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bfb8      	it	lt
 8006c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c34:	3702      	adds	r7, #2
 8006c36:	9305      	str	r3, [sp, #20]
 8006c38:	4d2e      	ldr	r5, [pc, #184]	; (8006cf4 <_svfiprintf_r+0x1e0>)
 8006c3a:	7839      	ldrb	r1, [r7, #0]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7f9 fac6 	bl	80001d0 <memchr>
 8006c44:	b138      	cbz	r0, 8006c56 <_svfiprintf_r+0x142>
 8006c46:	2340      	movs	r3, #64	; 0x40
 8006c48:	1b40      	subs	r0, r0, r5
 8006c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c4e:	9b04      	ldr	r3, [sp, #16]
 8006c50:	4303      	orrs	r3, r0
 8006c52:	3701      	adds	r7, #1
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	7839      	ldrb	r1, [r7, #0]
 8006c58:	4827      	ldr	r0, [pc, #156]	; (8006cf8 <_svfiprintf_r+0x1e4>)
 8006c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c5e:	2206      	movs	r2, #6
 8006c60:	1c7e      	adds	r6, r7, #1
 8006c62:	f7f9 fab5 	bl	80001d0 <memchr>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d038      	beq.n	8006cdc <_svfiprintf_r+0x1c8>
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <_svfiprintf_r+0x1e8>)
 8006c6c:	bb13      	cbnz	r3, 8006cb4 <_svfiprintf_r+0x1a0>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	3307      	adds	r3, #7
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	3308      	adds	r3, #8
 8006c78:	9303      	str	r3, [sp, #12]
 8006c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7c:	444b      	add	r3, r9
 8006c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c80:	e76d      	b.n	8006b5e <_svfiprintf_r+0x4a>
 8006c82:	fb05 3202 	mla	r2, r5, r2, r3
 8006c86:	2001      	movs	r0, #1
 8006c88:	460f      	mov	r7, r1
 8006c8a:	e7a6      	b.n	8006bda <_svfiprintf_r+0xc6>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	3701      	adds	r7, #1
 8006c90:	9305      	str	r3, [sp, #20]
 8006c92:	4619      	mov	r1, r3
 8006c94:	250a      	movs	r5, #10
 8006c96:	4638      	mov	r0, r7
 8006c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c9c:	3a30      	subs	r2, #48	; 0x30
 8006c9e:	2a09      	cmp	r2, #9
 8006ca0:	d903      	bls.n	8006caa <_svfiprintf_r+0x196>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0c8      	beq.n	8006c38 <_svfiprintf_r+0x124>
 8006ca6:	9105      	str	r1, [sp, #20]
 8006ca8:	e7c6      	b.n	8006c38 <_svfiprintf_r+0x124>
 8006caa:	fb05 2101 	mla	r1, r5, r1, r2
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	e7f0      	b.n	8006c96 <_svfiprintf_r+0x182>
 8006cb4:	ab03      	add	r3, sp, #12
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	4622      	mov	r2, r4
 8006cba:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <_svfiprintf_r+0x1ec>)
 8006cbc:	a904      	add	r1, sp, #16
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	f3af 8000 	nop.w
 8006cc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006cc8:	4681      	mov	r9, r0
 8006cca:	d1d6      	bne.n	8006c7a <_svfiprintf_r+0x166>
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	065b      	lsls	r3, r3, #25
 8006cd0:	f53f af35 	bmi.w	8006b3e <_svfiprintf_r+0x2a>
 8006cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cd6:	b01d      	add	sp, #116	; 0x74
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	ab03      	add	r3, sp, #12
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <_svfiprintf_r+0x1ec>)
 8006ce4:	a904      	add	r1, sp, #16
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	f000 f882 	bl	8006df0 <_printf_i>
 8006cec:	e7ea      	b.n	8006cc4 <_svfiprintf_r+0x1b0>
 8006cee:	bf00      	nop
 8006cf0:	08007384 	.word	0x08007384
 8006cf4:	0800738a 	.word	0x0800738a
 8006cf8:	0800738e 	.word	0x0800738e
 8006cfc:	00000000 	.word	0x00000000
 8006d00:	08006a61 	.word	0x08006a61

08006d04 <_printf_common>:
 8006d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d08:	4691      	mov	r9, r2
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	688a      	ldr	r2, [r1, #8]
 8006d0e:	690b      	ldr	r3, [r1, #16]
 8006d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d14:	4293      	cmp	r3, r2
 8006d16:	bfb8      	it	lt
 8006d18:	4613      	movlt	r3, r2
 8006d1a:	f8c9 3000 	str.w	r3, [r9]
 8006d1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d22:	4606      	mov	r6, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	b112      	cbz	r2, 8006d2e <_printf_common+0x2a>
 8006d28:	3301      	adds	r3, #1
 8006d2a:	f8c9 3000 	str.w	r3, [r9]
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	0699      	lsls	r1, r3, #26
 8006d32:	bf42      	ittt	mi
 8006d34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d38:	3302      	addmi	r3, #2
 8006d3a:	f8c9 3000 	strmi.w	r3, [r9]
 8006d3e:	6825      	ldr	r5, [r4, #0]
 8006d40:	f015 0506 	ands.w	r5, r5, #6
 8006d44:	d107      	bne.n	8006d56 <_printf_common+0x52>
 8006d46:	f104 0a19 	add.w	sl, r4, #25
 8006d4a:	68e3      	ldr	r3, [r4, #12]
 8006d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	42ab      	cmp	r3, r5
 8006d54:	dc28      	bgt.n	8006da8 <_printf_common+0xa4>
 8006d56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	3300      	adds	r3, #0
 8006d5e:	bf18      	it	ne
 8006d60:	2301      	movne	r3, #1
 8006d62:	0692      	lsls	r2, r2, #26
 8006d64:	d42d      	bmi.n	8006dc2 <_printf_common+0xbe>
 8006d66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d6a:	4639      	mov	r1, r7
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	47c0      	blx	r8
 8006d70:	3001      	adds	r0, #1
 8006d72:	d020      	beq.n	8006db6 <_printf_common+0xb2>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	68e5      	ldr	r5, [r4, #12]
 8006d78:	f8d9 2000 	ldr.w	r2, [r9]
 8006d7c:	f003 0306 	and.w	r3, r3, #6
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	bf08      	it	eq
 8006d84:	1aad      	subeq	r5, r5, r2
 8006d86:	68a3      	ldr	r3, [r4, #8]
 8006d88:	6922      	ldr	r2, [r4, #16]
 8006d8a:	bf0c      	ite	eq
 8006d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d90:	2500      	movne	r5, #0
 8006d92:	4293      	cmp	r3, r2
 8006d94:	bfc4      	itt	gt
 8006d96:	1a9b      	subgt	r3, r3, r2
 8006d98:	18ed      	addgt	r5, r5, r3
 8006d9a:	f04f 0900 	mov.w	r9, #0
 8006d9e:	341a      	adds	r4, #26
 8006da0:	454d      	cmp	r5, r9
 8006da2:	d11a      	bne.n	8006dda <_printf_common+0xd6>
 8006da4:	2000      	movs	r0, #0
 8006da6:	e008      	b.n	8006dba <_printf_common+0xb6>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4652      	mov	r2, sl
 8006dac:	4639      	mov	r1, r7
 8006dae:	4630      	mov	r0, r6
 8006db0:	47c0      	blx	r8
 8006db2:	3001      	adds	r0, #1
 8006db4:	d103      	bne.n	8006dbe <_printf_common+0xba>
 8006db6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbe:	3501      	adds	r5, #1
 8006dc0:	e7c3      	b.n	8006d4a <_printf_common+0x46>
 8006dc2:	18e1      	adds	r1, r4, r3
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	2030      	movs	r0, #48	; 0x30
 8006dc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dcc:	4422      	add	r2, r4
 8006dce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dd6:	3302      	adds	r3, #2
 8006dd8:	e7c5      	b.n	8006d66 <_printf_common+0x62>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4622      	mov	r2, r4
 8006dde:	4639      	mov	r1, r7
 8006de0:	4630      	mov	r0, r6
 8006de2:	47c0      	blx	r8
 8006de4:	3001      	adds	r0, #1
 8006de6:	d0e6      	beq.n	8006db6 <_printf_common+0xb2>
 8006de8:	f109 0901 	add.w	r9, r9, #1
 8006dec:	e7d8      	b.n	8006da0 <_printf_common+0x9c>
	...

08006df0 <_printf_i>:
 8006df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006df4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006df8:	460c      	mov	r4, r1
 8006dfa:	7e09      	ldrb	r1, [r1, #24]
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	296e      	cmp	r1, #110	; 0x6e
 8006e00:	4617      	mov	r7, r2
 8006e02:	4606      	mov	r6, r0
 8006e04:	4698      	mov	r8, r3
 8006e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e08:	f000 80b3 	beq.w	8006f72 <_printf_i+0x182>
 8006e0c:	d822      	bhi.n	8006e54 <_printf_i+0x64>
 8006e0e:	2963      	cmp	r1, #99	; 0x63
 8006e10:	d036      	beq.n	8006e80 <_printf_i+0x90>
 8006e12:	d80a      	bhi.n	8006e2a <_printf_i+0x3a>
 8006e14:	2900      	cmp	r1, #0
 8006e16:	f000 80b9 	beq.w	8006f8c <_printf_i+0x19c>
 8006e1a:	2958      	cmp	r1, #88	; 0x58
 8006e1c:	f000 8083 	beq.w	8006f26 <_printf_i+0x136>
 8006e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e28:	e032      	b.n	8006e90 <_printf_i+0xa0>
 8006e2a:	2964      	cmp	r1, #100	; 0x64
 8006e2c:	d001      	beq.n	8006e32 <_printf_i+0x42>
 8006e2e:	2969      	cmp	r1, #105	; 0x69
 8006e30:	d1f6      	bne.n	8006e20 <_printf_i+0x30>
 8006e32:	6820      	ldr	r0, [r4, #0]
 8006e34:	6813      	ldr	r3, [r2, #0]
 8006e36:	0605      	lsls	r5, r0, #24
 8006e38:	f103 0104 	add.w	r1, r3, #4
 8006e3c:	d52a      	bpl.n	8006e94 <_printf_i+0xa4>
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6011      	str	r1, [r2, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	da03      	bge.n	8006e4e <_printf_i+0x5e>
 8006e46:	222d      	movs	r2, #45	; 0x2d
 8006e48:	425b      	negs	r3, r3
 8006e4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e4e:	486f      	ldr	r0, [pc, #444]	; (800700c <_printf_i+0x21c>)
 8006e50:	220a      	movs	r2, #10
 8006e52:	e039      	b.n	8006ec8 <_printf_i+0xd8>
 8006e54:	2973      	cmp	r1, #115	; 0x73
 8006e56:	f000 809d 	beq.w	8006f94 <_printf_i+0x1a4>
 8006e5a:	d808      	bhi.n	8006e6e <_printf_i+0x7e>
 8006e5c:	296f      	cmp	r1, #111	; 0x6f
 8006e5e:	d020      	beq.n	8006ea2 <_printf_i+0xb2>
 8006e60:	2970      	cmp	r1, #112	; 0x70
 8006e62:	d1dd      	bne.n	8006e20 <_printf_i+0x30>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	f043 0320 	orr.w	r3, r3, #32
 8006e6a:	6023      	str	r3, [r4, #0]
 8006e6c:	e003      	b.n	8006e76 <_printf_i+0x86>
 8006e6e:	2975      	cmp	r1, #117	; 0x75
 8006e70:	d017      	beq.n	8006ea2 <_printf_i+0xb2>
 8006e72:	2978      	cmp	r1, #120	; 0x78
 8006e74:	d1d4      	bne.n	8006e20 <_printf_i+0x30>
 8006e76:	2378      	movs	r3, #120	; 0x78
 8006e78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e7c:	4864      	ldr	r0, [pc, #400]	; (8007010 <_printf_i+0x220>)
 8006e7e:	e055      	b.n	8006f2c <_printf_i+0x13c>
 8006e80:	6813      	ldr	r3, [r2, #0]
 8006e82:	1d19      	adds	r1, r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6011      	str	r1, [r2, #0]
 8006e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e90:	2301      	movs	r3, #1
 8006e92:	e08c      	b.n	8006fae <_printf_i+0x1be>
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6011      	str	r1, [r2, #0]
 8006e98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e9c:	bf18      	it	ne
 8006e9e:	b21b      	sxthne	r3, r3
 8006ea0:	e7cf      	b.n	8006e42 <_printf_i+0x52>
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	6825      	ldr	r5, [r4, #0]
 8006ea6:	1d18      	adds	r0, r3, #4
 8006ea8:	6010      	str	r0, [r2, #0]
 8006eaa:	0628      	lsls	r0, r5, #24
 8006eac:	d501      	bpl.n	8006eb2 <_printf_i+0xc2>
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	e002      	b.n	8006eb8 <_printf_i+0xc8>
 8006eb2:	0668      	lsls	r0, r5, #25
 8006eb4:	d5fb      	bpl.n	8006eae <_printf_i+0xbe>
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	4854      	ldr	r0, [pc, #336]	; (800700c <_printf_i+0x21c>)
 8006eba:	296f      	cmp	r1, #111	; 0x6f
 8006ebc:	bf14      	ite	ne
 8006ebe:	220a      	movne	r2, #10
 8006ec0:	2208      	moveq	r2, #8
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ec8:	6865      	ldr	r5, [r4, #4]
 8006eca:	60a5      	str	r5, [r4, #8]
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	f2c0 8095 	blt.w	8006ffc <_printf_i+0x20c>
 8006ed2:	6821      	ldr	r1, [r4, #0]
 8006ed4:	f021 0104 	bic.w	r1, r1, #4
 8006ed8:	6021      	str	r1, [r4, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d13d      	bne.n	8006f5a <_printf_i+0x16a>
 8006ede:	2d00      	cmp	r5, #0
 8006ee0:	f040 808e 	bne.w	8007000 <_printf_i+0x210>
 8006ee4:	4665      	mov	r5, ip
 8006ee6:	2a08      	cmp	r2, #8
 8006ee8:	d10b      	bne.n	8006f02 <_printf_i+0x112>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	07db      	lsls	r3, r3, #31
 8006eee:	d508      	bpl.n	8006f02 <_printf_i+0x112>
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	bfde      	ittt	le
 8006ef8:	2330      	movle	r3, #48	; 0x30
 8006efa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006efe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f02:	ebac 0305 	sub.w	r3, ip, r5
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	f8cd 8000 	str.w	r8, [sp]
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	aa03      	add	r2, sp, #12
 8006f10:	4621      	mov	r1, r4
 8006f12:	4630      	mov	r0, r6
 8006f14:	f7ff fef6 	bl	8006d04 <_printf_common>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d14d      	bne.n	8006fb8 <_printf_i+0x1c8>
 8006f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f20:	b005      	add	sp, #20
 8006f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f26:	4839      	ldr	r0, [pc, #228]	; (800700c <_printf_i+0x21c>)
 8006f28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f2c:	6813      	ldr	r3, [r2, #0]
 8006f2e:	6821      	ldr	r1, [r4, #0]
 8006f30:	1d1d      	adds	r5, r3, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6015      	str	r5, [r2, #0]
 8006f36:	060a      	lsls	r2, r1, #24
 8006f38:	d50b      	bpl.n	8006f52 <_printf_i+0x162>
 8006f3a:	07ca      	lsls	r2, r1, #31
 8006f3c:	bf44      	itt	mi
 8006f3e:	f041 0120 	orrmi.w	r1, r1, #32
 8006f42:	6021      	strmi	r1, [r4, #0]
 8006f44:	b91b      	cbnz	r3, 8006f4e <_printf_i+0x15e>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	f022 0220 	bic.w	r2, r2, #32
 8006f4c:	6022      	str	r2, [r4, #0]
 8006f4e:	2210      	movs	r2, #16
 8006f50:	e7b7      	b.n	8006ec2 <_printf_i+0xd2>
 8006f52:	064d      	lsls	r5, r1, #25
 8006f54:	bf48      	it	mi
 8006f56:	b29b      	uxthmi	r3, r3
 8006f58:	e7ef      	b.n	8006f3a <_printf_i+0x14a>
 8006f5a:	4665      	mov	r5, ip
 8006f5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f60:	fb02 3311 	mls	r3, r2, r1, r3
 8006f64:	5cc3      	ldrb	r3, [r0, r3]
 8006f66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d1f5      	bne.n	8006f5c <_printf_i+0x16c>
 8006f70:	e7b9      	b.n	8006ee6 <_printf_i+0xf6>
 8006f72:	6813      	ldr	r3, [r2, #0]
 8006f74:	6825      	ldr	r5, [r4, #0]
 8006f76:	6961      	ldr	r1, [r4, #20]
 8006f78:	1d18      	adds	r0, r3, #4
 8006f7a:	6010      	str	r0, [r2, #0]
 8006f7c:	0628      	lsls	r0, r5, #24
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	d501      	bpl.n	8006f86 <_printf_i+0x196>
 8006f82:	6019      	str	r1, [r3, #0]
 8006f84:	e002      	b.n	8006f8c <_printf_i+0x19c>
 8006f86:	066a      	lsls	r2, r5, #25
 8006f88:	d5fb      	bpl.n	8006f82 <_printf_i+0x192>
 8006f8a:	8019      	strh	r1, [r3, #0]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	4665      	mov	r5, ip
 8006f92:	e7b9      	b.n	8006f08 <_printf_i+0x118>
 8006f94:	6813      	ldr	r3, [r2, #0]
 8006f96:	1d19      	adds	r1, r3, #4
 8006f98:	6011      	str	r1, [r2, #0]
 8006f9a:	681d      	ldr	r5, [r3, #0]
 8006f9c:	6862      	ldr	r2, [r4, #4]
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f7f9 f915 	bl	80001d0 <memchr>
 8006fa6:	b108      	cbz	r0, 8006fac <_printf_i+0x1bc>
 8006fa8:	1b40      	subs	r0, r0, r5
 8006faa:	6060      	str	r0, [r4, #4]
 8006fac:	6863      	ldr	r3, [r4, #4]
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb6:	e7a7      	b.n	8006f08 <_printf_i+0x118>
 8006fb8:	6923      	ldr	r3, [r4, #16]
 8006fba:	462a      	mov	r2, r5
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	47c0      	blx	r8
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d0aa      	beq.n	8006f1c <_printf_i+0x12c>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	079b      	lsls	r3, r3, #30
 8006fca:	d413      	bmi.n	8006ff4 <_printf_i+0x204>
 8006fcc:	68e0      	ldr	r0, [r4, #12]
 8006fce:	9b03      	ldr	r3, [sp, #12]
 8006fd0:	4298      	cmp	r0, r3
 8006fd2:	bfb8      	it	lt
 8006fd4:	4618      	movlt	r0, r3
 8006fd6:	e7a3      	b.n	8006f20 <_printf_i+0x130>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	464a      	mov	r2, r9
 8006fdc:	4639      	mov	r1, r7
 8006fde:	4630      	mov	r0, r6
 8006fe0:	47c0      	blx	r8
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d09a      	beq.n	8006f1c <_printf_i+0x12c>
 8006fe6:	3501      	adds	r5, #1
 8006fe8:	68e3      	ldr	r3, [r4, #12]
 8006fea:	9a03      	ldr	r2, [sp, #12]
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	42ab      	cmp	r3, r5
 8006ff0:	dcf2      	bgt.n	8006fd8 <_printf_i+0x1e8>
 8006ff2:	e7eb      	b.n	8006fcc <_printf_i+0x1dc>
 8006ff4:	2500      	movs	r5, #0
 8006ff6:	f104 0919 	add.w	r9, r4, #25
 8006ffa:	e7f5      	b.n	8006fe8 <_printf_i+0x1f8>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1ac      	bne.n	8006f5a <_printf_i+0x16a>
 8007000:	7803      	ldrb	r3, [r0, #0]
 8007002:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007006:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800700a:	e76c      	b.n	8006ee6 <_printf_i+0xf6>
 800700c:	08007395 	.word	0x08007395
 8007010:	080073a6 	.word	0x080073a6

08007014 <memmove>:
 8007014:	4288      	cmp	r0, r1
 8007016:	b510      	push	{r4, lr}
 8007018:	eb01 0302 	add.w	r3, r1, r2
 800701c:	d807      	bhi.n	800702e <memmove+0x1a>
 800701e:	1e42      	subs	r2, r0, #1
 8007020:	4299      	cmp	r1, r3
 8007022:	d00a      	beq.n	800703a <memmove+0x26>
 8007024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007028:	f802 4f01 	strb.w	r4, [r2, #1]!
 800702c:	e7f8      	b.n	8007020 <memmove+0xc>
 800702e:	4283      	cmp	r3, r0
 8007030:	d9f5      	bls.n	800701e <memmove+0xa>
 8007032:	1881      	adds	r1, r0, r2
 8007034:	1ad2      	subs	r2, r2, r3
 8007036:	42d3      	cmn	r3, r2
 8007038:	d100      	bne.n	800703c <memmove+0x28>
 800703a:	bd10      	pop	{r4, pc}
 800703c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007040:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007044:	e7f7      	b.n	8007036 <memmove+0x22>
	...

08007048 <_free_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4605      	mov	r5, r0
 800704c:	2900      	cmp	r1, #0
 800704e:	d045      	beq.n	80070dc <_free_r+0x94>
 8007050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007054:	1f0c      	subs	r4, r1, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	bfb8      	it	lt
 800705a:	18e4      	addlt	r4, r4, r3
 800705c:	f000 f8d2 	bl	8007204 <__malloc_lock>
 8007060:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <_free_r+0x98>)
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	4610      	mov	r0, r2
 8007066:	b933      	cbnz	r3, 8007076 <_free_r+0x2e>
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	6014      	str	r4, [r2, #0]
 800706c:	4628      	mov	r0, r5
 800706e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007072:	f000 b8c8 	b.w	8007206 <__malloc_unlock>
 8007076:	42a3      	cmp	r3, r4
 8007078:	d90c      	bls.n	8007094 <_free_r+0x4c>
 800707a:	6821      	ldr	r1, [r4, #0]
 800707c:	1862      	adds	r2, r4, r1
 800707e:	4293      	cmp	r3, r2
 8007080:	bf04      	itt	eq
 8007082:	681a      	ldreq	r2, [r3, #0]
 8007084:	685b      	ldreq	r3, [r3, #4]
 8007086:	6063      	str	r3, [r4, #4]
 8007088:	bf04      	itt	eq
 800708a:	1852      	addeq	r2, r2, r1
 800708c:	6022      	streq	r2, [r4, #0]
 800708e:	6004      	str	r4, [r0, #0]
 8007090:	e7ec      	b.n	800706c <_free_r+0x24>
 8007092:	4613      	mov	r3, r2
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	b10a      	cbz	r2, 800709c <_free_r+0x54>
 8007098:	42a2      	cmp	r2, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x4a>
 800709c:	6819      	ldr	r1, [r3, #0]
 800709e:	1858      	adds	r0, r3, r1
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x74>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	4401      	add	r1, r0
 80070a8:	1858      	adds	r0, r3, r1
 80070aa:	4282      	cmp	r2, r0
 80070ac:	6019      	str	r1, [r3, #0]
 80070ae:	d1dd      	bne.n	800706c <_free_r+0x24>
 80070b0:	6810      	ldr	r0, [r2, #0]
 80070b2:	6852      	ldr	r2, [r2, #4]
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	4401      	add	r1, r0
 80070b8:	6019      	str	r1, [r3, #0]
 80070ba:	e7d7      	b.n	800706c <_free_r+0x24>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x7c>
 80070be:	230c      	movs	r3, #12
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	e7d3      	b.n	800706c <_free_r+0x24>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	1821      	adds	r1, r4, r0
 80070c8:	428a      	cmp	r2, r1
 80070ca:	bf04      	itt	eq
 80070cc:	6811      	ldreq	r1, [r2, #0]
 80070ce:	6852      	ldreq	r2, [r2, #4]
 80070d0:	6062      	str	r2, [r4, #4]
 80070d2:	bf04      	itt	eq
 80070d4:	1809      	addeq	r1, r1, r0
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	605c      	str	r4, [r3, #4]
 80070da:	e7c7      	b.n	800706c <_free_r+0x24>
 80070dc:	bd38      	pop	{r3, r4, r5, pc}
 80070de:	bf00      	nop
 80070e0:	20001084 	.word	0x20001084

080070e4 <_malloc_r>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	1ccd      	adds	r5, r1, #3
 80070e8:	f025 0503 	bic.w	r5, r5, #3
 80070ec:	3508      	adds	r5, #8
 80070ee:	2d0c      	cmp	r5, #12
 80070f0:	bf38      	it	cc
 80070f2:	250c      	movcc	r5, #12
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	4606      	mov	r6, r0
 80070f8:	db01      	blt.n	80070fe <_malloc_r+0x1a>
 80070fa:	42a9      	cmp	r1, r5
 80070fc:	d903      	bls.n	8007106 <_malloc_r+0x22>
 80070fe:	230c      	movs	r3, #12
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	2000      	movs	r0, #0
 8007104:	bd70      	pop	{r4, r5, r6, pc}
 8007106:	f000 f87d 	bl	8007204 <__malloc_lock>
 800710a:	4a21      	ldr	r2, [pc, #132]	; (8007190 <_malloc_r+0xac>)
 800710c:	6814      	ldr	r4, [r2, #0]
 800710e:	4621      	mov	r1, r4
 8007110:	b991      	cbnz	r1, 8007138 <_malloc_r+0x54>
 8007112:	4c20      	ldr	r4, [pc, #128]	; (8007194 <_malloc_r+0xb0>)
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	b91b      	cbnz	r3, 8007120 <_malloc_r+0x3c>
 8007118:	4630      	mov	r0, r6
 800711a:	f000 f863 	bl	80071e4 <_sbrk_r>
 800711e:	6020      	str	r0, [r4, #0]
 8007120:	4629      	mov	r1, r5
 8007122:	4630      	mov	r0, r6
 8007124:	f000 f85e 	bl	80071e4 <_sbrk_r>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d124      	bne.n	8007176 <_malloc_r+0x92>
 800712c:	230c      	movs	r3, #12
 800712e:	6033      	str	r3, [r6, #0]
 8007130:	4630      	mov	r0, r6
 8007132:	f000 f868 	bl	8007206 <__malloc_unlock>
 8007136:	e7e4      	b.n	8007102 <_malloc_r+0x1e>
 8007138:	680b      	ldr	r3, [r1, #0]
 800713a:	1b5b      	subs	r3, r3, r5
 800713c:	d418      	bmi.n	8007170 <_malloc_r+0x8c>
 800713e:	2b0b      	cmp	r3, #11
 8007140:	d90f      	bls.n	8007162 <_malloc_r+0x7e>
 8007142:	600b      	str	r3, [r1, #0]
 8007144:	50cd      	str	r5, [r1, r3]
 8007146:	18cc      	adds	r4, r1, r3
 8007148:	4630      	mov	r0, r6
 800714a:	f000 f85c 	bl	8007206 <__malloc_unlock>
 800714e:	f104 000b 	add.w	r0, r4, #11
 8007152:	1d23      	adds	r3, r4, #4
 8007154:	f020 0007 	bic.w	r0, r0, #7
 8007158:	1ac3      	subs	r3, r0, r3
 800715a:	d0d3      	beq.n	8007104 <_malloc_r+0x20>
 800715c:	425a      	negs	r2, r3
 800715e:	50e2      	str	r2, [r4, r3]
 8007160:	e7d0      	b.n	8007104 <_malloc_r+0x20>
 8007162:	428c      	cmp	r4, r1
 8007164:	684b      	ldr	r3, [r1, #4]
 8007166:	bf16      	itet	ne
 8007168:	6063      	strne	r3, [r4, #4]
 800716a:	6013      	streq	r3, [r2, #0]
 800716c:	460c      	movne	r4, r1
 800716e:	e7eb      	b.n	8007148 <_malloc_r+0x64>
 8007170:	460c      	mov	r4, r1
 8007172:	6849      	ldr	r1, [r1, #4]
 8007174:	e7cc      	b.n	8007110 <_malloc_r+0x2c>
 8007176:	1cc4      	adds	r4, r0, #3
 8007178:	f024 0403 	bic.w	r4, r4, #3
 800717c:	42a0      	cmp	r0, r4
 800717e:	d005      	beq.n	800718c <_malloc_r+0xa8>
 8007180:	1a21      	subs	r1, r4, r0
 8007182:	4630      	mov	r0, r6
 8007184:	f000 f82e 	bl	80071e4 <_sbrk_r>
 8007188:	3001      	adds	r0, #1
 800718a:	d0cf      	beq.n	800712c <_malloc_r+0x48>
 800718c:	6025      	str	r5, [r4, #0]
 800718e:	e7db      	b.n	8007148 <_malloc_r+0x64>
 8007190:	20001084 	.word	0x20001084
 8007194:	20001088 	.word	0x20001088

08007198 <_realloc_r>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	4607      	mov	r7, r0
 800719c:	4614      	mov	r4, r2
 800719e:	460e      	mov	r6, r1
 80071a0:	b921      	cbnz	r1, 80071ac <_realloc_r+0x14>
 80071a2:	4611      	mov	r1, r2
 80071a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071a8:	f7ff bf9c 	b.w	80070e4 <_malloc_r>
 80071ac:	b922      	cbnz	r2, 80071b8 <_realloc_r+0x20>
 80071ae:	f7ff ff4b 	bl	8007048 <_free_r>
 80071b2:	4625      	mov	r5, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b8:	f000 f826 	bl	8007208 <_malloc_usable_size_r>
 80071bc:	42a0      	cmp	r0, r4
 80071be:	d20f      	bcs.n	80071e0 <_realloc_r+0x48>
 80071c0:	4621      	mov	r1, r4
 80071c2:	4638      	mov	r0, r7
 80071c4:	f7ff ff8e 	bl	80070e4 <_malloc_r>
 80071c8:	4605      	mov	r5, r0
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d0f2      	beq.n	80071b4 <_realloc_r+0x1c>
 80071ce:	4631      	mov	r1, r6
 80071d0:	4622      	mov	r2, r4
 80071d2:	f7ff fc11 	bl	80069f8 <memcpy>
 80071d6:	4631      	mov	r1, r6
 80071d8:	4638      	mov	r0, r7
 80071da:	f7ff ff35 	bl	8007048 <_free_r>
 80071de:	e7e9      	b.n	80071b4 <_realloc_r+0x1c>
 80071e0:	4635      	mov	r5, r6
 80071e2:	e7e7      	b.n	80071b4 <_realloc_r+0x1c>

080071e4 <_sbrk_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4c06      	ldr	r4, [pc, #24]	; (8007200 <_sbrk_r+0x1c>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4605      	mov	r5, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	f7ff fb42 	bl	8006878 <_sbrk>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_sbrk_r+0x1a>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_sbrk_r+0x1a>
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20001428 	.word	0x20001428

08007204 <__malloc_lock>:
 8007204:	4770      	bx	lr

08007206 <__malloc_unlock>:
 8007206:	4770      	bx	lr

08007208 <_malloc_usable_size_r>:
 8007208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800720c:	1f18      	subs	r0, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	bfbc      	itt	lt
 8007212:	580b      	ldrlt	r3, [r1, r0]
 8007214:	18c0      	addlt	r0, r0, r3
 8007216:	4770      	bx	lr

08007218 <_init>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr

08007224 <_fini>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	bf00      	nop
 8007228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722a:	bc08      	pop	{r3}
 800722c:	469e      	mov	lr, r3
 800722e:	4770      	bx	lr
